/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserRequest;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserResponse;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserdefaultResponse;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspaceRequest;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspaceResponse;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminusersListWorkspaceUsersResponse;
import com.konfigthis.client.model.AdminusersListWorkspaceUsersdefaultResponse;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspaceRequest;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspaceResponse;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminusersSetAdminUserRequest;
import com.konfigthis.client.model.AdminusersSetAdminUserResponse;
import com.konfigthis.client.model.AdminusersSetAdminUserdefaultResponse;
import com.konfigthis.client.model.AdminusersSetExpirationGuestRequest;
import com.konfigthis.client.model.AdminusersSetExpirationGuestResponse;
import com.konfigthis.client.model.AdminusersSetExpirationGuestdefaultResponse;
import com.konfigthis.client.model.AdminusersSetRegularUserRequest;
import com.konfigthis.client.model.AdminusersSetRegularUserResponse;
import com.konfigthis.client.model.AdminusersSetRegularUserdefaultResponse;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerRequest;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerResponse;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerdefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminUsersApi
 */
@Disabled
public class AdminUsersApiTest {

    private static AdminUsersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AdminUsersApi(apiClient);
    }

    /**
     * Add an Enterprise user to a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addWorkspaceUserTest() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        String channelIds = null;
        Boolean isRestricted = null;
        Boolean isUltraRestricted = null;
        AdminusersAddWorkspaceUserResponse response = api.addWorkspaceUser(token, teamId, userId)
                .channelIds(channelIds)
                .isRestricted(isRestricted)
                .isUltraRestricted(isUltraRestricted)
                .execute();
        // TODO: test validations
    }

    /**
     * Invite a user to a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteUserToWorkspaceTest() throws ApiException {
        String token = null;
        String channelIds = null;
        String email = null;
        String teamId = null;
        String customMessage = null;
        String guestExpirationTs = null;
        Boolean isRestricted = null;
        Boolean isUltraRestricted = null;
        String realName = null;
        Boolean resend = null;
        AdminusersInviteUserToWorkspaceResponse response = api.inviteUserToWorkspace(token, channelIds, email, teamId)
                .customMessage(customMessage)
                .guestExpirationTs(guestExpirationTs)
                .isRestricted(isRestricted)
                .isUltraRestricted(isUltraRestricted)
                .realName(realName)
                .resend(resend)
                .execute();
        // TODO: test validations
    }

    /**
     * List users on a workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkspaceUsersTest() throws ApiException {
        String token = null;
        String teamId = null;
        String cursor = null;
        Integer limit = null;
        AdminusersListWorkspaceUsersResponse response = api.listWorkspaceUsers(token, teamId)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a user from a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromWorkspaceTest() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        AdminusersRemoveUserFromWorkspaceResponse response = api.removeUserFromWorkspace(token, teamId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set an existing guest, regular user, or owner to be an admin user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setAdminUserTest() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        AdminusersSetAdminUserResponse response = api.setAdminUser(token, teamId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set an expiration for a guest user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setExpirationGuestTest() throws ApiException {
        String token = null;
        Integer expirationTs = null;
        String teamId = null;
        String userId = null;
        AdminusersSetExpirationGuestResponse response = api.setExpirationGuest(token, expirationTs, teamId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set an existing guest user, admin user, or owner to be a regular user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setRegularUserTest() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        AdminusersSetRegularUserResponse response = api.setRegularUser(token, teamId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setWorkspaceOwnerTest() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        AdminusersSetWorkspaceOwnerResponse response = api.setWorkspaceOwner(token, teamId, userId)
                .execute();
        // TODO: test validations
    }

}
