/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AdminappsApproveAppInstallationRequest;
import com.konfigthis.client.model.AdminappsApproveAppInstallationResponse;
import com.konfigthis.client.model.AdminappsApproveAppInstallationdefaultResponse;
import com.konfigthis.client.model.AdminappsRestrictAppRequest;
import com.konfigthis.client.model.AdminappsRestrictAppResponse;
import com.konfigthis.client.model.AdminappsRestrictAppdefaultResponse;
import com.konfigthis.client.model.AdminappsapprovedListResponse;
import com.konfigthis.client.model.AdminappsapprovedListdefaultResponse;
import com.konfigthis.client.model.AdminappsrequestsListResponse;
import com.konfigthis.client.model.AdminappsrequestsListdefaultResponse;
import com.konfigthis.client.model.AdminappsrestrictedGetListResponse;
import com.konfigthis.client.model.AdminappsrestrictedGetListdefaultResponse;
import com.konfigthis.client.model.AdminconversationsArchiveChannelRequest;
import com.konfigthis.client.model.AdminconversationsArchiveChannelResponse;
import com.konfigthis.client.model.AdminconversationsArchiveChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsConvertToPrivateChannelRequest;
import com.konfigthis.client.model.AdminconversationsConvertToPrivateChannelResponse;
import com.konfigthis.client.model.AdminconversationsConvertToPrivateChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsCreateChannelBasedConversationRequest;
import com.konfigthis.client.model.AdminconversationsCreateChannelBasedConversationResponse;
import com.konfigthis.client.model.AdminconversationsCreateChannelBasedConversationdefaultResponse;
import com.konfigthis.client.model.AdminconversationsDeleteChannelRequest;
import com.konfigthis.client.model.AdminconversationsDeleteChannelResponse;
import com.konfigthis.client.model.AdminconversationsDeleteChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsDisconnectSharedChannelRequest;
import com.konfigthis.client.model.AdminconversationsDisconnectSharedChannelResponse;
import com.konfigthis.client.model.AdminconversationsDisconnectSharedChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsGetConversationPrefsResponse;
import com.konfigthis.client.model.AdminconversationsGetConversationPrefsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsGetTeamsListResponse;
import com.konfigthis.client.model.AdminconversationsGetTeamsListdefaultResponse;
import com.konfigthis.client.model.AdminconversationsInviteUserToChannelRequest;
import com.konfigthis.client.model.AdminconversationsInviteUserToChannelResponse;
import com.konfigthis.client.model.AdminconversationsInviteUserToChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsRenameChannelRequest;
import com.konfigthis.client.model.AdminconversationsRenameChannelResponse;
import com.konfigthis.client.model.AdminconversationsRenameChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsSearchChannelsResponse;
import com.konfigthis.client.model.AdminconversationsSearchChannelsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsSetConversationPrefsRequest;
import com.konfigthis.client.model.AdminconversationsSetConversationPrefsResponse;
import com.konfigthis.client.model.AdminconversationsSetConversationPrefsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsSetTeamsWorkspaceConnectionRequest;
import com.konfigthis.client.model.AdminconversationsSetTeamsWorkspaceConnectionResponse;
import com.konfigthis.client.model.AdminconversationsSetTeamsWorkspaceConnectiondefaultResponse;
import com.konfigthis.client.model.AdminconversationsUnarchiveChannelRequest;
import com.konfigthis.client.model.AdminconversationsUnarchiveChannelResponse;
import com.konfigthis.client.model.AdminconversationsUnarchiveChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsekmListOriginalConnectedChannelInfoResponse;
import com.konfigthis.client.model.AdminconversationsekmListOriginalConnectedChannelInfodefaultResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessAddGroupIdpGroupsRequest;
import com.konfigthis.client.model.AdminconversationsrestrictAccessAddGroupIdpGroupsResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessAddGroupIdpGroupsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessListGroupsResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessListGroupsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessRemoveIdpGroupRequest;
import com.konfigthis.client.model.AdminconversationsrestrictAccessRemoveIdpGroupResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessRemoveIdpGroupdefaultResponse;
import com.konfigthis.client.model.AdminemojiAddEmojiRequest;
import com.konfigthis.client.model.AdminemojiAddEmojiResponse;
import com.konfigthis.client.model.AdminemojiAddEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiAliasAddRequest;
import com.konfigthis.client.model.AdminemojiAliasAddResponse;
import com.konfigthis.client.model.AdminemojiAliasAdddefaultResponse;
import com.konfigthis.client.model.AdminemojiListEnterpriseEmojiResponse;
import com.konfigthis.client.model.AdminemojiListEnterpriseEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojiRequest;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojiResponse;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiRenameEmojiRequest;
import com.konfigthis.client.model.AdminemojiRenameEmojiResponse;
import com.konfigthis.client.model.AdminemojiRenameEmojidefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsApproveRequestRequest;
import com.konfigthis.client.model.AdmininviteRequestsApproveRequestResponse;
import com.konfigthis.client.model.AdmininviteRequestsApproveRequestdefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsDenyRequestResponse;
import com.konfigthis.client.model.AdmininviteRequestsDenyRequestdefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse;
import com.konfigthis.client.model.AdmininviteRequestsListPendingWorkspaceInviteRequestsdefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsapprovedListResponse;
import com.konfigthis.client.model.AdmininviteRequestsapprovedListdefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsdeniedListResponse;
import com.konfigthis.client.model.AdmininviteRequestsdeniedListdefaultResponse;
import com.konfigthis.client.model.AdminteamsCreateEnterpriseTeamRequest;
import com.konfigthis.client.model.AdminteamsCreateEnterpriseTeamResponse;
import com.konfigthis.client.model.AdminteamsCreateEnterpriseTeamdefaultResponse;
import com.konfigthis.client.model.AdminteamsListAllResponse;
import com.konfigthis.client.model.AdminteamsListAlldefaultResponse;
import com.konfigthis.client.model.AdminteamsadminsGetAllResponse;
import com.konfigthis.client.model.AdminteamsadminsGetAlldefaultResponse;
import com.konfigthis.client.model.AdminteamsownersListOwnersResponse;
import com.konfigthis.client.model.AdminteamsownersListOwnersdefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsGetInfoResponse;
import com.konfigthis.client.model.AdminteamssettingsGetInfodefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDefaultChannelsRequest;
import com.konfigthis.client.model.AdminteamssettingsSetDefaultChannelsResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDefaultChannelsdefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDescriptionRequest;
import com.konfigthis.client.model.AdminteamssettingsSetDescriptionResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDescriptiondefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest;
import com.konfigthis.client.model.AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDiscoverabilityOfWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetIconRequest;
import com.konfigthis.client.model.AdminteamssettingsSetIconResponse;
import com.konfigthis.client.model.AdminteamssettingsSetIcondefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetNameRequest;
import com.konfigthis.client.model.AdminteamssettingsSetNameResponse;
import com.konfigthis.client.model.AdminteamssettingsSetNamedefaultResponse;
import com.konfigthis.client.model.AdminusergroupsAddDefaultChannelsRequest;
import com.konfigthis.client.model.AdminusergroupsAddDefaultChannelsResponse;
import com.konfigthis.client.model.AdminusergroupsAddDefaultChannelsdefaultResponse;
import com.konfigthis.client.model.AdminusergroupsAssociateDefaultWorkspacesRequest;
import com.konfigthis.client.model.AdminusergroupsAssociateDefaultWorkspacesResponse;
import com.konfigthis.client.model.AdminusergroupsAssociateDefaultWorkspacesdefaultResponse;
import com.konfigthis.client.model.AdminusergroupsListChannelsGetResponse;
import com.konfigthis.client.model.AdminusergroupsListChannelsGetdefaultResponse;
import com.konfigthis.client.model.AdminusergroupsRemoveChannelsRequest;
import com.konfigthis.client.model.AdminusergroupsRemoveChannelsResponse;
import com.konfigthis.client.model.AdminusergroupsRemoveChannelsdefaultResponse;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserRequest;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserResponse;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserdefaultResponse;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspaceRequest;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspaceResponse;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminusersListWorkspaceUsersResponse;
import com.konfigthis.client.model.AdminusersListWorkspaceUsersdefaultResponse;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspaceRequest;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspaceResponse;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminusersSetAdminUserRequest;
import com.konfigthis.client.model.AdminusersSetAdminUserResponse;
import com.konfigthis.client.model.AdminusersSetAdminUserdefaultResponse;
import com.konfigthis.client.model.AdminusersSetExpirationGuestRequest;
import com.konfigthis.client.model.AdminusersSetExpirationGuestResponse;
import com.konfigthis.client.model.AdminusersSetExpirationGuestdefaultResponse;
import com.konfigthis.client.model.AdminusersSetRegularUserRequest;
import com.konfigthis.client.model.AdminusersSetRegularUserResponse;
import com.konfigthis.client.model.AdminusersSetRegularUserdefaultResponse;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerRequest;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerResponse;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerdefaultResponse;
import com.konfigthis.client.model.AdminuserssessionInvalidateSessionRequest;
import com.konfigthis.client.model.AdminuserssessionInvalidateSessionResponse;
import com.konfigthis.client.model.AdminuserssessionInvalidateSessiondefaultResponse;
import com.konfigthis.client.model.AdminuserssessionResetSessionsRequest;
import com.konfigthis.client.model.AdminuserssessionResetSessionsResponse;
import com.konfigthis.client.model.AdminuserssessionResetSessionsdefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminApi
 */
@Disabled
public class AdminApiTest {

    private static AdminApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AdminApi(apiClient);
    }

    /**
     * Add one or more default channels to an IDP group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDefaultChannelsTest() throws ApiException {
        String token = null;
        String channelIds = null;
        String usergroupId = null;
        String teamId = null;
        AdminusergroupsAddDefaultChannelsResponse response = api.addDefaultChannels(token, channelIds, usergroupId)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add an emoji.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addEmojiTest() throws ApiException {
        String name = null;
        String token = null;
        String url = null;
        AdminemojiAddEmojiResponse response = api.addEmoji(name, token, url)
                .execute();
        // TODO: test validations
    }

    /**
     * Add an allowlist of IDP groups for accessing a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGroupIdpGroupsTest() throws ApiException {
        String channelId = null;
        String groupId = null;
        String token = null;
        String teamId = null;
        AdminconversationsrestrictAccessAddGroupIdpGroupsResponse response = api.addGroupIdpGroups(channelId, groupId, token)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add an Enterprise user to a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addWorkspaceUserTest() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        String channelIds = null;
        Boolean isRestricted = null;
        Boolean isUltraRestricted = null;
        AdminusersAddWorkspaceUserResponse response = api.addWorkspaceUser(token, teamId, userId)
                .channelIds(channelIds)
                .isRestricted(isRestricted)
                .isUltraRestricted(isUltraRestricted)
                .execute();
        // TODO: test validations
    }

    /**
     * Add an emoji alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aliasAddTest() throws ApiException {
        String aliasFor = null;
        String name = null;
        String token = null;
        AdminemojiAliasAddResponse response = api.aliasAdd(aliasFor, name, token)
                .execute();
        // TODO: test validations
    }

    /**
     * Approve an app for installation on a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveAppInstallationTest() throws ApiException {
        String token = null;
        String appId = null;
        String requestId = null;
        String teamId = null;
        AdminappsApproveAppInstallationResponse response = api.approveAppInstallation(token)
                .appId(appId)
                .requestId(requestId)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Approve a workspace invite request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void approveRequestTest() throws ApiException {
        String inviteRequestId = null;
        String token = null;
        String teamId = null;
        AdmininviteRequestsApproveRequestResponse response = api.approveRequest(inviteRequestId, token)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Archive a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveChannelTest() throws ApiException {
        String token = null;
        String channelId = null;
        AdminconversationsArchiveChannelResponse response = api.archiveChannel(token, channelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Associate one or more default workspaces with an organization-wide IDP group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateDefaultWorkspacesTest() throws ApiException {
        String token = null;
        String teamIds = null;
        String usergroupId = null;
        Boolean autoProvision = null;
        AdminusergroupsAssociateDefaultWorkspacesResponse response = api.associateDefaultWorkspaces(token, teamIds, usergroupId)
                .autoProvision(autoProvision)
                .execute();
        // TODO: test validations
    }

    /**
     * Convert a public channel to a private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void convertToPrivateChannelTest() throws ApiException {
        String token = null;
        String channelId = null;
        AdminconversationsConvertToPrivateChannelResponse response = api.convertToPrivateChannel(token, channelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a public or private channel-based conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelBasedConversationTest() throws ApiException {
        String token = null;
        Boolean isPrivate = null;
        String name = null;
        String description = null;
        Boolean orgWide = null;
        String teamId = null;
        AdminconversationsCreateChannelBasedConversationResponse response = api.createChannelBasedConversation(token, isPrivate, name)
                .description(description)
                .orgWide(orgWide)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an Enterprise team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEnterpriseTeamTest() throws ApiException {
        String token = null;
        String teamDomain = null;
        String teamName = null;
        String teamDescription = null;
        String teamDiscoverability = null;
        AdminteamsCreateEnterpriseTeamResponse response = api.createEnterpriseTeam(token, teamDomain, teamName)
                .teamDescription(teamDescription)
                .teamDiscoverability(teamDiscoverability)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelTest() throws ApiException {
        String token = null;
        String channelId = null;
        AdminconversationsDeleteChannelResponse response = api.deleteChannel(token, channelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deny a workspace invite request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void denyRequestTest() throws ApiException {
        String inviteRequestId = null;
        String token = null;
        String teamId = null;
        AdmininviteRequestsDenyRequestResponse response = api.denyRequest(inviteRequestId, token)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Disconnect a connected channel from one or more workspaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disconnectSharedChannelTest() throws ApiException {
        String token = null;
        String channelId = null;
        String leavingTeamIds = null;
        AdminconversationsDisconnectSharedChannelResponse response = api.disconnectSharedChannel(token, channelId)
                .leavingTeamIds(leavingTeamIds)
                .execute();
        // TODO: test validations
    }

    /**
     * List all of the admins on a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTest() throws ApiException {
        String token = null;
        String teamId = null;
        Integer limit = null;
        String cursor = null;
        AdminteamsadminsGetAllResponse response = api.getAll(token, teamId)
                .limit(limit)
                .cursor(cursor)
                .execute();
        // TODO: test validations
    }

    /**
     * Get conversation preferences for a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConversationPrefsTest() throws ApiException {
        String token = null;
        String channelId = null;
        AdminconversationsGetConversationPrefsResponse response = api.getConversationPrefs(token, channelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetch information about settings in a workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfoTest() throws ApiException {
        String token = null;
        String teamId = null;
        AdminteamssettingsGetInfoResponse response = api.getInfo(token, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * List restricted apps for an org or workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListTest() throws ApiException {
        String token = null;
        Integer limit = null;
        String cursor = null;
        String teamId = null;
        String enterpriseId = null;
        AdminappsrestrictedGetListResponse response = api.getList(token)
                .limit(limit)
                .cursor(cursor)
                .teamId(teamId)
                .enterpriseId(enterpriseId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTeamsListTest() throws ApiException {
        String token = null;
        String channelId = null;
        String cursor = null;
        Integer limit = null;
        AdminconversationsGetTeamsListResponse response = api.getTeamsList(token, channelId)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Invalidate a single session for a user by session_id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invalidateSessionTest() throws ApiException {
        String token = null;
        Integer sessionId = null;
        String teamId = null;
        AdminuserssessionInvalidateSessionResponse response = api.invalidateSession(token, sessionId, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Invite a user to a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteUserToChannelTest() throws ApiException {
        String token = null;
        String channelId = null;
        String userIds = null;
        AdminconversationsInviteUserToChannelResponse response = api.inviteUserToChannel(token, channelId, userIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Invite a user to a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteUserToWorkspaceTest() throws ApiException {
        String token = null;
        String channelIds = null;
        String email = null;
        String teamId = null;
        String customMessage = null;
        String guestExpirationTs = null;
        Boolean isRestricted = null;
        Boolean isUltraRestricted = null;
        String realName = null;
        Boolean resend = null;
        AdminusersInviteUserToWorkspaceResponse response = api.inviteUserToWorkspace(token, channelIds, email, teamId)
                .customMessage(customMessage)
                .guestExpirationTs(guestExpirationTs)
                .isRestricted(isRestricted)
                .isUltraRestricted(isUltraRestricted)
                .realName(realName)
                .resend(resend)
                .execute();
        // TODO: test validations
    }

    /**
     * List approved apps for an org or workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String token = null;
        Integer limit = null;
        String cursor = null;
        String teamId = null;
        String enterpriseId = null;
        AdminappsapprovedListResponse response = api.list(token)
                .limit(limit)
                .cursor(cursor)
                .teamId(teamId)
                .enterpriseId(enterpriseId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all teams on an Enterprise organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        String token = null;
        Integer limit = null;
        String cursor = null;
        AdminteamsListAllResponse response = api.listAll(token)
                .limit(limit)
                .cursor(cursor)
                .execute();
        // TODO: test validations
    }

    /**
     * List the channels linked to an org-level IDP group (user group).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelsGetTest() throws ApiException {
        String token = null;
        String usergroupId = null;
        String teamId = null;
        Boolean includeNumMembers = null;
        AdminusergroupsListChannelsGetResponse response = api.listChannelsGet(token, usergroupId)
                .teamId(teamId)
                .includeNumMembers(includeNumMembers)
                .execute();
        // TODO: test validations
    }

    /**
     * List emoji for an Enterprise Grid organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEnterpriseEmojiTest() throws ApiException {
        String token = null;
        String cursor = null;
        Integer limit = null;
        AdminemojiListEnterpriseEmojiResponse response = api.listEnterpriseEmoji(token)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List all IDP Groups linked to a channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupsTest() throws ApiException {
        String token = null;
        String channelId = null;
        String teamId = null;
        AdminconversationsrestrictAccessListGroupsResponse response = api.listGroups(token, channelId)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOriginalConnectedChannelInfoTest() throws ApiException {
        String token = null;
        String channelIds = null;
        String teamIds = null;
        Integer limit = null;
        String cursor = null;
        AdminconversationsekmListOriginalConnectedChannelInfoResponse response = api.listOriginalConnectedChannelInfo(token)
                .channelIds(channelIds)
                .teamIds(teamIds)
                .limit(limit)
                .cursor(cursor)
                .execute();
        // TODO: test validations
    }

    /**
     * List all of the owners on a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOwnersTest() throws ApiException {
        String token = null;
        String teamId = null;
        Integer limit = null;
        String cursor = null;
        AdminteamsownersListOwnersResponse response = api.listOwners(token, teamId)
                .limit(limit)
                .cursor(cursor)
                .execute();
        // TODO: test validations
    }

    /**
     * List all pending workspace invite requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPendingWorkspaceInviteRequestsTest() throws ApiException {
        String token = null;
        String teamId = null;
        String cursor = null;
        Integer limit = null;
        AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse response = api.listPendingWorkspaceInviteRequests(token)
                .teamId(teamId)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List users on a workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWorkspaceUsersTest() throws ApiException {
        String token = null;
        String teamId = null;
        String cursor = null;
        Integer limit = null;
        AdminusersListWorkspaceUsersResponse response = api.listWorkspaceUsers(token, teamId)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List app requests for a team/workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void list_0Test() throws ApiException {
        String token = null;
        Integer limit = null;
        String cursor = null;
        String teamId = null;
        AdminappsrequestsListResponse response = api.list_0(token)
                .limit(limit)
                .cursor(cursor)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all approved workspace invite requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void list_1Test() throws ApiException {
        String token = null;
        String teamId = null;
        String cursor = null;
        Integer limit = null;
        AdmininviteRequestsapprovedListResponse response = api.list_1(token)
                .teamId(teamId)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List all denied workspace invite requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void list_2Test() throws ApiException {
        String token = null;
        String teamId = null;
        String cursor = null;
        Integer limit = null;
        AdmininviteRequestsdeniedListResponse response = api.list_2(token)
                .teamId(teamId)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove one or more default channels from an org-level IDP group (user group).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeChannelsTest() throws ApiException {
        String token = null;
        String channelIds = null;
        String usergroupId = null;
        AdminusergroupsRemoveChannelsResponse response = api.removeChannels(token, channelIds, usergroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove an emoji across an Enterprise Grid organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEnterpriseEmojiTest() throws ApiException {
        String name = null;
        String token = null;
        AdminemojiRemoveEnterpriseEmojiResponse response = api.removeEnterpriseEmoji(name, token)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a linked IDP group linked from a private channel
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeIdpGroupTest() throws ApiException {
        String channelId = null;
        String groupId = null;
        String teamId = null;
        String token = null;
        AdminconversationsrestrictAccessRemoveIdpGroupResponse response = api.removeIdpGroup(channelId, groupId, teamId, token)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a user from a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromWorkspaceTest() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        AdminusersRemoveUserFromWorkspaceResponse response = api.removeUserFromWorkspace(token, teamId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Rename a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameChannelTest() throws ApiException {
        String token = null;
        String channelId = null;
        String name = null;
        AdminconversationsRenameChannelResponse response = api.renameChannel(token, channelId, name)
                .execute();
        // TODO: test validations
    }

    /**
     * Rename an emoji.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameEmojiTest() throws ApiException {
        String name = null;
        String newName = null;
        String token = null;
        AdminemojiRenameEmojiResponse response = api.renameEmoji(name, newName, token)
                .execute();
        // TODO: test validations
    }

    /**
     * Wipes all valid sessions on all devices for a given user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetSessionsTest() throws ApiException {
        String token = null;
        String userId = null;
        Boolean mobileOnly = null;
        Boolean webOnly = null;
        AdminuserssessionResetSessionsResponse response = api.resetSessions(token, userId)
                .mobileOnly(mobileOnly)
                .webOnly(webOnly)
                .execute();
        // TODO: test validations
    }

    /**
     * Restrict an app for installation on a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restrictAppTest() throws ApiException {
        String token = null;
        String appId = null;
        String requestId = null;
        String teamId = null;
        AdminappsRestrictAppResponse response = api.restrictApp(token)
                .appId(appId)
                .requestId(requestId)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for public or private channels in an Enterprise organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchChannelsTest() throws ApiException {
        String token = null;
        String teamIds = null;
        String query = null;
        Integer limit = null;
        String cursor = null;
        String searchChannelTypes = null;
        String sort = null;
        String sortDir = null;
        AdminconversationsSearchChannelsResponse response = api.searchChannels(token)
                .teamIds(teamIds)
                .query(query)
                .limit(limit)
                .cursor(cursor)
                .searchChannelTypes(searchChannelTypes)
                .sort(sort)
                .sortDir(sortDir)
                .execute();
        // TODO: test validations
    }

    /**
     * Set an existing guest, regular user, or owner to be an admin user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setAdminUserTest() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        AdminusersSetAdminUserResponse response = api.setAdminUser(token, teamId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set the posting permissions for a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setConversationPrefsTest() throws ApiException {
        String token = null;
        String channelId = null;
        String prefs = null;
        AdminconversationsSetConversationPrefsResponse response = api.setConversationPrefs(token, channelId, prefs)
                .execute();
        // TODO: test validations
    }

    /**
     * Set the default channels of a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDefaultChannelsTest() throws ApiException {
        String channelIds = null;
        String teamId = null;
        String token = null;
        AdminteamssettingsSetDefaultChannelsResponse response = api.setDefaultChannels(channelIds, teamId, token)
                .execute();
        // TODO: test validations
    }

    /**
     * Set the description of a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDescriptionTest() throws ApiException {
        String token = null;
        String description = null;
        String teamId = null;
        AdminteamssettingsSetDescriptionResponse response = api.setDescription(token, description, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * An API method that allows admins to set the discoverability of a given workspace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setDiscoverabilityOfWorkspaceTest() throws ApiException {
        String token = null;
        String discoverability = null;
        String teamId = null;
        AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse response = api.setDiscoverabilityOfWorkspace(token, discoverability, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set an expiration for a guest user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setExpirationGuestTest() throws ApiException {
        String token = null;
        Integer expirationTs = null;
        String teamId = null;
        String userId = null;
        AdminusersSetExpirationGuestResponse response = api.setExpirationGuest(token, expirationTs, teamId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Sets the icon of a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setIconTest() throws ApiException {
        String imageUrl = null;
        String teamId = null;
        String token = null;
        AdminteamssettingsSetIconResponse response = api.setIcon(imageUrl, teamId, token)
                .execute();
        // TODO: test validations
    }

    /**
     * Set the name of a given workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setNameTest() throws ApiException {
        String token = null;
        String name = null;
        String teamId = null;
        AdminteamssettingsSetNameResponse response = api.setName(token, name, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set an existing guest user, admin user, or owner to be a regular user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setRegularUserTest() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        AdminusersSetRegularUserResponse response = api.setRegularUser(token, teamId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setTeamsWorkspaceConnectionTest() throws ApiException {
        String token = null;
        String channelId = null;
        Boolean orgChannel = null;
        String targetTeamIds = null;
        String teamId = null;
        AdminconversationsSetTeamsWorkspaceConnectionResponse response = api.setTeamsWorkspaceConnection(token, channelId)
                .orgChannel(orgChannel)
                .targetTeamIds(targetTeamIds)
                .teamId(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setWorkspaceOwnerTest() throws ApiException {
        String token = null;
        String teamId = null;
        String userId = null;
        AdminusersSetWorkspaceOwnerResponse response = api.setWorkspaceOwner(token, teamId, userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Unarchive a public or private channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unarchiveChannelTest() throws ApiException {
        String token = null;
        String channelId = null;
        AdminconversationsUnarchiveChannelResponse response = api.unarchiveChannel(token, channelId)
                .execute();
        // TODO: test validations
    }

}
