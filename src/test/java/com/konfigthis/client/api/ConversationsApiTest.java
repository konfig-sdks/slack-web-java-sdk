/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ConversationsArchiveRequest;
import com.konfigthis.client.model.ConversationsArchiveResponse;
import com.konfigthis.client.model.ConversationsArchivedefaultResponse;
import com.konfigthis.client.model.ConversationsCloseRequest;
import com.konfigthis.client.model.ConversationsCloseResponse;
import com.konfigthis.client.model.ConversationsClosedefaultResponse;
import com.konfigthis.client.model.ConversationsCreateRequest;
import com.konfigthis.client.model.ConversationsCreateResponse;
import com.konfigthis.client.model.ConversationsCreatedefaultResponse;
import com.konfigthis.client.model.ConversationsHistoryResponse;
import com.konfigthis.client.model.ConversationsHistorydefaultResponse;
import com.konfigthis.client.model.ConversationsInfoResponse;
import com.konfigthis.client.model.ConversationsInfodefaultResponse;
import com.konfigthis.client.model.ConversationsInviteRequest;
import com.konfigthis.client.model.ConversationsInviteResponse;
import com.konfigthis.client.model.ConversationsInvitedefaultResponse;
import com.konfigthis.client.model.ConversationsJoinRequest;
import com.konfigthis.client.model.ConversationsJoinResponse;
import com.konfigthis.client.model.ConversationsJoindefaultResponse;
import com.konfigthis.client.model.ConversationsKickRequest;
import com.konfigthis.client.model.ConversationsKickResponse;
import com.konfigthis.client.model.ConversationsKickdefaultResponse;
import com.konfigthis.client.model.ConversationsLeaveRequest;
import com.konfigthis.client.model.ConversationsLeaveResponse;
import com.konfigthis.client.model.ConversationsLeavedefaultResponse;
import com.konfigthis.client.model.ConversationsListResponse;
import com.konfigthis.client.model.ConversationsListdefaultResponse;
import com.konfigthis.client.model.ConversationsMarkRequest;
import com.konfigthis.client.model.ConversationsMarkResponse;
import com.konfigthis.client.model.ConversationsMarkdefaultResponse;
import com.konfigthis.client.model.ConversationsMembersResponse;
import com.konfigthis.client.model.ConversationsMembersdefaultResponse;
import com.konfigthis.client.model.ConversationsOpenRequest;
import com.konfigthis.client.model.ConversationsOpenResponse;
import com.konfigthis.client.model.ConversationsOpendefaultResponse;
import com.konfigthis.client.model.ConversationsRenameRequest;
import com.konfigthis.client.model.ConversationsRenameResponse;
import com.konfigthis.client.model.ConversationsRenamedefaultResponse;
import com.konfigthis.client.model.ConversationsRepliesResponse;
import com.konfigthis.client.model.ConversationsRepliesdefaultResponse;
import com.konfigthis.client.model.ConversationsSetPurposeRequest;
import com.konfigthis.client.model.ConversationsSetPurposeResponse;
import com.konfigthis.client.model.ConversationsSetPurposedefaultResponse;
import com.konfigthis.client.model.ConversationsSetTopicRequest;
import com.konfigthis.client.model.ConversationsSetTopicResponse;
import com.konfigthis.client.model.ConversationsSetTopicdefaultResponse;
import com.konfigthis.client.model.ConversationsUnarchiveRequest;
import com.konfigthis.client.model.ConversationsUnarchiveResponse;
import com.konfigthis.client.model.ConversationsUnarchivedefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationsApi
 */
@Disabled
public class ConversationsApiTest {

    private static ConversationsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ConversationsApi(apiClient);
    }

    /**
     * Archives a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveTest() throws ApiException {
        String token = null;
        String channel = null;
        ConversationsArchiveResponse response = api.archive()
                .token(token)
                .channel(channel)
                .execute();
        // TODO: test validations
    }

    /**
     * Closes a direct message or multi-person direct message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeTest() throws ApiException {
        String token = null;
        String channel = null;
        ConversationsCloseResponse response = api.close()
                .token(token)
                .channel(channel)
                .execute();
        // TODO: test validations
    }

    /**
     * Initiates a public or private channel-based conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String token = null;
        Boolean isPrivate = null;
        String name = null;
        ConversationsCreateResponse response = api.create()
                .token(token)
                .isPrivate(isPrivate)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetches a conversation&#39;s history of messages and events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void historyTest() throws ApiException {
        String token = null;
        String channel = null;
        Double latest = null;
        Double oldest = null;
        Boolean inclusive = null;
        Integer limit = null;
        String cursor = null;
        ConversationsHistoryResponse response = api.history()
                .token(token)
                .channel(channel)
                .latest(latest)
                .oldest(oldest)
                .inclusive(inclusive)
                .limit(limit)
                .cursor(cursor)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve information about a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoTest() throws ApiException {
        String token = null;
        String channel = null;
        Boolean includeLocale = null;
        Boolean includeNumMembers = null;
        ConversationsInfoResponse response = api.info()
                .token(token)
                .channel(channel)
                .includeLocale(includeLocale)
                .includeNumMembers(includeNumMembers)
                .execute();
        // TODO: test validations
    }

    /**
     * Invites users to a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteTest() throws ApiException {
        String token = null;
        String channel = null;
        String users = null;
        ConversationsInviteResponse response = api.invite()
                .token(token)
                .channel(channel)
                .users(users)
                .execute();
        // TODO: test validations
    }

    /**
     * Joins an existing conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void joinTest() throws ApiException {
        String token = null;
        String channel = null;
        ConversationsJoinResponse response = api.join()
                .token(token)
                .channel(channel)
                .execute();
        // TODO: test validations
    }

    /**
     * Removes a user from a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void kickTest() throws ApiException {
        String token = null;
        String channel = null;
        String user = null;
        ConversationsKickResponse response = api.kick()
                .token(token)
                .channel(channel)
                .user(user)
                .execute();
        // TODO: test validations
    }

    /**
     * Leaves a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leaveTest() throws ApiException {
        String token = null;
        String channel = null;
        ConversationsLeaveResponse response = api.leave()
                .token(token)
                .channel(channel)
                .execute();
        // TODO: test validations
    }

    /**
     * Lists all channels in a Slack team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String token = null;
        Boolean excludeArchived = null;
        String types = null;
        Integer limit = null;
        String cursor = null;
        ConversationsListResponse response = api.list()
                .token(token)
                .excludeArchived(excludeArchived)
                .types(types)
                .limit(limit)
                .cursor(cursor)
                .execute();
        // TODO: test validations
    }

    /**
     * Sets the read cursor in a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markTest() throws ApiException {
        String token = null;
        String channel = null;
        Double ts = null;
        ConversationsMarkResponse response = api.mark()
                .token(token)
                .channel(channel)
                .ts(ts)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve members of a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void membersTest() throws ApiException {
        String token = null;
        String channel = null;
        Integer limit = null;
        String cursor = null;
        ConversationsMembersResponse response = api.members()
                .token(token)
                .channel(channel)
                .limit(limit)
                .cursor(cursor)
                .execute();
        // TODO: test validations
    }

    /**
     * Opens or resumes a direct message or multi-person direct message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openTest() throws ApiException {
        String token = null;
        String channel = null;
        Boolean returnIm = null;
        String users = null;
        ConversationsOpenResponse response = api.open()
                .token(token)
                .channel(channel)
                .returnIm(returnIm)
                .users(users)
                .execute();
        // TODO: test validations
    }

    /**
     * Renames a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameTest() throws ApiException {
        String token = null;
        String channel = null;
        String name = null;
        ConversationsRenameResponse response = api.rename()
                .token(token)
                .channel(channel)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a thread of messages posted to a conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repliesTest() throws ApiException {
        String token = null;
        String channel = null;
        Double ts = null;
        Double latest = null;
        Double oldest = null;
        Boolean inclusive = null;
        Integer limit = null;
        String cursor = null;
        ConversationsRepliesResponse response = api.replies()
                .token(token)
                .channel(channel)
                .ts(ts)
                .latest(latest)
                .oldest(oldest)
                .inclusive(inclusive)
                .limit(limit)
                .cursor(cursor)
                .execute();
        // TODO: test validations
    }

    /**
     * Sets the purpose for a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPurposeTest() throws ApiException {
        String token = null;
        String channel = null;
        String purpose = null;
        ConversationsSetPurposeResponse response = api.setPurpose()
                .token(token)
                .channel(channel)
                .purpose(purpose)
                .execute();
        // TODO: test validations
    }

    /**
     * Sets the topic for a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setTopicTest() throws ApiException {
        String token = null;
        String channel = null;
        String topic = null;
        ConversationsSetTopicResponse response = api.setTopic()
                .token(token)
                .channel(channel)
                .topic(topic)
                .execute();
        // TODO: test validations
    }

    /**
     * Reverses conversation archival.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unarchiveTest() throws ApiException {
        String token = null;
        String channel = null;
        ConversationsUnarchiveResponse response = api.unarchive()
                .token(token)
                .channel(channel)
                .execute();
        // TODO: test validations
    }

}
