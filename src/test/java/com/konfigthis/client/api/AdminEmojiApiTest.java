/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AdminemojiAddEmojiRequest;
import com.konfigthis.client.model.AdminemojiAddEmojiResponse;
import com.konfigthis.client.model.AdminemojiAddEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiAliasAddRequest;
import com.konfigthis.client.model.AdminemojiAliasAddResponse;
import com.konfigthis.client.model.AdminemojiAliasAdddefaultResponse;
import com.konfigthis.client.model.AdminemojiListEnterpriseEmojiResponse;
import com.konfigthis.client.model.AdminemojiListEnterpriseEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojiRequest;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojiResponse;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiRenameEmojiRequest;
import com.konfigthis.client.model.AdminemojiRenameEmojiResponse;
import com.konfigthis.client.model.AdminemojiRenameEmojidefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AdminEmojiApi
 */
@Disabled
public class AdminEmojiApiTest {

    private static AdminEmojiApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AdminEmojiApi(apiClient);
    }

    /**
     * Add an emoji.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addEmojiTest() throws ApiException {
        String name = null;
        String token = null;
        String url = null;
        AdminemojiAddEmojiResponse response = api.addEmoji(name, token, url)
                .execute();
        // TODO: test validations
    }

    /**
     * Add an emoji alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aliasAddTest() throws ApiException {
        String aliasFor = null;
        String name = null;
        String token = null;
        AdminemojiAliasAddResponse response = api.aliasAdd(aliasFor, name, token)
                .execute();
        // TODO: test validations
    }

    /**
     * List emoji for an Enterprise Grid organization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEnterpriseEmojiTest() throws ApiException {
        String token = null;
        String cursor = null;
        Integer limit = null;
        AdminemojiListEnterpriseEmojiResponse response = api.listEnterpriseEmoji(token)
                .cursor(cursor)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove an emoji across an Enterprise Grid organization
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeEnterpriseEmojiTest() throws ApiException {
        String name = null;
        String token = null;
        AdminemojiRemoveEnterpriseEmojiResponse response = api.removeEnterpriseEmoji(name, token)
                .execute();
        // TODO: test validations
    }

    /**
     * Rename an emoji.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameEmojiTest() throws ApiException {
        String name = null;
        String newName = null;
        String token = null;
        AdminemojiRenameEmojiResponse response = api.renameEmoji(name, newName, token)
                .execute();
        // TODO: test validations
    }

}
