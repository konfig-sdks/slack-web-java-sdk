/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ChatDeleteRequest;
import com.konfigthis.client.model.ChatDeleteResponse;
import com.konfigthis.client.model.ChatDeleteScheduledMessageRequest;
import com.konfigthis.client.model.ChatDeleteScheduledMessageResponse;
import com.konfigthis.client.model.ChatDeleteScheduledMessagedefaultResponse;
import com.konfigthis.client.model.ChatDeletedefaultResponse;
import com.konfigthis.client.model.ChatGetPermalinkResponse;
import com.konfigthis.client.model.ChatGetPermalinkdefaultResponse;
import com.konfigthis.client.model.ChatMeMessageRequest;
import com.konfigthis.client.model.ChatMeMessageResponse;
import com.konfigthis.client.model.ChatMeMessagedefaultResponse;
import com.konfigthis.client.model.ChatPostEphemeralRequest;
import com.konfigthis.client.model.ChatPostEphemeralResponse;
import com.konfigthis.client.model.ChatPostEphemeraldefaultResponse;
import com.konfigthis.client.model.ChatPostMessageRequest;
import com.konfigthis.client.model.ChatPostMessageResponse;
import com.konfigthis.client.model.ChatPostMessagedefaultResponse;
import com.konfigthis.client.model.ChatScheduleMessageRequest;
import com.konfigthis.client.model.ChatScheduleMessageResponse;
import com.konfigthis.client.model.ChatScheduleMessagedefaultResponse;
import com.konfigthis.client.model.ChatUnfurlRequest;
import com.konfigthis.client.model.ChatUnfurlResponse;
import com.konfigthis.client.model.ChatUnfurldefaultResponse;
import com.konfigthis.client.model.ChatUpdateRequest;
import com.konfigthis.client.model.ChatUpdateResponse;
import com.konfigthis.client.model.ChatUpdatedefaultResponse;
import com.konfigthis.client.model.ChatscheduledMessagesListResponse;
import com.konfigthis.client.model.ChatscheduledMessagesListdefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChatApi
 */
@Disabled
public class ChatApiTest {

    private static ChatApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ChatApi(apiClient);
    }

    /**
     * Deletes a message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTest() throws ApiException {
        String token = null;
        Boolean asUser = null;
        String channel = null;
        Double ts = null;
        ChatDeleteResponse response = api.delete()
                .token(token)
                .asUser(asUser)
                .channel(channel)
                .ts(ts)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a pending scheduled message from the queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScheduledMessageTest() throws ApiException {
        String token = null;
        String channel = null;
        String scheduledMessageId = null;
        Boolean asUser = null;
        ChatDeleteScheduledMessageResponse response = api.deleteScheduledMessage(token, channel, scheduledMessageId)
                .asUser(asUser)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a permalink URL for a specific extant message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPermalinkTest() throws ApiException {
        String token = null;
        String channel = null;
        String messageTs = null;
        ChatGetPermalinkResponse response = api.getPermalink(token, channel, messageTs)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns a list of scheduled messages.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String token = null;
        String channel = null;
        Double latest = null;
        Double oldest = null;
        Integer limit = null;
        String cursor = null;
        ChatscheduledMessagesListResponse response = api.list()
                .token(token)
                .channel(channel)
                .latest(latest)
                .oldest(oldest)
                .limit(limit)
                .cursor(cursor)
                .execute();
        // TODO: test validations
    }

    /**
     * Share a me message into a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void meMessageTest() throws ApiException {
        String token = null;
        String channel = null;
        String text = null;
        ChatMeMessageResponse response = api.meMessage()
                .token(token)
                .channel(channel)
                .text(text)
                .execute();
        // TODO: test validations
    }

    /**
     * Sends an ephemeral message to a user in a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postEphemeralTest() throws ApiException {
        String token = null;
        String channel = null;
        String user = null;
        Boolean asUser = null;
        String attachments = null;
        String blocks = null;
        String iconEmoji = null;
        String iconUrl = null;
        Boolean linkNames = null;
        String parse = null;
        String text = null;
        String threadTs = null;
        String username = null;
        ChatPostEphemeralResponse response = api.postEphemeral(token, channel, user)
                .asUser(asUser)
                .attachments(attachments)
                .blocks(blocks)
                .iconEmoji(iconEmoji)
                .iconUrl(iconUrl)
                .linkNames(linkNames)
                .parse(parse)
                .text(text)
                .threadTs(threadTs)
                .username(username)
                .execute();
        // TODO: test validations
    }

    /**
     * Sends a message to a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMessageTest() throws ApiException {
        String token = null;
        String channel = null;
        String asUser = null;
        String attachments = null;
        String blocks = null;
        String iconEmoji = null;
        String iconUrl = null;
        Boolean linkNames = null;
        Boolean mrkdwn = null;
        String parse = null;
        Boolean replyBroadcast = null;
        String text = null;
        String threadTs = null;
        Boolean unfurlLinks = null;
        Boolean unfurlMedia = null;
        String username = null;
        ChatPostMessageResponse response = api.postMessage(token, channel)
                .asUser(asUser)
                .attachments(attachments)
                .blocks(blocks)
                .iconEmoji(iconEmoji)
                .iconUrl(iconUrl)
                .linkNames(linkNames)
                .mrkdwn(mrkdwn)
                .parse(parse)
                .replyBroadcast(replyBroadcast)
                .text(text)
                .threadTs(threadTs)
                .unfurlLinks(unfurlLinks)
                .unfurlMedia(unfurlMedia)
                .username(username)
                .execute();
        // TODO: test validations
    }

    /**
     * Schedules a message to be sent to a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scheduleMessageTest() throws ApiException {
        String token = null;
        Boolean asUser = null;
        String attachments = null;
        String blocks = null;
        String channel = null;
        Boolean linkNames = null;
        String parse = null;
        String postAt = null;
        Boolean replyBroadcast = null;
        String text = null;
        Double threadTs = null;
        Boolean unfurlLinks = null;
        Boolean unfurlMedia = null;
        ChatScheduleMessageResponse response = api.scheduleMessage()
                .token(token)
                .asUser(asUser)
                .attachments(attachments)
                .blocks(blocks)
                .channel(channel)
                .linkNames(linkNames)
                .parse(parse)
                .postAt(postAt)
                .replyBroadcast(replyBroadcast)
                .text(text)
                .threadTs(threadTs)
                .unfurlLinks(unfurlLinks)
                .unfurlMedia(unfurlMedia)
                .execute();
        // TODO: test validations
    }

    /**
     * Provide custom unfurl behavior for user-posted URLs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unfurlTest() throws ApiException {
        String token = null;
        String channel = null;
        String ts = null;
        String unfurls = null;
        String userAuthMessage = null;
        Boolean userAuthRequired = null;
        String userAuthUrl = null;
        ChatUnfurlResponse response = api.unfurl(token, channel, ts)
                .unfurls(unfurls)
                .userAuthMessage(userAuthMessage)
                .userAuthRequired(userAuthRequired)
                .userAuthUrl(userAuthUrl)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates a message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String token = null;
        String channel = null;
        String ts = null;
        String asUser = null;
        String attachments = null;
        String blocks = null;
        String linkNames = null;
        String parse = null;
        String text = null;
        ChatUpdateResponse response = api.update(token, channel, ts)
                .asUser(asUser)
                .attachments(attachments)
                .blocks(blocks)
                .linkNames(linkNames)
                .parse(parse)
                .text(text)
                .execute();
        // TODO: test validations
    }

}
