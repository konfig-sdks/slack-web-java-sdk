/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.FilesremoteAddFromRemoteRequest;
import com.konfigthis.client.model.FilesremoteAddFromRemoteResponse;
import com.konfigthis.client.model.FilesremoteAddFromRemotedefaultResponse;
import com.konfigthis.client.model.FilesremoteDeleteFileRequest;
import com.konfigthis.client.model.FilesremoteDeleteFileResponse;
import com.konfigthis.client.model.FilesremoteDeleteFiledefaultResponse;
import com.konfigthis.client.model.FilesremoteGetInfoResponse;
import com.konfigthis.client.model.FilesremoteGetInfodefaultResponse;
import com.konfigthis.client.model.FilesremoteListRemoteFilesResponse;
import com.konfigthis.client.model.FilesremoteListRemoteFilesdefaultResponse;
import com.konfigthis.client.model.FilesremoteShareRemoteFileResponse;
import com.konfigthis.client.model.FilesremoteShareRemoteFiledefaultResponse;
import com.konfigthis.client.model.FilesremoteUpdateRemoteFileRequest;
import com.konfigthis.client.model.FilesremoteUpdateRemoteFileResponse;
import com.konfigthis.client.model.FilesremoteUpdateRemoteFiledefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FilesRemoteApi
 */
@Disabled
public class FilesRemoteApiTest {

    private static FilesRemoteApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new FilesRemoteApi(apiClient);
    }

    /**
     * Adds a file from a remote service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFromRemoteTest() throws ApiException {
        String title = null;
        String externalId = null;
        String externalUrl = null;
        String filetype = null;
        String indexableFileContents = null;
        String previewImage = null;
        String token = null;
        FilesremoteAddFromRemoteResponse response = api.addFromRemote()
                .title(title)
                .externalId(externalId)
                .externalUrl(externalUrl)
                .filetype(filetype)
                .indexableFileContents(indexableFileContents)
                .previewImage(previewImage)
                .token(token)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove a remote file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException {
        String externalId = null;
        String _file = null;
        String token = null;
        FilesremoteDeleteFileResponse response = api.deleteFile()
                .externalId(externalId)
                ._file(_file)
                .token(token)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve information about a remote file added to Slack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfoTest() throws ApiException {
        String token = null;
        String _file = null;
        String externalId = null;
        FilesremoteGetInfoResponse response = api.getInfo()
                .token(token)
                ._file(_file)
                .externalId(externalId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve information about a remote file added to Slack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRemoteFilesTest() throws ApiException {
        String token = null;
        String channel = null;
        Double tsFrom = null;
        Double tsTo = null;
        Integer limit = null;
        String cursor = null;
        FilesremoteListRemoteFilesResponse response = api.listRemoteFiles()
                .token(token)
                .channel(channel)
                .tsFrom(tsFrom)
                .tsTo(tsTo)
                .limit(limit)
                .cursor(cursor)
                .execute();
        // TODO: test validations
    }

    /**
     * Share a remote file into a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareRemoteFileTest() throws ApiException {
        String token = null;
        String _file = null;
        String externalId = null;
        String channels = null;
        FilesremoteShareRemoteFileResponse response = api.shareRemoteFile()
                .token(token)
                ._file(_file)
                .externalId(externalId)
                .channels(channels)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates an existing remote file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRemoteFileTest() throws ApiException {
        String title = null;
        String externalId = null;
        String externalUrl = null;
        String _file = null;
        String filetype = null;
        String indexableFileContents = null;
        String previewImage = null;
        String token = null;
        FilesremoteUpdateRemoteFileResponse response = api.updateRemoteFile()
                .title(title)
                .externalId(externalId)
                .externalUrl(externalUrl)
                ._file(_file)
                .filetype(filetype)
                .indexableFileContents(indexableFileContents)
                .previewImage(previewImage)
                .token(token)
                .execute();
        // TODO: test validations
    }

}
