/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DndEndDndResponse;
import com.konfigthis.client.model.DndEndDnddefaultResponse;
import com.konfigthis.client.model.DndEndSnoozeResponse;
import com.konfigthis.client.model.DndEndSnoozedefaultResponse;
import com.konfigthis.client.model.DndInfoResponse;
import com.konfigthis.client.model.DndInfodefaultResponse;
import com.konfigthis.client.model.DndSetSnoozeRequest;
import com.konfigthis.client.model.DndSetSnoozeResponse;
import com.konfigthis.client.model.DndSetSnoozedefaultResponse;
import com.konfigthis.client.model.DndTeamInfoResponse;
import com.konfigthis.client.model.DndTeamInfodefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DndApi
 */
@Disabled
public class DndApiTest {

    private static DndApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DndApi(apiClient);
    }

    /**
     * Ends the current user&#39;s Do Not Disturb session immediately.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endDndTest() throws ApiException {
        String token = null;
        DndEndDndResponse response = api.endDnd(token)
                .execute();
        // TODO: test validations
    }

    /**
     * Ends the current user&#39;s snooze mode immediately.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void endSnoozeTest() throws ApiException {
        String token = null;
        DndEndSnoozeResponse response = api.endSnooze(token)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves a user&#39;s current Do Not Disturb status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoTest() throws ApiException {
        String token = null;
        String user = null;
        DndInfoResponse response = api.info()
                .token(token)
                .user(user)
                .execute();
        // TODO: test validations
    }

    /**
     * Turns on Do Not Disturb mode for the current user, or changes its duration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setSnoozeTest() throws ApiException {
        String numMinutes = null;
        String token = null;
        DndSetSnoozeResponse response = api.setSnooze(numMinutes, token)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieves the Do Not Disturb status for up to 50 users on a team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamInfoTest() throws ApiException {
        String token = null;
        String users = null;
        DndTeamInfoResponse response = api.teamInfo()
                .token(token)
                .users(users)
                .execute();
        // TODO: test validations
    }

}
