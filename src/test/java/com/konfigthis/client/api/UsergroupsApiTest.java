/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.UsergroupsCreateRequest;
import com.konfigthis.client.model.UsergroupsCreateResponse;
import com.konfigthis.client.model.UsergroupsCreatedefaultResponse;
import com.konfigthis.client.model.UsergroupsDisableRequest;
import com.konfigthis.client.model.UsergroupsDisableResponse;
import com.konfigthis.client.model.UsergroupsDisabledefaultResponse;
import com.konfigthis.client.model.UsergroupsEnableRequest;
import com.konfigthis.client.model.UsergroupsEnableResponse;
import com.konfigthis.client.model.UsergroupsEnabledefaultResponse;
import com.konfigthis.client.model.UsergroupsListResponse;
import com.konfigthis.client.model.UsergroupsListdefaultResponse;
import com.konfigthis.client.model.UsergroupsUpdateRequest;
import com.konfigthis.client.model.UsergroupsUpdateResponse;
import com.konfigthis.client.model.UsergroupsUpdatedefaultResponse;
import com.konfigthis.client.model.UsergroupsusersListAllUsersResponse;
import com.konfigthis.client.model.UsergroupsusersListAllUsersdefaultResponse;
import com.konfigthis.client.model.UsergroupsusersUpdateListRequest;
import com.konfigthis.client.model.UsergroupsusersUpdateListResponse;
import com.konfigthis.client.model.UsergroupsusersUpdateListdefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsergroupsApi
 */
@Disabled
public class UsergroupsApiTest {

    private static UsergroupsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new UsergroupsApi(apiClient);
    }

    /**
     * Create a User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTest() throws ApiException {
        String token = null;
        String name = null;
        String description = null;
        String channels = null;
        String handle = null;
        Boolean includeCount = null;
        UsergroupsCreateResponse response = api.create(token, name)
                .description(description)
                .channels(channels)
                .handle(handle)
                .includeCount(includeCount)
                .execute();
        // TODO: test validations
    }

    /**
     * Disable an existing User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableTest() throws ApiException {
        String token = null;
        String usergroup = null;
        Boolean includeCount = null;
        UsergroupsDisableResponse response = api.disable(token, usergroup)
                .includeCount(includeCount)
                .execute();
        // TODO: test validations
    }

    /**
     * Enable a User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableTest() throws ApiException {
        String token = null;
        String usergroup = null;
        Boolean includeCount = null;
        UsergroupsEnableResponse response = api.enable(token, usergroup)
                .includeCount(includeCount)
                .execute();
        // TODO: test validations
    }

    /**
     * List all User Groups for a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String token = null;
        Boolean includeUsers = null;
        Boolean includeCount = null;
        Boolean includeDisabled = null;
        UsergroupsListResponse response = api.list(token)
                .includeUsers(includeUsers)
                .includeCount(includeCount)
                .includeDisabled(includeDisabled)
                .execute();
        // TODO: test validations
    }

    /**
     * List all users in a User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllUsersTest() throws ApiException {
        String token = null;
        String usergroup = null;
        Boolean includeDisabled = null;
        UsergroupsusersListAllUsersResponse response = api.listAllUsers(token, usergroup)
                .includeDisabled(includeDisabled)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTest() throws ApiException {
        String token = null;
        String usergroup = null;
        String description = null;
        String channels = null;
        String handle = null;
        Boolean includeCount = null;
        String name = null;
        UsergroupsUpdateResponse response = api.update(token, usergroup)
                .description(description)
                .channels(channels)
                .handle(handle)
                .includeCount(includeCount)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Update the list of users for a User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateListTest() throws ApiException {
        String token = null;
        String usergroup = null;
        String users = null;
        Boolean includeCount = null;
        UsergroupsusersUpdateListResponse response = api.updateList(token, usergroup, users)
                .includeCount(includeCount)
                .execute();
        // TODO: test validations
    }

}
