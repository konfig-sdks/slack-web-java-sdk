/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.TeamAccessLogsResponse;
import com.konfigthis.client.model.TeamAccessLogsdefaultResponse;
import com.konfigthis.client.model.TeamBillableInfoResponse;
import com.konfigthis.client.model.TeamBillableInfodefaultResponse;
import com.konfigthis.client.model.TeamInfoResponse;
import com.konfigthis.client.model.TeamInfodefaultResponse;
import com.konfigthis.client.model.TeamIntegrationLogsResponse;
import com.konfigthis.client.model.TeamIntegrationLogsdefaultResponse;
import com.konfigthis.client.model.TeamprofileGetProfileResponse;
import com.konfigthis.client.model.TeamprofileGetProfiledefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamApi
 */
@Disabled
public class TeamApiTest {

    private static TeamApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TeamApi(apiClient);
    }

    /**
     * Gets the access logs for the current team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accessLogsTest() throws ApiException {
        String token = null;
        String before = null;
        String count = null;
        String page = null;
        TeamAccessLogsResponse response = api.accessLogs(token)
                .before(before)
                .count(count)
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets billable users information for the current team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void billableInfoTest() throws ApiException {
        String token = null;
        String user = null;
        TeamBillableInfoResponse response = api.billableInfo(token)
                .user(user)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a team&#39;s profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTest() throws ApiException {
        String token = null;
        String visibility = null;
        TeamprofileGetProfileResponse response = api.getProfile(token)
                .visibility(visibility)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets information about the current team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoTest() throws ApiException {
        String token = null;
        String team = null;
        TeamInfoResponse response = api.info(token)
                .team(team)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets the integration logs for the current team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void integrationLogsTest() throws ApiException {
        String token = null;
        String appId = null;
        String changeType = null;
        String count = null;
        String page = null;
        String serviceId = null;
        String user = null;
        TeamIntegrationLogsResponse response = api.integrationLogs(token)
                .appId(appId)
                .changeType(changeType)
                .count(count)
                .page(page)
                .serviceId(serviceId)
                .user(user)
                .execute();
        // TODO: test validations
    }

}
