/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminusergroupsAddDefaultChannelsRequest;
import com.konfigthis.client.model.AdminusergroupsAddDefaultChannelsResponse;
import com.konfigthis.client.model.AdminusergroupsAddDefaultChannelsdefaultResponse;
import com.konfigthis.client.model.AdminusergroupsAssociateDefaultWorkspacesRequest;
import com.konfigthis.client.model.AdminusergroupsAssociateDefaultWorkspacesResponse;
import com.konfigthis.client.model.AdminusergroupsAssociateDefaultWorkspacesdefaultResponse;
import com.konfigthis.client.model.AdminusergroupsListChannelsGetResponse;
import com.konfigthis.client.model.AdminusergroupsListChannelsGetdefaultResponse;
import com.konfigthis.client.model.AdminusergroupsRemoveChannelsRequest;
import com.konfigthis.client.model.AdminusergroupsRemoveChannelsResponse;
import com.konfigthis.client.model.AdminusergroupsRemoveChannelsdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminUsergroupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminUsergroupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminUsergroupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addDefaultChannelsCall(String token, String channelIds, String usergroupId, AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusergroupsAddDefaultChannelsRequest;

        // create path and map variables
        String localVarPath = "/admin.usergroups.addChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (usergroupId != null) {
            localVarFormParams.put("usergroup_id", usergroupId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDefaultChannelsValidateBeforeCall(String token, String channelIds, String usergroupId, AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addDefaultChannels(Async)");
        }

        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling addDefaultChannels(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling addDefaultChannels(Async)");
        }

        // verify the required parameter 'adminusergroupsAddDefaultChannelsRequest' is set
        if (adminusergroupsAddDefaultChannelsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusergroupsAddDefaultChannelsRequest' when calling addDefaultChannels(Async)");
        }

        return addDefaultChannelsCall(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId, _callback);

    }


    private ApiResponse<AdminusergroupsAddDefaultChannelsResponse> addDefaultChannelsWithHttpInfo(String token, String channelIds, String usergroupId, AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest, String teamId) throws ApiException {
        okhttp3.Call localVarCall = addDefaultChannelsValidateBeforeCall(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId, null);
        Type localVarReturnType = new TypeToken<AdminusergroupsAddDefaultChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDefaultChannelsAsync(String token, String channelIds, String usergroupId, AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest, String teamId, final ApiCallback<AdminusergroupsAddDefaultChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDefaultChannelsValidateBeforeCall(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminusergroupsAddDefaultChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddDefaultChannelsRequestBuilder {
        private final String token;
        private final String channelIds;
        private final String usergroupId;
        private String teamId;

        private AddDefaultChannelsRequestBuilder(String token, String channelIds, String usergroupId) {
            this.token = token;
            this.channelIds = channelIds;
            this.usergroupId = usergroupId;
        }

        /**
         * Set teamId
         * @param teamId The workspace to add default channels in. (optional)
         * @return AddDefaultChannelsRequestBuilder
         */
        public AddDefaultChannelsRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for addDefaultChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest = buildBodyParams();
            return addDefaultChannelsCall(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId, _callback);
        }

        private AdminusergroupsAddDefaultChannelsRequest buildBodyParams() {
            AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest = new AdminusergroupsAddDefaultChannelsRequest();
            adminusergroupsAddDefaultChannelsRequest.channelIds(this.channelIds);
            adminusergroupsAddDefaultChannelsRequest.teamId(this.teamId);
            adminusergroupsAddDefaultChannelsRequest.usergroupId(this.usergroupId);
            return adminusergroupsAddDefaultChannelsRequest;
        }

        /**
         * Execute addDefaultChannels request
         * @return AdminusergroupsAddDefaultChannelsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public AdminusergroupsAddDefaultChannelsResponse execute() throws ApiException {
            AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest = buildBodyParams();
            ApiResponse<AdminusergroupsAddDefaultChannelsResponse> localVarResp = addDefaultChannelsWithHttpInfo(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addDefaultChannels request with HTTP info returned
         * @return ApiResponse&lt;AdminusergroupsAddDefaultChannelsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusergroupsAddDefaultChannelsResponse> executeWithHttpInfo() throws ApiException {
            AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest = buildBodyParams();
            return addDefaultChannelsWithHttpInfo(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId);
        }

        /**
         * Execute addDefaultChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusergroupsAddDefaultChannelsResponse> _callback) throws ApiException {
            AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest = buildBodyParams();
            return addDefaultChannelsAsync(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId, _callback);
        }
    }

    /**
     * 
     * Add one or more default channels to an IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma separated string of channel IDs. (required)
     * @param usergroupId ID of the IDP group to add default channels for. (required)
     * @param adminusergroupsAddDefaultChannelsRequest  (required)
     * @return AddDefaultChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addChannels"> Documentation</a>
     */
    public AddDefaultChannelsRequestBuilder addDefaultChannels(String token, String channelIds, String usergroupId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelIds == null) throw new IllegalArgumentException("\"channelIds\" is required but got null");
            

        if (usergroupId == null) throw new IllegalArgumentException("\"usergroupId\" is required but got null");
            

        return new AddDefaultChannelsRequestBuilder(token, channelIds, usergroupId);
    }
    private okhttp3.Call associateDefaultWorkspacesCall(String token, String teamIds, String usergroupId, AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest, Boolean autoProvision, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusergroupsAssociateDefaultWorkspacesRequest;

        // create path and map variables
        String localVarPath = "/admin.usergroups.addTeams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoProvision != null) {
            localVarFormParams.put("auto_provision", autoProvision);
        }

        if (teamIds != null) {
            localVarFormParams.put("team_ids", teamIds);
        }

        if (usergroupId != null) {
            localVarFormParams.put("usergroup_id", usergroupId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateDefaultWorkspacesValidateBeforeCall(String token, String teamIds, String usergroupId, AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest, Boolean autoProvision, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling associateDefaultWorkspaces(Async)");
        }

        // verify the required parameter 'teamIds' is set
        if (teamIds == null) {
            throw new ApiException("Missing the required parameter 'teamIds' when calling associateDefaultWorkspaces(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling associateDefaultWorkspaces(Async)");
        }

        // verify the required parameter 'adminusergroupsAssociateDefaultWorkspacesRequest' is set
        if (adminusergroupsAssociateDefaultWorkspacesRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusergroupsAssociateDefaultWorkspacesRequest' when calling associateDefaultWorkspaces(Async)");
        }

        return associateDefaultWorkspacesCall(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision, _callback);

    }


    private ApiResponse<AdminusergroupsAssociateDefaultWorkspacesResponse> associateDefaultWorkspacesWithHttpInfo(String token, String teamIds, String usergroupId, AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest, Boolean autoProvision) throws ApiException {
        okhttp3.Call localVarCall = associateDefaultWorkspacesValidateBeforeCall(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision, null);
        Type localVarReturnType = new TypeToken<AdminusergroupsAssociateDefaultWorkspacesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call associateDefaultWorkspacesAsync(String token, String teamIds, String usergroupId, AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest, Boolean autoProvision, final ApiCallback<AdminusergroupsAssociateDefaultWorkspacesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateDefaultWorkspacesValidateBeforeCall(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision, _callback);
        Type localVarReturnType = new TypeToken<AdminusergroupsAssociateDefaultWorkspacesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssociateDefaultWorkspacesRequestBuilder {
        private final String token;
        private final String teamIds;
        private final String usergroupId;
        private Boolean autoProvision;

        private AssociateDefaultWorkspacesRequestBuilder(String token, String teamIds, String usergroupId) {
            this.token = token;
            this.teamIds = teamIds;
            this.usergroupId = usergroupId;
        }

        /**
         * Set autoProvision
         * @param autoProvision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
         * @return AssociateDefaultWorkspacesRequestBuilder
         */
        public AssociateDefaultWorkspacesRequestBuilder autoProvision(Boolean autoProvision) {
            this.autoProvision = autoProvision;
            return this;
        }
        
        /**
         * Build call for associateDefaultWorkspaces
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest = buildBodyParams();
            return associateDefaultWorkspacesCall(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision, _callback);
        }

        private AdminusergroupsAssociateDefaultWorkspacesRequest buildBodyParams() {
            AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest = new AdminusergroupsAssociateDefaultWorkspacesRequest();
            adminusergroupsAssociateDefaultWorkspacesRequest.autoProvision(this.autoProvision);
            adminusergroupsAssociateDefaultWorkspacesRequest.teamIds(this.teamIds);
            adminusergroupsAssociateDefaultWorkspacesRequest.usergroupId(this.usergroupId);
            return adminusergroupsAssociateDefaultWorkspacesRequest;
        }

        /**
         * Execute associateDefaultWorkspaces request
         * @return AdminusergroupsAssociateDefaultWorkspacesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusergroupsAssociateDefaultWorkspacesResponse execute() throws ApiException {
            AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest = buildBodyParams();
            ApiResponse<AdminusergroupsAssociateDefaultWorkspacesResponse> localVarResp = associateDefaultWorkspacesWithHttpInfo(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute associateDefaultWorkspaces request with HTTP info returned
         * @return ApiResponse&lt;AdminusergroupsAssociateDefaultWorkspacesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusergroupsAssociateDefaultWorkspacesResponse> executeWithHttpInfo() throws ApiException {
            AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest = buildBodyParams();
            return associateDefaultWorkspacesWithHttpInfo(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision);
        }

        /**
         * Execute associateDefaultWorkspaces request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusergroupsAssociateDefaultWorkspacesResponse> _callback) throws ApiException {
            AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest = buildBodyParams();
            return associateDefaultWorkspacesAsync(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision, _callback);
        }
    }

    /**
     * 
     * Associate one or more default workspaces with an organization-wide IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param usergroupId An encoded usergroup (IDP Group) ID. (required)
     * @param adminusergroupsAssociateDefaultWorkspacesRequest  (required)
     * @return AssociateDefaultWorkspacesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addTeams"> Documentation</a>
     */
    public AssociateDefaultWorkspacesRequestBuilder associateDefaultWorkspaces(String token, String teamIds, String usergroupId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamIds == null) throw new IllegalArgumentException("\"teamIds\" is required but got null");
            

        if (usergroupId == null) throw new IllegalArgumentException("\"usergroupId\" is required but got null");
            

        return new AssociateDefaultWorkspacesRequestBuilder(token, teamIds, usergroupId);
    }
    private okhttp3.Call listChannelsGetCall(String token, String usergroupId, String teamId, Boolean includeNumMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.usergroups.listChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usergroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usergroup_id", usergroupId));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (includeNumMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_num_members", includeNumMembers));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelsGetValidateBeforeCall(String token, String usergroupId, String teamId, Boolean includeNumMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listChannelsGet(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling listChannelsGet(Async)");
        }

        return listChannelsGetCall(token, usergroupId, teamId, includeNumMembers, _callback);

    }


    private ApiResponse<AdminusergroupsListChannelsGetResponse> listChannelsGetWithHttpInfo(String token, String usergroupId, String teamId, Boolean includeNumMembers) throws ApiException {
        okhttp3.Call localVarCall = listChannelsGetValidateBeforeCall(token, usergroupId, teamId, includeNumMembers, null);
        Type localVarReturnType = new TypeToken<AdminusergroupsListChannelsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listChannelsGetAsync(String token, String usergroupId, String teamId, Boolean includeNumMembers, final ApiCallback<AdminusergroupsListChannelsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelsGetValidateBeforeCall(token, usergroupId, teamId, includeNumMembers, _callback);
        Type localVarReturnType = new TypeToken<AdminusergroupsListChannelsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListChannelsGetRequestBuilder {
        private final String token;
        private final String usergroupId;
        private String teamId;
        private Boolean includeNumMembers;

        private ListChannelsGetRequestBuilder(String token, String usergroupId) {
            this.token = token;
            this.usergroupId = usergroupId;
        }

        /**
         * Set teamId
         * @param teamId ID of the the workspace. (optional)
         * @return ListChannelsGetRequestBuilder
         */
        public ListChannelsGetRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set includeNumMembers
         * @param includeNumMembers Flag to include or exclude the count of members per channel. (optional)
         * @return ListChannelsGetRequestBuilder
         */
        public ListChannelsGetRequestBuilder includeNumMembers(Boolean includeNumMembers) {
            this.includeNumMembers = includeNumMembers;
            return this;
        }
        
        /**
         * Build call for listChannelsGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listChannelsGetCall(token, usergroupId, teamId, includeNumMembers, _callback);
        }


        /**
         * Execute listChannelsGet request
         * @return AdminusergroupsListChannelsGetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public AdminusergroupsListChannelsGetResponse execute() throws ApiException {
            ApiResponse<AdminusergroupsListChannelsGetResponse> localVarResp = listChannelsGetWithHttpInfo(token, usergroupId, teamId, includeNumMembers);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listChannelsGet request with HTTP info returned
         * @return ApiResponse&lt;AdminusergroupsListChannelsGetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusergroupsListChannelsGetResponse> executeWithHttpInfo() throws ApiException {
            return listChannelsGetWithHttpInfo(token, usergroupId, teamId, includeNumMembers);
        }

        /**
         * Execute listChannelsGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusergroupsListChannelsGetResponse> _callback) throws ApiException {
            return listChannelsGetAsync(token, usergroupId, teamId, includeNumMembers, _callback);
        }
    }

    /**
     * 
     * List the channels linked to an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param usergroupId ID of the IDP group to list default channels for. (required)
     * @return ListChannelsGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.listChannels"> Documentation</a>
     */
    public ListChannelsGetRequestBuilder listChannelsGet(String token, String usergroupId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (usergroupId == null) throw new IllegalArgumentException("\"usergroupId\" is required but got null");
            

        return new ListChannelsGetRequestBuilder(token, usergroupId);
    }
    private okhttp3.Call removeChannelsCall(String token, String channelIds, String usergroupId, AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusergroupsRemoveChannelsRequest;

        // create path and map variables
        String localVarPath = "/admin.usergroups.removeChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (usergroupId != null) {
            localVarFormParams.put("usergroup_id", usergroupId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeChannelsValidateBeforeCall(String token, String channelIds, String usergroupId, AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeChannels(Async)");
        }

        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling removeChannels(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling removeChannels(Async)");
        }

        // verify the required parameter 'adminusergroupsRemoveChannelsRequest' is set
        if (adminusergroupsRemoveChannelsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusergroupsRemoveChannelsRequest' when calling removeChannels(Async)");
        }

        return removeChannelsCall(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest, _callback);

    }


    private ApiResponse<AdminusergroupsRemoveChannelsResponse> removeChannelsWithHttpInfo(String token, String channelIds, String usergroupId, AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest) throws ApiException {
        okhttp3.Call localVarCall = removeChannelsValidateBeforeCall(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest, null);
        Type localVarReturnType = new TypeToken<AdminusergroupsRemoveChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeChannelsAsync(String token, String channelIds, String usergroupId, AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest, final ApiCallback<AdminusergroupsRemoveChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeChannelsValidateBeforeCall(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusergroupsRemoveChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveChannelsRequestBuilder {
        private final String token;
        private final String channelIds;
        private final String usergroupId;

        private RemoveChannelsRequestBuilder(String token, String channelIds, String usergroupId) {
            this.token = token;
            this.channelIds = channelIds;
            this.usergroupId = usergroupId;
        }

        /**
         * Build call for removeChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest = buildBodyParams();
            return removeChannelsCall(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest, _callback);
        }

        private AdminusergroupsRemoveChannelsRequest buildBodyParams() {
            AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest = new AdminusergroupsRemoveChannelsRequest();
            adminusergroupsRemoveChannelsRequest.channelIds(this.channelIds);
            adminusergroupsRemoveChannelsRequest.usergroupId(this.usergroupId);
            return adminusergroupsRemoveChannelsRequest;
        }

        /**
         * Execute removeChannels request
         * @return AdminusergroupsRemoveChannelsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public AdminusergroupsRemoveChannelsResponse execute() throws ApiException {
            AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest = buildBodyParams();
            ApiResponse<AdminusergroupsRemoveChannelsResponse> localVarResp = removeChannelsWithHttpInfo(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeChannels request with HTTP info returned
         * @return ApiResponse&lt;AdminusergroupsRemoveChannelsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusergroupsRemoveChannelsResponse> executeWithHttpInfo() throws ApiException {
            AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest = buildBodyParams();
            return removeChannelsWithHttpInfo(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest);
        }

        /**
         * Execute removeChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusergroupsRemoveChannelsResponse> _callback) throws ApiException {
            AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest = buildBodyParams();
            return removeChannelsAsync(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest, _callback);
        }
    }

    /**
     * 
     * Remove one or more default channels from an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma-separated string of channel IDs (required)
     * @param usergroupId ID of the IDP Group (required)
     * @param adminusergroupsRemoveChannelsRequest  (required)
     * @return RemoveChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.removeChannels"> Documentation</a>
     */
    public RemoveChannelsRequestBuilder removeChannels(String token, String channelIds, String usergroupId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelIds == null) throw new IllegalArgumentException("\"channelIds\" is required but got null");
            

        if (usergroupId == null) throw new IllegalArgumentException("\"usergroupId\" is required but got null");
            

        return new RemoveChannelsRequestBuilder(token, channelIds, usergroupId);
    }
}
