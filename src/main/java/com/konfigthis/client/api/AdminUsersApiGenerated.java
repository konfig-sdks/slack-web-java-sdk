/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminusersAddWorkspaceUserRequest;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserResponse;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserdefaultResponse;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspaceRequest;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspaceResponse;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminusersListWorkspaceUsersResponse;
import com.konfigthis.client.model.AdminusersListWorkspaceUsersdefaultResponse;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspaceRequest;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspaceResponse;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminusersSetAdminUserRequest;
import com.konfigthis.client.model.AdminusersSetAdminUserResponse;
import com.konfigthis.client.model.AdminusersSetAdminUserdefaultResponse;
import com.konfigthis.client.model.AdminusersSetExpirationGuestRequest;
import com.konfigthis.client.model.AdminusersSetExpirationGuestResponse;
import com.konfigthis.client.model.AdminusersSetExpirationGuestdefaultResponse;
import com.konfigthis.client.model.AdminusersSetRegularUserRequest;
import com.konfigthis.client.model.AdminusersSetRegularUserResponse;
import com.konfigthis.client.model.AdminusersSetRegularUserdefaultResponse;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerRequest;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerResponse;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminUsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminUsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminUsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addWorkspaceUserCall(String token, String teamId, String userId, AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest, String channelIds, Boolean isRestricted, Boolean isUltraRestricted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersAddWorkspaceUserRequest;

        // create path and map variables
        String localVarPath = "/admin.users.assign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (isRestricted != null) {
            localVarFormParams.put("is_restricted", isRestricted);
        }

        if (isUltraRestricted != null) {
            localVarFormParams.put("is_ultra_restricted", isUltraRestricted);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addWorkspaceUserValidateBeforeCall(String token, String teamId, String userId, AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest, String channelIds, Boolean isRestricted, Boolean isUltraRestricted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addWorkspaceUser(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling addWorkspaceUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addWorkspaceUser(Async)");
        }

        // verify the required parameter 'adminusersAddWorkspaceUserRequest' is set
        if (adminusersAddWorkspaceUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersAddWorkspaceUserRequest' when calling addWorkspaceUser(Async)");
        }

        return addWorkspaceUserCall(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted, _callback);

    }


    private ApiResponse<AdminusersAddWorkspaceUserResponse> addWorkspaceUserWithHttpInfo(String token, String teamId, String userId, AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest, String channelIds, Boolean isRestricted, Boolean isUltraRestricted) throws ApiException {
        okhttp3.Call localVarCall = addWorkspaceUserValidateBeforeCall(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted, null);
        Type localVarReturnType = new TypeToken<AdminusersAddWorkspaceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addWorkspaceUserAsync(String token, String teamId, String userId, AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest, String channelIds, Boolean isRestricted, Boolean isUltraRestricted, final ApiCallback<AdminusersAddWorkspaceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addWorkspaceUserValidateBeforeCall(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted, _callback);
        Type localVarReturnType = new TypeToken<AdminusersAddWorkspaceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddWorkspaceUserRequestBuilder {
        private final String token;
        private final String teamId;
        private final String userId;
        private String channelIds;
        private Boolean isRestricted;
        private Boolean isUltraRestricted;

        private AddWorkspaceUserRequestBuilder(String token, String teamId, String userId) {
            this.token = token;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Set channelIds
         * @param channelIds Comma separated values of channel IDs to add user in the new workspace. (optional)
         * @return AddWorkspaceUserRequestBuilder
         */
        public AddWorkspaceUserRequestBuilder channelIds(String channelIds) {
            this.channelIds = channelIds;
            return this;
        }
        
        /**
         * Set isRestricted
         * @param isRestricted True if user should be added to the workspace as a guest. (optional)
         * @return AddWorkspaceUserRequestBuilder
         */
        public AddWorkspaceUserRequestBuilder isRestricted(Boolean isRestricted) {
            this.isRestricted = isRestricted;
            return this;
        }
        
        /**
         * Set isUltraRestricted
         * @param isUltraRestricted True if user should be added to the workspace as a single-channel guest. (optional)
         * @return AddWorkspaceUserRequestBuilder
         */
        public AddWorkspaceUserRequestBuilder isUltraRestricted(Boolean isUltraRestricted) {
            this.isUltraRestricted = isUltraRestricted;
            return this;
        }
        
        /**
         * Build call for addWorkspaceUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest = buildBodyParams();
            return addWorkspaceUserCall(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted, _callback);
        }

        private AdminusersAddWorkspaceUserRequest buildBodyParams() {
            AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest = new AdminusersAddWorkspaceUserRequest();
            adminusersAddWorkspaceUserRequest.channelIds(this.channelIds);
            adminusersAddWorkspaceUserRequest.isRestricted(this.isRestricted);
            adminusersAddWorkspaceUserRequest.isUltraRestricted(this.isUltraRestricted);
            adminusersAddWorkspaceUserRequest.teamId(this.teamId);
            adminusersAddWorkspaceUserRequest.userId(this.userId);
            return adminusersAddWorkspaceUserRequest;
        }

        /**
         * Execute addWorkspaceUser request
         * @return AdminusersAddWorkspaceUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersAddWorkspaceUserResponse execute() throws ApiException {
            AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest = buildBodyParams();
            ApiResponse<AdminusersAddWorkspaceUserResponse> localVarResp = addWorkspaceUserWithHttpInfo(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addWorkspaceUser request with HTTP info returned
         * @return ApiResponse&lt;AdminusersAddWorkspaceUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersAddWorkspaceUserResponse> executeWithHttpInfo() throws ApiException {
            AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest = buildBodyParams();
            return addWorkspaceUserWithHttpInfo(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted);
        }

        /**
         * Execute addWorkspaceUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersAddWorkspaceUserResponse> _callback) throws ApiException {
            AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest = buildBodyParams();
            return addWorkspaceUserAsync(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted, _callback);
        }
    }

    /**
     * 
     * Add an Enterprise user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to add to the workspace. (required)
     * @param adminusersAddWorkspaceUserRequest  (required)
     * @return AddWorkspaceUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.assign"> Documentation</a>
     */
    public AddWorkspaceUserRequestBuilder addWorkspaceUser(String token, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new AddWorkspaceUserRequestBuilder(token, teamId, userId);
    }
    private okhttp3.Call inviteUserToWorkspaceCall(String token, String channelIds, String email, String teamId, AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersInviteUserToWorkspaceRequest;

        // create path and map variables
        String localVarPath = "/admin.users.invite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (customMessage != null) {
            localVarFormParams.put("custom_message", customMessage);
        }

        if (email != null) {
            localVarFormParams.put("email", email);
        }

        if (guestExpirationTs != null) {
            localVarFormParams.put("guest_expiration_ts", guestExpirationTs);
        }

        if (isRestricted != null) {
            localVarFormParams.put("is_restricted", isRestricted);
        }

        if (isUltraRestricted != null) {
            localVarFormParams.put("is_ultra_restricted", isUltraRestricted);
        }

        if (realName != null) {
            localVarFormParams.put("real_name", realName);
        }

        if (resend != null) {
            localVarFormParams.put("resend", resend);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteUserToWorkspaceValidateBeforeCall(String token, String channelIds, String email, String teamId, AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling inviteUserToWorkspace(Async)");
        }

        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling inviteUserToWorkspace(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling inviteUserToWorkspace(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling inviteUserToWorkspace(Async)");
        }

        // verify the required parameter 'adminusersInviteUserToWorkspaceRequest' is set
        if (adminusersInviteUserToWorkspaceRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersInviteUserToWorkspaceRequest' when calling inviteUserToWorkspace(Async)");
        }

        return inviteUserToWorkspaceCall(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, _callback);

    }


    private ApiResponse<AdminusersInviteUserToWorkspaceResponse> inviteUserToWorkspaceWithHttpInfo(String token, String channelIds, String email, String teamId, AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend) throws ApiException {
        okhttp3.Call localVarCall = inviteUserToWorkspaceValidateBeforeCall(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, null);
        Type localVarReturnType = new TypeToken<AdminusersInviteUserToWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call inviteUserToWorkspaceAsync(String token, String channelIds, String email, String teamId, AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend, final ApiCallback<AdminusersInviteUserToWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteUserToWorkspaceValidateBeforeCall(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, _callback);
        Type localVarReturnType = new TypeToken<AdminusersInviteUserToWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InviteUserToWorkspaceRequestBuilder {
        private final String token;
        private final String channelIds;
        private final String email;
        private final String teamId;
        private String customMessage;
        private String guestExpirationTs;
        private Boolean isRestricted;
        private Boolean isUltraRestricted;
        private String realName;
        private Boolean resend;

        private InviteUserToWorkspaceRequestBuilder(String token, String channelIds, String email, String teamId) {
            this.token = token;
            this.channelIds = channelIds;
            this.email = email;
            this.teamId = teamId;
        }

        /**
         * Set customMessage
         * @param customMessage An optional message to send to the user in the invite email. (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder customMessage(String customMessage) {
            this.customMessage = customMessage;
            return this;
        }
        
        /**
         * Set guestExpirationTs
         * @param guestExpirationTs Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder guestExpirationTs(String guestExpirationTs) {
            this.guestExpirationTs = guestExpirationTs;
            return this;
        }
        
        /**
         * Set isRestricted
         * @param isRestricted Is this user a multi-channel guest user? (default: false) (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder isRestricted(Boolean isRestricted) {
            this.isRestricted = isRestricted;
            return this;
        }
        
        /**
         * Set isUltraRestricted
         * @param isUltraRestricted Is this user a single channel guest user? (default: false) (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder isUltraRestricted(Boolean isUltraRestricted) {
            this.isUltraRestricted = isUltraRestricted;
            return this;
        }
        
        /**
         * Set realName
         * @param realName Full name of the user. (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder realName(String realName) {
            this.realName = realName;
            return this;
        }
        
        /**
         * Set resend
         * @param resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder resend(Boolean resend) {
            this.resend = resend;
            return this;
        }
        
        /**
         * Build call for inviteUserToWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = buildBodyParams();
            return inviteUserToWorkspaceCall(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, _callback);
        }

        private AdminusersInviteUserToWorkspaceRequest buildBodyParams() {
            AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = new AdminusersInviteUserToWorkspaceRequest();
            adminusersInviteUserToWorkspaceRequest.channelIds(this.channelIds);
            adminusersInviteUserToWorkspaceRequest.customMessage(this.customMessage);
            adminusersInviteUserToWorkspaceRequest.email(this.email);
            adminusersInviteUserToWorkspaceRequest.guestExpirationTs(this.guestExpirationTs);
            adminusersInviteUserToWorkspaceRequest.isRestricted(this.isRestricted);
            adminusersInviteUserToWorkspaceRequest.isUltraRestricted(this.isUltraRestricted);
            adminusersInviteUserToWorkspaceRequest.realName(this.realName);
            adminusersInviteUserToWorkspaceRequest.resend(this.resend);
            adminusersInviteUserToWorkspaceRequest.teamId(this.teamId);
            return adminusersInviteUserToWorkspaceRequest;
        }

        /**
         * Execute inviteUserToWorkspace request
         * @return AdminusersInviteUserToWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersInviteUserToWorkspaceResponse execute() throws ApiException {
            AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = buildBodyParams();
            ApiResponse<AdminusersInviteUserToWorkspaceResponse> localVarResp = inviteUserToWorkspaceWithHttpInfo(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute inviteUserToWorkspace request with HTTP info returned
         * @return ApiResponse&lt;AdminusersInviteUserToWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersInviteUserToWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = buildBodyParams();
            return inviteUserToWorkspaceWithHttpInfo(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend);
        }

        /**
         * Execute inviteUserToWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersInviteUserToWorkspaceResponse> _callback) throws ApiException {
            AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = buildBodyParams();
            return inviteUserToWorkspaceAsync(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, _callback);
        }
    }

    /**
     * 
     * Invite a user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param channelIds A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param email The email address of the person to invite. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param adminusersInviteUserToWorkspaceRequest  (required)
     * @return InviteUserToWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.invite"> Documentation</a>
     */
    public InviteUserToWorkspaceRequestBuilder inviteUserToWorkspace(String token, String channelIds, String email, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelIds == null) throw new IllegalArgumentException("\"channelIds\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new InviteUserToWorkspaceRequestBuilder(token, channelIds, email, teamId);
    }
    private okhttp3.Call listWorkspaceUsersCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.users.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkspaceUsersValidateBeforeCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listWorkspaceUsers(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listWorkspaceUsers(Async)");
        }

        return listWorkspaceUsersCall(token, teamId, cursor, limit, _callback);

    }


    private ApiResponse<AdminusersListWorkspaceUsersResponse> listWorkspaceUsersWithHttpInfo(String token, String teamId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listWorkspaceUsersValidateBeforeCall(token, teamId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdminusersListWorkspaceUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkspaceUsersAsync(String token, String teamId, String cursor, Integer limit, final ApiCallback<AdminusersListWorkspaceUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkspaceUsersValidateBeforeCall(token, teamId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdminusersListWorkspaceUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkspaceUsersRequestBuilder {
        private final String token;
        private final String teamId;
        private String cursor;
        private Integer limit;

        private ListWorkspaceUsersRequestBuilder(String token, String teamId) {
            this.token = token;
            this.teamId = teamId;
        }

        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
         * @return ListWorkspaceUsersRequestBuilder
         */
        public ListWorkspaceUsersRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit for how many users to be retrieved per page (optional)
         * @return ListWorkspaceUsersRequestBuilder
         */
        public ListWorkspaceUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listWorkspaceUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkspaceUsersCall(token, teamId, cursor, limit, _callback);
        }


        /**
         * Execute listWorkspaceUsers request
         * @return AdminusersListWorkspaceUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersListWorkspaceUsersResponse execute() throws ApiException {
            ApiResponse<AdminusersListWorkspaceUsersResponse> localVarResp = listWorkspaceUsersWithHttpInfo(token, teamId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkspaceUsers request with HTTP info returned
         * @return ApiResponse&lt;AdminusersListWorkspaceUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersListWorkspaceUsersResponse> executeWithHttpInfo() throws ApiException {
            return listWorkspaceUsersWithHttpInfo(token, teamId, cursor, limit);
        }

        /**
         * Execute listWorkspaceUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersListWorkspaceUsersResponse> _callback) throws ApiException {
            return listWorkspaceUsersAsync(token, teamId, cursor, limit, _callback);
        }
    }

    /**
     * 
     * List users on a workspace
     * @param token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @return ListWorkspaceUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.list"> Documentation</a>
     */
    public ListWorkspaceUsersRequestBuilder listWorkspaceUsers(String token, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListWorkspaceUsersRequestBuilder(token, teamId);
    }
    private okhttp3.Call removeUserFromWorkspaceCall(String token, String teamId, String userId, AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersRemoveUserFromWorkspaceRequest;

        // create path and map variables
        String localVarPath = "/admin.users.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromWorkspaceValidateBeforeCall(String token, String teamId, String userId, AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeUserFromWorkspace(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling removeUserFromWorkspace(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserFromWorkspace(Async)");
        }

        // verify the required parameter 'adminusersRemoveUserFromWorkspaceRequest' is set
        if (adminusersRemoveUserFromWorkspaceRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersRemoveUserFromWorkspaceRequest' when calling removeUserFromWorkspace(Async)");
        }

        return removeUserFromWorkspaceCall(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest, _callback);

    }


    private ApiResponse<AdminusersRemoveUserFromWorkspaceResponse> removeUserFromWorkspaceWithHttpInfo(String token, String teamId, String userId, AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromWorkspaceValidateBeforeCall(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest, null);
        Type localVarReturnType = new TypeToken<AdminusersRemoveUserFromWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeUserFromWorkspaceAsync(String token, String teamId, String userId, AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest, final ApiCallback<AdminusersRemoveUserFromWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromWorkspaceValidateBeforeCall(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusersRemoveUserFromWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveUserFromWorkspaceRequestBuilder {
        private final String token;
        private final String teamId;
        private final String userId;

        private RemoveUserFromWorkspaceRequestBuilder(String token, String teamId, String userId) {
            this.token = token;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for removeUserFromWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest = buildBodyParams();
            return removeUserFromWorkspaceCall(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest, _callback);
        }

        private AdminusersRemoveUserFromWorkspaceRequest buildBodyParams() {
            AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest = new AdminusersRemoveUserFromWorkspaceRequest();
            adminusersRemoveUserFromWorkspaceRequest.teamId(this.teamId);
            adminusersRemoveUserFromWorkspaceRequest.userId(this.userId);
            return adminusersRemoveUserFromWorkspaceRequest;
        }

        /**
         * Execute removeUserFromWorkspace request
         * @return AdminusersRemoveUserFromWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersRemoveUserFromWorkspaceResponse execute() throws ApiException {
            AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest = buildBodyParams();
            ApiResponse<AdminusersRemoveUserFromWorkspaceResponse> localVarResp = removeUserFromWorkspaceWithHttpInfo(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeUserFromWorkspace request with HTTP info returned
         * @return ApiResponse&lt;AdminusersRemoveUserFromWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersRemoveUserFromWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest = buildBodyParams();
            return removeUserFromWorkspaceWithHttpInfo(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest);
        }

        /**
         * Execute removeUserFromWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersRemoveUserFromWorkspaceResponse> _callback) throws ApiException {
            AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest = buildBodyParams();
            return removeUserFromWorkspaceAsync(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest, _callback);
        }
    }

    /**
     * 
     * Remove a user from a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to remove. (required)
     * @param adminusersRemoveUserFromWorkspaceRequest  (required)
     * @return RemoveUserFromWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.remove"> Documentation</a>
     */
    public RemoveUserFromWorkspaceRequestBuilder removeUserFromWorkspace(String token, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new RemoveUserFromWorkspaceRequestBuilder(token, teamId, userId);
    }
    private okhttp3.Call setAdminUserCall(String token, String teamId, String userId, AdminusersSetAdminUserRequest adminusersSetAdminUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersSetAdminUserRequest;

        // create path and map variables
        String localVarPath = "/admin.users.setAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAdminUserValidateBeforeCall(String token, String teamId, String userId, AdminusersSetAdminUserRequest adminusersSetAdminUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setAdminUser(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setAdminUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setAdminUser(Async)");
        }

        // verify the required parameter 'adminusersSetAdminUserRequest' is set
        if (adminusersSetAdminUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersSetAdminUserRequest' when calling setAdminUser(Async)");
        }

        return setAdminUserCall(token, teamId, userId, adminusersSetAdminUserRequest, _callback);

    }


    private ApiResponse<AdminusersSetAdminUserResponse> setAdminUserWithHttpInfo(String token, String teamId, String userId, AdminusersSetAdminUserRequest adminusersSetAdminUserRequest) throws ApiException {
        okhttp3.Call localVarCall = setAdminUserValidateBeforeCall(token, teamId, userId, adminusersSetAdminUserRequest, null);
        Type localVarReturnType = new TypeToken<AdminusersSetAdminUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setAdminUserAsync(String token, String teamId, String userId, AdminusersSetAdminUserRequest adminusersSetAdminUserRequest, final ApiCallback<AdminusersSetAdminUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAdminUserValidateBeforeCall(token, teamId, userId, adminusersSetAdminUserRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusersSetAdminUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetAdminUserRequestBuilder {
        private final String token;
        private final String teamId;
        private final String userId;

        private SetAdminUserRequestBuilder(String token, String teamId, String userId) {
            this.token = token;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for setAdminUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersSetAdminUserRequest adminusersSetAdminUserRequest = buildBodyParams();
            return setAdminUserCall(token, teamId, userId, adminusersSetAdminUserRequest, _callback);
        }

        private AdminusersSetAdminUserRequest buildBodyParams() {
            AdminusersSetAdminUserRequest adminusersSetAdminUserRequest = new AdminusersSetAdminUserRequest();
            adminusersSetAdminUserRequest.teamId(this.teamId);
            adminusersSetAdminUserRequest.userId(this.userId);
            return adminusersSetAdminUserRequest;
        }

        /**
         * Execute setAdminUser request
         * @return AdminusersSetAdminUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersSetAdminUserResponse execute() throws ApiException {
            AdminusersSetAdminUserRequest adminusersSetAdminUserRequest = buildBodyParams();
            ApiResponse<AdminusersSetAdminUserResponse> localVarResp = setAdminUserWithHttpInfo(token, teamId, userId, adminusersSetAdminUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setAdminUser request with HTTP info returned
         * @return ApiResponse&lt;AdminusersSetAdminUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersSetAdminUserResponse> executeWithHttpInfo() throws ApiException {
            AdminusersSetAdminUserRequest adminusersSetAdminUserRequest = buildBodyParams();
            return setAdminUserWithHttpInfo(token, teamId, userId, adminusersSetAdminUserRequest);
        }

        /**
         * Execute setAdminUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersSetAdminUserResponse> _callback) throws ApiException {
            AdminusersSetAdminUserRequest adminusersSetAdminUserRequest = buildBodyParams();
            return setAdminUserAsync(token, teamId, userId, adminusersSetAdminUserRequest, _callback);
        }
    }

    /**
     * 
     * Set an existing guest, regular user, or owner to be an admin user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as an admin. (required)
     * @param adminusersSetAdminUserRequest  (required)
     * @return SetAdminUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setAdmin"> Documentation</a>
     */
    public SetAdminUserRequestBuilder setAdminUser(String token, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SetAdminUserRequestBuilder(token, teamId, userId);
    }
    private okhttp3.Call setExpirationGuestCall(String token, Integer expirationTs, String teamId, String userId, AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersSetExpirationGuestRequest;

        // create path and map variables
        String localVarPath = "/admin.users.setExpiration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expirationTs != null) {
            localVarFormParams.put("expiration_ts", expirationTs);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setExpirationGuestValidateBeforeCall(String token, Integer expirationTs, String teamId, String userId, AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setExpirationGuest(Async)");
        }

        // verify the required parameter 'expirationTs' is set
        if (expirationTs == null) {
            throw new ApiException("Missing the required parameter 'expirationTs' when calling setExpirationGuest(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setExpirationGuest(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setExpirationGuest(Async)");
        }

        // verify the required parameter 'adminusersSetExpirationGuestRequest' is set
        if (adminusersSetExpirationGuestRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersSetExpirationGuestRequest' when calling setExpirationGuest(Async)");
        }

        return setExpirationGuestCall(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest, _callback);

    }


    private ApiResponse<AdminusersSetExpirationGuestResponse> setExpirationGuestWithHttpInfo(String token, Integer expirationTs, String teamId, String userId, AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest) throws ApiException {
        okhttp3.Call localVarCall = setExpirationGuestValidateBeforeCall(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest, null);
        Type localVarReturnType = new TypeToken<AdminusersSetExpirationGuestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setExpirationGuestAsync(String token, Integer expirationTs, String teamId, String userId, AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest, final ApiCallback<AdminusersSetExpirationGuestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setExpirationGuestValidateBeforeCall(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusersSetExpirationGuestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetExpirationGuestRequestBuilder {
        private final String token;
        private final Integer expirationTs;
        private final String teamId;
        private final String userId;

        private SetExpirationGuestRequestBuilder(String token, Integer expirationTs, String teamId, String userId) {
            this.token = token;
            this.expirationTs = expirationTs;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for setExpirationGuest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest = buildBodyParams();
            return setExpirationGuestCall(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest, _callback);
        }

        private AdminusersSetExpirationGuestRequest buildBodyParams() {
            AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest = new AdminusersSetExpirationGuestRequest();
            adminusersSetExpirationGuestRequest.expirationTs(this.expirationTs);
            adminusersSetExpirationGuestRequest.teamId(this.teamId);
            adminusersSetExpirationGuestRequest.userId(this.userId);
            return adminusersSetExpirationGuestRequest;
        }

        /**
         * Execute setExpirationGuest request
         * @return AdminusersSetExpirationGuestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersSetExpirationGuestResponse execute() throws ApiException {
            AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest = buildBodyParams();
            ApiResponse<AdminusersSetExpirationGuestResponse> localVarResp = setExpirationGuestWithHttpInfo(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setExpirationGuest request with HTTP info returned
         * @return ApiResponse&lt;AdminusersSetExpirationGuestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersSetExpirationGuestResponse> executeWithHttpInfo() throws ApiException {
            AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest = buildBodyParams();
            return setExpirationGuestWithHttpInfo(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest);
        }

        /**
         * Execute setExpirationGuest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersSetExpirationGuestResponse> _callback) throws ApiException {
            AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest = buildBodyParams();
            return setExpirationGuestAsync(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest, _callback);
        }
    }

    /**
     * 
     * Set an expiration for a guest user
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param expirationTs Timestamp when guest account should be disabled. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to set an expiration for. (required)
     * @param adminusersSetExpirationGuestRequest  (required)
     * @return SetExpirationGuestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setExpiration"> Documentation</a>
     */
    public SetExpirationGuestRequestBuilder setExpirationGuest(String token, Integer expirationTs, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (expirationTs == null) throw new IllegalArgumentException("\"expirationTs\" is required but got null");
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SetExpirationGuestRequestBuilder(token, expirationTs, teamId, userId);
    }
    private okhttp3.Call setRegularUserCall(String token, String teamId, String userId, AdminusersSetRegularUserRequest adminusersSetRegularUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersSetRegularUserRequest;

        // create path and map variables
        String localVarPath = "/admin.users.setRegular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRegularUserValidateBeforeCall(String token, String teamId, String userId, AdminusersSetRegularUserRequest adminusersSetRegularUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setRegularUser(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setRegularUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setRegularUser(Async)");
        }

        // verify the required parameter 'adminusersSetRegularUserRequest' is set
        if (adminusersSetRegularUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersSetRegularUserRequest' when calling setRegularUser(Async)");
        }

        return setRegularUserCall(token, teamId, userId, adminusersSetRegularUserRequest, _callback);

    }


    private ApiResponse<AdminusersSetRegularUserResponse> setRegularUserWithHttpInfo(String token, String teamId, String userId, AdminusersSetRegularUserRequest adminusersSetRegularUserRequest) throws ApiException {
        okhttp3.Call localVarCall = setRegularUserValidateBeforeCall(token, teamId, userId, adminusersSetRegularUserRequest, null);
        Type localVarReturnType = new TypeToken<AdminusersSetRegularUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setRegularUserAsync(String token, String teamId, String userId, AdminusersSetRegularUserRequest adminusersSetRegularUserRequest, final ApiCallback<AdminusersSetRegularUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRegularUserValidateBeforeCall(token, teamId, userId, adminusersSetRegularUserRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusersSetRegularUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetRegularUserRequestBuilder {
        private final String token;
        private final String teamId;
        private final String userId;

        private SetRegularUserRequestBuilder(String token, String teamId, String userId) {
            this.token = token;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for setRegularUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersSetRegularUserRequest adminusersSetRegularUserRequest = buildBodyParams();
            return setRegularUserCall(token, teamId, userId, adminusersSetRegularUserRequest, _callback);
        }

        private AdminusersSetRegularUserRequest buildBodyParams() {
            AdminusersSetRegularUserRequest adminusersSetRegularUserRequest = new AdminusersSetRegularUserRequest();
            adminusersSetRegularUserRequest.teamId(this.teamId);
            adminusersSetRegularUserRequest.userId(this.userId);
            return adminusersSetRegularUserRequest;
        }

        /**
         * Execute setRegularUser request
         * @return AdminusersSetRegularUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersSetRegularUserResponse execute() throws ApiException {
            AdminusersSetRegularUserRequest adminusersSetRegularUserRequest = buildBodyParams();
            ApiResponse<AdminusersSetRegularUserResponse> localVarResp = setRegularUserWithHttpInfo(token, teamId, userId, adminusersSetRegularUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setRegularUser request with HTTP info returned
         * @return ApiResponse&lt;AdminusersSetRegularUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersSetRegularUserResponse> executeWithHttpInfo() throws ApiException {
            AdminusersSetRegularUserRequest adminusersSetRegularUserRequest = buildBodyParams();
            return setRegularUserWithHttpInfo(token, teamId, userId, adminusersSetRegularUserRequest);
        }

        /**
         * Execute setRegularUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersSetRegularUserResponse> _callback) throws ApiException {
            AdminusersSetRegularUserRequest adminusersSetRegularUserRequest = buildBodyParams();
            return setRegularUserAsync(token, teamId, userId, adminusersSetRegularUserRequest, _callback);
        }
    }

    /**
     * 
     * Set an existing guest user, admin user, or owner to be a regular user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as a regular user. (required)
     * @param adminusersSetRegularUserRequest  (required)
     * @return SetRegularUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setRegular"> Documentation</a>
     */
    public SetRegularUserRequestBuilder setRegularUser(String token, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SetRegularUserRequestBuilder(token, teamId, userId);
    }
    private okhttp3.Call setWorkspaceOwnerCall(String token, String teamId, String userId, AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersSetWorkspaceOwnerRequest;

        // create path and map variables
        String localVarPath = "/admin.users.setOwner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setWorkspaceOwnerValidateBeforeCall(String token, String teamId, String userId, AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setWorkspaceOwner(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setWorkspaceOwner(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setWorkspaceOwner(Async)");
        }

        // verify the required parameter 'adminusersSetWorkspaceOwnerRequest' is set
        if (adminusersSetWorkspaceOwnerRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersSetWorkspaceOwnerRequest' when calling setWorkspaceOwner(Async)");
        }

        return setWorkspaceOwnerCall(token, teamId, userId, adminusersSetWorkspaceOwnerRequest, _callback);

    }


    private ApiResponse<AdminusersSetWorkspaceOwnerResponse> setWorkspaceOwnerWithHttpInfo(String token, String teamId, String userId, AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest) throws ApiException {
        okhttp3.Call localVarCall = setWorkspaceOwnerValidateBeforeCall(token, teamId, userId, adminusersSetWorkspaceOwnerRequest, null);
        Type localVarReturnType = new TypeToken<AdminusersSetWorkspaceOwnerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setWorkspaceOwnerAsync(String token, String teamId, String userId, AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest, final ApiCallback<AdminusersSetWorkspaceOwnerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setWorkspaceOwnerValidateBeforeCall(token, teamId, userId, adminusersSetWorkspaceOwnerRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusersSetWorkspaceOwnerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetWorkspaceOwnerRequestBuilder {
        private final String token;
        private final String teamId;
        private final String userId;

        private SetWorkspaceOwnerRequestBuilder(String token, String teamId, String userId) {
            this.token = token;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for setWorkspaceOwner
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest = buildBodyParams();
            return setWorkspaceOwnerCall(token, teamId, userId, adminusersSetWorkspaceOwnerRequest, _callback);
        }

        private AdminusersSetWorkspaceOwnerRequest buildBodyParams() {
            AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest = new AdminusersSetWorkspaceOwnerRequest();
            adminusersSetWorkspaceOwnerRequest.teamId(this.teamId);
            adminusersSetWorkspaceOwnerRequest.userId(this.userId);
            return adminusersSetWorkspaceOwnerRequest;
        }

        /**
         * Execute setWorkspaceOwner request
         * @return AdminusersSetWorkspaceOwnerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersSetWorkspaceOwnerResponse execute() throws ApiException {
            AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest = buildBodyParams();
            ApiResponse<AdminusersSetWorkspaceOwnerResponse> localVarResp = setWorkspaceOwnerWithHttpInfo(token, teamId, userId, adminusersSetWorkspaceOwnerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setWorkspaceOwner request with HTTP info returned
         * @return ApiResponse&lt;AdminusersSetWorkspaceOwnerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersSetWorkspaceOwnerResponse> executeWithHttpInfo() throws ApiException {
            AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest = buildBodyParams();
            return setWorkspaceOwnerWithHttpInfo(token, teamId, userId, adminusersSetWorkspaceOwnerRequest);
        }

        /**
         * Execute setWorkspaceOwner request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersSetWorkspaceOwnerResponse> _callback) throws ApiException {
            AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest = buildBodyParams();
            return setWorkspaceOwnerAsync(token, teamId, userId, adminusersSetWorkspaceOwnerRequest, _callback);
        }
    }

    /**
     * 
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId Id of the user to promote to owner. (required)
     * @param adminusersSetWorkspaceOwnerRequest  (required)
     * @return SetWorkspaceOwnerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setOwner"> Documentation</a>
     */
    public SetWorkspaceOwnerRequestBuilder setWorkspaceOwner(String token, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SetWorkspaceOwnerRequestBuilder(token, teamId, userId);
    }
}
