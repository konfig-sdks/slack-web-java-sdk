/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CallsAddRequest;
import com.konfigthis.client.model.CallsAddResponse;
import com.konfigthis.client.model.CallsAdddefaultResponse;
import com.konfigthis.client.model.CallsEndRequest;
import com.konfigthis.client.model.CallsEndResponse;
import com.konfigthis.client.model.CallsEnddefaultResponse;
import com.konfigthis.client.model.CallsInfoResponse;
import com.konfigthis.client.model.CallsInfodefaultResponse;
import com.konfigthis.client.model.CallsUpdateRequest;
import com.konfigthis.client.model.CallsUpdateResponse;
import com.konfigthis.client.model.CallsUpdatedefaultResponse;
import com.konfigthis.client.model.CallsparticipantsAddNewParticipantRequest;
import com.konfigthis.client.model.CallsparticipantsAddNewParticipantResponse;
import com.konfigthis.client.model.CallsparticipantsAddNewParticipantdefaultResponse;
import com.konfigthis.client.model.CallsparticipantsRegisterRemovedRequest;
import com.konfigthis.client.model.CallsparticipantsRegisterRemovedResponse;
import com.konfigthis.client.model.CallsparticipantsRegisterRemoveddefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CallsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CallsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCall(String token, String externalUniqueId, String joinUrl, CallsAddRequest callsAddRequest, String title, String createdBy, Integer dateStart, String desktopAppJoinUrl, String externalDisplayId, String users, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callsAddRequest;

        // create path and map variables
        String localVarPath = "/calls.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (createdBy != null) {
            localVarFormParams.put("created_by", createdBy);
        }

        if (dateStart != null) {
            localVarFormParams.put("date_start", dateStart);
        }

        if (desktopAppJoinUrl != null) {
            localVarFormParams.put("desktop_app_join_url", desktopAppJoinUrl);
        }

        if (externalDisplayId != null) {
            localVarFormParams.put("external_display_id", externalDisplayId);
        }

        if (externalUniqueId != null) {
            localVarFormParams.put("external_unique_id", externalUniqueId);
        }

        if (joinUrl != null) {
            localVarFormParams.put("join_url", joinUrl);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addValidateBeforeCall(String token, String externalUniqueId, String joinUrl, CallsAddRequest callsAddRequest, String title, String createdBy, Integer dateStart, String desktopAppJoinUrl, String externalDisplayId, String users, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling add(Async)");
        }

        // verify the required parameter 'externalUniqueId' is set
        if (externalUniqueId == null) {
            throw new ApiException("Missing the required parameter 'externalUniqueId' when calling add(Async)");
        }

        // verify the required parameter 'joinUrl' is set
        if (joinUrl == null) {
            throw new ApiException("Missing the required parameter 'joinUrl' when calling add(Async)");
        }

        // verify the required parameter 'callsAddRequest' is set
        if (callsAddRequest == null) {
            throw new ApiException("Missing the required parameter 'callsAddRequest' when calling add(Async)");
        }

        return addCall(token, externalUniqueId, joinUrl, callsAddRequest, title, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, users, _callback);

    }


    private ApiResponse<CallsAddResponse> addWithHttpInfo(String token, String externalUniqueId, String joinUrl, CallsAddRequest callsAddRequest, String title, String createdBy, Integer dateStart, String desktopAppJoinUrl, String externalDisplayId, String users) throws ApiException {
        okhttp3.Call localVarCall = addValidateBeforeCall(token, externalUniqueId, joinUrl, callsAddRequest, title, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, users, null);
        Type localVarReturnType = new TypeToken<CallsAddResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAsync(String token, String externalUniqueId, String joinUrl, CallsAddRequest callsAddRequest, String title, String createdBy, Integer dateStart, String desktopAppJoinUrl, String externalDisplayId, String users, final ApiCallback<CallsAddResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addValidateBeforeCall(token, externalUniqueId, joinUrl, callsAddRequest, title, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, users, _callback);
        Type localVarReturnType = new TypeToken<CallsAddResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddRequestBuilder {
        private final String token;
        private final String externalUniqueId;
        private final String joinUrl;
        private String title;
        private String createdBy;
        private Integer dateStart;
        private String desktopAppJoinUrl;
        private String externalDisplayId;
        private String users;

        private AddRequestBuilder(String token, String externalUniqueId, String joinUrl) {
            this.token = token;
            this.externalUniqueId = externalUniqueId;
            this.joinUrl = joinUrl;
        }

        /**
         * Set title
         * @param title The name of the Call. (optional)
         * @return AddRequestBuilder
         */
        public AddRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set createdBy
         * @param createdBy The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required. (optional)
         * @return AddRequestBuilder
         */
        public AddRequestBuilder createdBy(String createdBy) {
            this.createdBy = createdBy;
            return this;
        }
        
        /**
         * Set dateStart
         * @param dateStart Call start time in UTC UNIX timestamp format (optional)
         * @return AddRequestBuilder
         */
        public AddRequestBuilder dateStart(Integer dateStart) {
            this.dateStart = dateStart;
            return this;
        }
        
        /**
         * Set desktopAppJoinUrl
         * @param desktopAppJoinUrl When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional)
         * @return AddRequestBuilder
         */
        public AddRequestBuilder desktopAppJoinUrl(String desktopAppJoinUrl) {
            this.desktopAppJoinUrl = desktopAppJoinUrl;
            return this;
        }
        
        /**
         * Set externalDisplayId
         * @param externalDisplayId An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object. (optional)
         * @return AddRequestBuilder
         */
        public AddRequestBuilder externalDisplayId(String externalDisplayId) {
            this.externalDisplayId = externalDisplayId;
            return this;
        }
        
        /**
         * Set users
         * @param users The list of users to register as participants in the Call. [Read more on how to specify users here](https://slack.dev). (optional)
         * @return AddRequestBuilder
         */
        public AddRequestBuilder users(String users) {
            this.users = users;
            return this;
        }
        
        /**
         * Build call for add
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CallsAddRequest callsAddRequest = buildBodyParams();
            return addCall(token, externalUniqueId, joinUrl, callsAddRequest, title, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, users, _callback);
        }

        private CallsAddRequest buildBodyParams() {
            CallsAddRequest callsAddRequest = new CallsAddRequest();
            callsAddRequest.title(this.title);
            callsAddRequest.createdBy(this.createdBy);
            callsAddRequest.dateStart(this.dateStart);
            callsAddRequest.desktopAppJoinUrl(this.desktopAppJoinUrl);
            callsAddRequest.externalDisplayId(this.externalDisplayId);
            callsAddRequest.externalUniqueId(this.externalUniqueId);
            callsAddRequest.joinUrl(this.joinUrl);
            callsAddRequest.users(this.users);
            return callsAddRequest;
        }

        /**
         * Execute add request
         * @return CallsAddResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public CallsAddResponse execute() throws ApiException {
            CallsAddRequest callsAddRequest = buildBodyParams();
            ApiResponse<CallsAddResponse> localVarResp = addWithHttpInfo(token, externalUniqueId, joinUrl, callsAddRequest, title, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, users);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute add request with HTTP info returned
         * @return ApiResponse&lt;CallsAddResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallsAddResponse> executeWithHttpInfo() throws ApiException {
            CallsAddRequest callsAddRequest = buildBodyParams();
            return addWithHttpInfo(token, externalUniqueId, joinUrl, callsAddRequest, title, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, users);
        }

        /**
         * Execute add request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallsAddResponse> _callback) throws ApiException {
            CallsAddRequest callsAddRequest = buildBodyParams();
            return addAsync(token, externalUniqueId, joinUrl, callsAddRequest, title, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, users, _callback);
        }
    }

    /**
     * 
     * Registers a new Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param externalUniqueId An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service. (required)
     * @param joinUrl The URL required for a client to join the Call. (required)
     * @param callsAddRequest  (required)
     * @return AddRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.add"> Documentation</a>
     */
    public AddRequestBuilder add(String token, String externalUniqueId, String joinUrl) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (externalUniqueId == null) throw new IllegalArgumentException("\"externalUniqueId\" is required but got null");
            

        if (joinUrl == null) throw new IllegalArgumentException("\"joinUrl\" is required but got null");
            

        return new AddRequestBuilder(token, externalUniqueId, joinUrl);
    }
    private okhttp3.Call addNewParticipantCall(String token, String id, String users, CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callsparticipantsAddNewParticipantRequest;

        // create path and map variables
        String localVarPath = "/calls.participants.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewParticipantValidateBeforeCall(String token, String id, String users, CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addNewParticipant(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addNewParticipant(Async)");
        }

        // verify the required parameter 'users' is set
        if (users == null) {
            throw new ApiException("Missing the required parameter 'users' when calling addNewParticipant(Async)");
        }

        // verify the required parameter 'callsparticipantsAddNewParticipantRequest' is set
        if (callsparticipantsAddNewParticipantRequest == null) {
            throw new ApiException("Missing the required parameter 'callsparticipantsAddNewParticipantRequest' when calling addNewParticipant(Async)");
        }

        return addNewParticipantCall(token, id, users, callsparticipantsAddNewParticipantRequest, _callback);

    }


    private ApiResponse<CallsparticipantsAddNewParticipantResponse> addNewParticipantWithHttpInfo(String token, String id, String users, CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewParticipantValidateBeforeCall(token, id, users, callsparticipantsAddNewParticipantRequest, null);
        Type localVarReturnType = new TypeToken<CallsparticipantsAddNewParticipantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewParticipantAsync(String token, String id, String users, CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest, final ApiCallback<CallsparticipantsAddNewParticipantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewParticipantValidateBeforeCall(token, id, users, callsparticipantsAddNewParticipantRequest, _callback);
        Type localVarReturnType = new TypeToken<CallsparticipantsAddNewParticipantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewParticipantRequestBuilder {
        private final String token;
        private final String id;
        private final String users;

        private AddNewParticipantRequestBuilder(String token, String id, String users) {
            this.token = token;
            this.id = id;
            this.users = users;
        }

        /**
         * Build call for addNewParticipant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest = buildBodyParams();
            return addNewParticipantCall(token, id, users, callsparticipantsAddNewParticipantRequest, _callback);
        }

        private CallsparticipantsAddNewParticipantRequest buildBodyParams() {
            CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest = new CallsparticipantsAddNewParticipantRequest();
            callsparticipantsAddNewParticipantRequest.id(this.id);
            callsparticipantsAddNewParticipantRequest.users(this.users);
            return callsparticipantsAddNewParticipantRequest;
        }

        /**
         * Execute addNewParticipant request
         * @return CallsparticipantsAddNewParticipantResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public CallsparticipantsAddNewParticipantResponse execute() throws ApiException {
            CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest = buildBodyParams();
            ApiResponse<CallsparticipantsAddNewParticipantResponse> localVarResp = addNewParticipantWithHttpInfo(token, id, users, callsparticipantsAddNewParticipantRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewParticipant request with HTTP info returned
         * @return ApiResponse&lt;CallsparticipantsAddNewParticipantResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallsparticipantsAddNewParticipantResponse> executeWithHttpInfo() throws ApiException {
            CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest = buildBodyParams();
            return addNewParticipantWithHttpInfo(token, id, users, callsparticipantsAddNewParticipantRequest);
        }

        /**
         * Execute addNewParticipant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallsparticipantsAddNewParticipantResponse> _callback) throws ApiException {
            CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest = buildBodyParams();
            return addNewParticipantAsync(token, id, users, callsparticipantsAddNewParticipantRequest, _callback);
        }
    }

    /**
     * 
     * Registers new participants added to a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](https://slack.dev) method. (required)
     * @param users The list of users to add as participants in the Call. [Read more on how to specify users here](https://slack.dev). (required)
     * @param callsparticipantsAddNewParticipantRequest  (required)
     * @return AddNewParticipantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.add"> Documentation</a>
     */
    public AddNewParticipantRequestBuilder addNewParticipant(String token, String id, String users) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (users == null) throw new IllegalArgumentException("\"users\" is required but got null");
            

        return new AddNewParticipantRequestBuilder(token, id, users);
    }
    private okhttp3.Call endCall(String token, String id, CallsEndRequest callsEndRequest, Integer duration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callsEndRequest;

        // create path and map variables
        String localVarPath = "/calls.end";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (duration != null) {
            localVarFormParams.put("duration", duration);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endValidateBeforeCall(String token, String id, CallsEndRequest callsEndRequest, Integer duration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling end(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling end(Async)");
        }

        // verify the required parameter 'callsEndRequest' is set
        if (callsEndRequest == null) {
            throw new ApiException("Missing the required parameter 'callsEndRequest' when calling end(Async)");
        }

        return endCall(token, id, callsEndRequest, duration, _callback);

    }


    private ApiResponse<CallsEndResponse> endWithHttpInfo(String token, String id, CallsEndRequest callsEndRequest, Integer duration) throws ApiException {
        okhttp3.Call localVarCall = endValidateBeforeCall(token, id, callsEndRequest, duration, null);
        Type localVarReturnType = new TypeToken<CallsEndResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call endAsync(String token, String id, CallsEndRequest callsEndRequest, Integer duration, final ApiCallback<CallsEndResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = endValidateBeforeCall(token, id, callsEndRequest, duration, _callback);
        Type localVarReturnType = new TypeToken<CallsEndResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EndRequestBuilder {
        private final String token;
        private final String id;
        private Integer duration;

        private EndRequestBuilder(String token, String id) {
            this.token = token;
            this.id = id;
        }

        /**
         * Set duration
         * @param duration Call duration in seconds (optional)
         * @return EndRequestBuilder
         */
        public EndRequestBuilder duration(Integer duration) {
            this.duration = duration;
            return this;
        }
        
        /**
         * Build call for end
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CallsEndRequest callsEndRequest = buildBodyParams();
            return endCall(token, id, callsEndRequest, duration, _callback);
        }

        private CallsEndRequest buildBodyParams() {
            CallsEndRequest callsEndRequest = new CallsEndRequest();
            callsEndRequest.duration(this.duration);
            callsEndRequest.id(this.id);
            return callsEndRequest;
        }

        /**
         * Execute end request
         * @return CallsEndResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public CallsEndResponse execute() throws ApiException {
            CallsEndRequest callsEndRequest = buildBodyParams();
            ApiResponse<CallsEndResponse> localVarResp = endWithHttpInfo(token, id, callsEndRequest, duration);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute end request with HTTP info returned
         * @return ApiResponse&lt;CallsEndResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallsEndResponse> executeWithHttpInfo() throws ApiException {
            CallsEndRequest callsEndRequest = buildBodyParams();
            return endWithHttpInfo(token, id, callsEndRequest, duration);
        }

        /**
         * Execute end request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallsEndResponse> _callback) throws ApiException {
            CallsEndRequest callsEndRequest = buildBodyParams();
            return endAsync(token, id, callsEndRequest, duration, _callback);
        }
    }

    /**
     * 
     * Ends a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned when registering the call using the [&#x60;calls.add&#x60;](https://slack.dev) method. (required)
     * @param callsEndRequest  (required)
     * @return EndRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.end"> Documentation</a>
     */
    public EndRequestBuilder end(String token, String id) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new EndRequestBuilder(token, id);
    }
    private okhttp3.Call infoCall(String token, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calls.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoValidateBeforeCall(String token, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling info(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling info(Async)");
        }

        return infoCall(token, id, _callback);

    }


    private ApiResponse<CallsInfoResponse> infoWithHttpInfo(String token, String id) throws ApiException {
        okhttp3.Call localVarCall = infoValidateBeforeCall(token, id, null);
        Type localVarReturnType = new TypeToken<CallsInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call infoAsync(String token, String id, final ApiCallback<CallsInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoValidateBeforeCall(token, id, _callback);
        Type localVarReturnType = new TypeToken<CallsInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InfoRequestBuilder {
        private final String token;
        private final String id;

        private InfoRequestBuilder(String token, String id) {
            this.token = token;
            this.id = id;
        }

        /**
         * Build call for info
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return infoCall(token, id, _callback);
        }


        /**
         * Execute info request
         * @return CallsInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public CallsInfoResponse execute() throws ApiException {
            ApiResponse<CallsInfoResponse> localVarResp = infoWithHttpInfo(token, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute info request with HTTP info returned
         * @return ApiResponse&lt;CallsInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallsInfoResponse> executeWithHttpInfo() throws ApiException {
            return infoWithHttpInfo(token, id);
        }

        /**
         * Execute info request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallsInfoResponse> _callback) throws ApiException {
            return infoAsync(token, id, _callback);
        }
    }

    /**
     * 
     * Returns information about a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:read&#x60; (required)
     * @param id &#x60;id&#x60; of the Call returned by the [&#x60;calls.add&#x60;](https://slack.dev) method. (required)
     * @return InfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.info"> Documentation</a>
     */
    public InfoRequestBuilder info(String token, String id) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new InfoRequestBuilder(token, id);
    }
    private okhttp3.Call registerRemovedCall(String token, String id, String users, CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callsparticipantsRegisterRemovedRequest;

        // create path and map variables
        String localVarPath = "/calls.participants.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerRemovedValidateBeforeCall(String token, String id, String users, CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling registerRemoved(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling registerRemoved(Async)");
        }

        // verify the required parameter 'users' is set
        if (users == null) {
            throw new ApiException("Missing the required parameter 'users' when calling registerRemoved(Async)");
        }

        // verify the required parameter 'callsparticipantsRegisterRemovedRequest' is set
        if (callsparticipantsRegisterRemovedRequest == null) {
            throw new ApiException("Missing the required parameter 'callsparticipantsRegisterRemovedRequest' when calling registerRemoved(Async)");
        }

        return registerRemovedCall(token, id, users, callsparticipantsRegisterRemovedRequest, _callback);

    }


    private ApiResponse<CallsparticipantsRegisterRemovedResponse> registerRemovedWithHttpInfo(String token, String id, String users, CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest) throws ApiException {
        okhttp3.Call localVarCall = registerRemovedValidateBeforeCall(token, id, users, callsparticipantsRegisterRemovedRequest, null);
        Type localVarReturnType = new TypeToken<CallsparticipantsRegisterRemovedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registerRemovedAsync(String token, String id, String users, CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest, final ApiCallback<CallsparticipantsRegisterRemovedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerRemovedValidateBeforeCall(token, id, users, callsparticipantsRegisterRemovedRequest, _callback);
        Type localVarReturnType = new TypeToken<CallsparticipantsRegisterRemovedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegisterRemovedRequestBuilder {
        private final String token;
        private final String id;
        private final String users;

        private RegisterRemovedRequestBuilder(String token, String id, String users) {
            this.token = token;
            this.id = id;
            this.users = users;
        }

        /**
         * Build call for registerRemoved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest = buildBodyParams();
            return registerRemovedCall(token, id, users, callsparticipantsRegisterRemovedRequest, _callback);
        }

        private CallsparticipantsRegisterRemovedRequest buildBodyParams() {
            CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest = new CallsparticipantsRegisterRemovedRequest();
            callsparticipantsRegisterRemovedRequest.id(this.id);
            callsparticipantsRegisterRemovedRequest.users(this.users);
            return callsparticipantsRegisterRemovedRequest;
        }

        /**
         * Execute registerRemoved request
         * @return CallsparticipantsRegisterRemovedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public CallsparticipantsRegisterRemovedResponse execute() throws ApiException {
            CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest = buildBodyParams();
            ApiResponse<CallsparticipantsRegisterRemovedResponse> localVarResp = registerRemovedWithHttpInfo(token, id, users, callsparticipantsRegisterRemovedRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registerRemoved request with HTTP info returned
         * @return ApiResponse&lt;CallsparticipantsRegisterRemovedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallsparticipantsRegisterRemovedResponse> executeWithHttpInfo() throws ApiException {
            CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest = buildBodyParams();
            return registerRemovedWithHttpInfo(token, id, users, callsparticipantsRegisterRemovedRequest);
        }

        /**
         * Execute registerRemoved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallsparticipantsRegisterRemovedResponse> _callback) throws ApiException {
            CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest = buildBodyParams();
            return registerRemovedAsync(token, id, users, callsparticipantsRegisterRemovedRequest, _callback);
        }
    }

    /**
     * 
     * Registers participants removed from a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](https://slack.dev) method. (required)
     * @param users The list of users to remove as participants in the Call. [Read more on how to specify users here](https://slack.dev). (required)
     * @param callsparticipantsRegisterRemovedRequest  (required)
     * @return RegisterRemovedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.remove"> Documentation</a>
     */
    public RegisterRemovedRequestBuilder registerRemoved(String token, String id, String users) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (users == null) throw new IllegalArgumentException("\"users\" is required but got null");
            

        return new RegisterRemovedRequestBuilder(token, id, users);
    }
    private okhttp3.Call updateCall(String token, String id, CallsUpdateRequest callsUpdateRequest, String title, String desktopAppJoinUrl, String joinUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callsUpdateRequest;

        // create path and map variables
        String localVarPath = "/calls.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (desktopAppJoinUrl != null) {
            localVarFormParams.put("desktop_app_join_url", desktopAppJoinUrl);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (joinUrl != null) {
            localVarFormParams.put("join_url", joinUrl);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String token, String id, CallsUpdateRequest callsUpdateRequest, String title, String desktopAppJoinUrl, String joinUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling update(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling update(Async)");
        }

        // verify the required parameter 'callsUpdateRequest' is set
        if (callsUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'callsUpdateRequest' when calling update(Async)");
        }

        return updateCall(token, id, callsUpdateRequest, title, desktopAppJoinUrl, joinUrl, _callback);

    }


    private ApiResponse<CallsUpdateResponse> updateWithHttpInfo(String token, String id, CallsUpdateRequest callsUpdateRequest, String title, String desktopAppJoinUrl, String joinUrl) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(token, id, callsUpdateRequest, title, desktopAppJoinUrl, joinUrl, null);
        Type localVarReturnType = new TypeToken<CallsUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(String token, String id, CallsUpdateRequest callsUpdateRequest, String title, String desktopAppJoinUrl, String joinUrl, final ApiCallback<CallsUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(token, id, callsUpdateRequest, title, desktopAppJoinUrl, joinUrl, _callback);
        Type localVarReturnType = new TypeToken<CallsUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final String token;
        private final String id;
        private String title;
        private String desktopAppJoinUrl;
        private String joinUrl;

        private UpdateRequestBuilder(String token, String id) {
            this.token = token;
            this.id = id;
        }

        /**
         * Set title
         * @param title The name of the Call. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set desktopAppJoinUrl
         * @param desktopAppJoinUrl When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder desktopAppJoinUrl(String desktopAppJoinUrl) {
            this.desktopAppJoinUrl = desktopAppJoinUrl;
            return this;
        }
        
        /**
         * Set joinUrl
         * @param joinUrl The URL required for a client to join the Call. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder joinUrl(String joinUrl) {
            this.joinUrl = joinUrl;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CallsUpdateRequest callsUpdateRequest = buildBodyParams();
            return updateCall(token, id, callsUpdateRequest, title, desktopAppJoinUrl, joinUrl, _callback);
        }

        private CallsUpdateRequest buildBodyParams() {
            CallsUpdateRequest callsUpdateRequest = new CallsUpdateRequest();
            callsUpdateRequest.title(this.title);
            callsUpdateRequest.desktopAppJoinUrl(this.desktopAppJoinUrl);
            callsUpdateRequest.id(this.id);
            callsUpdateRequest.joinUrl(this.joinUrl);
            return callsUpdateRequest;
        }

        /**
         * Execute update request
         * @return CallsUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public CallsUpdateResponse execute() throws ApiException {
            CallsUpdateRequest callsUpdateRequest = buildBodyParams();
            ApiResponse<CallsUpdateResponse> localVarResp = updateWithHttpInfo(token, id, callsUpdateRequest, title, desktopAppJoinUrl, joinUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;CallsUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallsUpdateResponse> executeWithHttpInfo() throws ApiException {
            CallsUpdateRequest callsUpdateRequest = buildBodyParams();
            return updateWithHttpInfo(token, id, callsUpdateRequest, title, desktopAppJoinUrl, joinUrl);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallsUpdateResponse> _callback) throws ApiException {
            CallsUpdateRequest callsUpdateRequest = buildBodyParams();
            return updateAsync(token, id, callsUpdateRequest, title, desktopAppJoinUrl, joinUrl, _callback);
        }
    }

    /**
     * 
     * Updates information about a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](https://slack.dev) method. (required)
     * @param callsUpdateRequest  (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.update"> Documentation</a>
     */
    public UpdateRequestBuilder update(String token, String id) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateRequestBuilder(token, id);
    }
}
