/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ReactionsAddRequest;
import com.konfigthis.client.model.ReactionsAddResponse;
import com.konfigthis.client.model.ReactionsAdddefaultResponse;
import com.konfigthis.client.model.ReactionsGetdefaultResponse;
import com.konfigthis.client.model.ReactionsListResponse;
import com.konfigthis.client.model.ReactionsListdefaultResponse;
import com.konfigthis.client.model.ReactionsRemoveRequest;
import com.konfigthis.client.model.ReactionsRemoveResponse;
import com.konfigthis.client.model.ReactionsRemovedefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReactionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReactionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReactionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCall(String token, String channel, String name, String timestamp, ReactionsAddRequest reactionsAddRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsAddRequest;

        // create path and map variables
        String localVarPath = "/reactions.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (timestamp != null) {
            localVarFormParams.put("timestamp", timestamp);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addValidateBeforeCall(String token, String channel, String name, String timestamp, ReactionsAddRequest reactionsAddRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling add(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling add(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling add(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling add(Async)");
        }

        // verify the required parameter 'reactionsAddRequest' is set
        if (reactionsAddRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsAddRequest' when calling add(Async)");
        }

        return addCall(token, channel, name, timestamp, reactionsAddRequest, _callback);

    }


    private ApiResponse<ReactionsAddResponse> addWithHttpInfo(String token, String channel, String name, String timestamp, ReactionsAddRequest reactionsAddRequest) throws ApiException {
        okhttp3.Call localVarCall = addValidateBeforeCall(token, channel, name, timestamp, reactionsAddRequest, null);
        Type localVarReturnType = new TypeToken<ReactionsAddResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAsync(String token, String channel, String name, String timestamp, ReactionsAddRequest reactionsAddRequest, final ApiCallback<ReactionsAddResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addValidateBeforeCall(token, channel, name, timestamp, reactionsAddRequest, _callback);
        Type localVarReturnType = new TypeToken<ReactionsAddResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddRequestBuilder {
        private final String token;
        private final String channel;
        private final String name;
        private final String timestamp;

        private AddRequestBuilder(String token, String channel, String name, String timestamp) {
            this.token = token;
            this.channel = channel;
            this.name = name;
            this.timestamp = timestamp;
        }

        /**
         * Build call for add
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReactionsAddRequest reactionsAddRequest = buildBodyParams();
            return addCall(token, channel, name, timestamp, reactionsAddRequest, _callback);
        }

        private ReactionsAddRequest buildBodyParams() {
            ReactionsAddRequest reactionsAddRequest = new ReactionsAddRequest();
            reactionsAddRequest.channel(this.channel);
            reactionsAddRequest.name(this.name);
            reactionsAddRequest.timestamp(this.timestamp);
            return reactionsAddRequest;
        }

        /**
         * Execute add request
         * @return ReactionsAddResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ReactionsAddResponse execute() throws ApiException {
            ReactionsAddRequest reactionsAddRequest = buildBodyParams();
            ApiResponse<ReactionsAddResponse> localVarResp = addWithHttpInfo(token, channel, name, timestamp, reactionsAddRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute add request with HTTP info returned
         * @return ApiResponse&lt;ReactionsAddResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReactionsAddResponse> executeWithHttpInfo() throws ApiException {
            ReactionsAddRequest reactionsAddRequest = buildBodyParams();
            return addWithHttpInfo(token, channel, name, timestamp, reactionsAddRequest);
        }

        /**
         * Execute add request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReactionsAddResponse> _callback) throws ApiException {
            ReactionsAddRequest reactionsAddRequest = buildBodyParams();
            return addAsync(token, channel, name, timestamp, reactionsAddRequest, _callback);
        }
    }

    /**
     * 
     * Adds a reaction to an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
     * @param channel Channel where the message to add reaction to was posted. (required)
     * @param name Reaction (emoji) name. (required)
     * @param timestamp Timestamp of the message to add reaction to. (required)
     * @param reactionsAddRequest  (required)
     * @return AddRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.add"> Documentation</a>
     */
    public AddRequestBuilder add(String token, String channel, String name, String timestamp) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channel == null) throw new IllegalArgumentException("\"channel\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (timestamp == null) throw new IllegalArgumentException("\"timestamp\" is required but got null");
            

        return new AddRequestBuilder(token, channel, name, timestamp);
    }
    private okhttp3.Call getCall(String token, String channel, String _file, String fileComment, Boolean full, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reactions.get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (fileComment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file_comment", fileComment));
        }

        if (full != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full", full));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String token, String channel, String _file, String fileComment, Boolean full, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling get(Async)");
        }

        return getCall(token, channel, _file, fileComment, full, timestamp, _callback);

    }


    private ApiResponse<List<Object>> getWithHttpInfo(String token, String channel, String _file, String fileComment, Boolean full, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(token, channel, _file, fileComment, full, timestamp, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String token, String channel, String _file, String fileComment, Boolean full, String timestamp, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(token, channel, _file, fileComment, full, timestamp, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private final String token;
        private String channel;
        private String _file;
        private String fileComment;
        private Boolean full;
        private String timestamp;

        private GetRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set channel
         * @param channel Channel where the message to get reactions for was posted. (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder channel(String channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set _file
         * @param _file File to get reactions for. (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set fileComment
         * @param fileComment File comment to get reactions for. (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder fileComment(String fileComment) {
            this.fileComment = fileComment;
            return this;
        }
        
        /**
         * Set full
         * @param full If true always return the complete reaction list. (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder full(Boolean full) {
            this.full = full;
            return this;
        }
        
        /**
         * Set timestamp
         * @param timestamp Timestamp of the message to get reactions for. (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder timestamp(String timestamp) {
            this.timestamp = timestamp;
            return this;
        }
        
        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(token, channel, _file, fileComment, full, timestamp, _callback);
        }


        /**
         * Execute get request
         * @return List&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public List<Object> execute() throws ApiException {
            ApiResponse<List<Object>> localVarResp = getWithHttpInfo(token, channel, _file, fileComment, full, timestamp);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Object&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Object>> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(token, channel, _file, fileComment, full, timestamp);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Object>> _callback) throws ApiException {
            return getAsync(token, channel, _file, fileComment, full, timestamp, _callback);
        }
    }

    /**
     * 
     * Gets reactions for an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.get"> Documentation</a>
     */
    public GetRequestBuilder get(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new GetRequestBuilder(token);
    }
    private okhttp3.Call listCall(String token, String user, Boolean full, Integer count, Integer page, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reactions.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (full != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full", full));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String token, String user, Boolean full, Integer count, Integer page, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling list(Async)");
        }

        return listCall(token, user, full, count, page, cursor, limit, _callback);

    }


    private ApiResponse<ReactionsListResponse> listWithHttpInfo(String token, String user, Boolean full, Integer count, Integer page, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(token, user, full, count, page, cursor, limit, null);
        Type localVarReturnType = new TypeToken<ReactionsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String token, String user, Boolean full, Integer count, Integer page, String cursor, Integer limit, final ApiCallback<ReactionsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(token, user, full, count, page, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<ReactionsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String token;
        private String user;
        private Boolean full;
        private Integer count;
        private Integer page;
        private String cursor;
        private Integer limit;

        private ListRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set user
         * @param user Show reactions made by this user. Defaults to the authed user. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set full
         * @param full If true always return the complete reaction list. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder full(Boolean full) {
            this.full = full;
            return this;
        }
        
        /**
         * Set count
         * @param count  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder count(Integer count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](https://slack.dev) for more details. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(token, user, full, count, page, cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return ReactionsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ReactionsListResponse execute() throws ApiException {
            ApiResponse<ReactionsListResponse> localVarResp = listWithHttpInfo(token, user, full, count, page, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;ReactionsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReactionsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(token, user, full, count, page, cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReactionsListResponse> _callback) throws ApiException {
            return listAsync(token, user, full, count, page, cursor, limit, _callback);
        }
    }

    /**
     * 
     * Lists reactions made by a user.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60; (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.list"> Documentation</a>
     */
    public ListRequestBuilder list(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListRequestBuilder(token);
    }
    private okhttp3.Call removeCall(String token, String name, ReactionsRemoveRequest reactionsRemoveRequest, String channel, String _file, String fileComment, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reactionsRemoveRequest;

        // create path and map variables
        String localVarPath = "/reactions.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (fileComment != null) {
            localVarFormParams.put("file_comment", fileComment);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (timestamp != null) {
            localVarFormParams.put("timestamp", timestamp);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeValidateBeforeCall(String token, String name, ReactionsRemoveRequest reactionsRemoveRequest, String channel, String _file, String fileComment, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling remove(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling remove(Async)");
        }

        // verify the required parameter 'reactionsRemoveRequest' is set
        if (reactionsRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'reactionsRemoveRequest' when calling remove(Async)");
        }

        return removeCall(token, name, reactionsRemoveRequest, channel, _file, fileComment, timestamp, _callback);

    }


    private ApiResponse<ReactionsRemoveResponse> removeWithHttpInfo(String token, String name, ReactionsRemoveRequest reactionsRemoveRequest, String channel, String _file, String fileComment, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = removeValidateBeforeCall(token, name, reactionsRemoveRequest, channel, _file, fileComment, timestamp, null);
        Type localVarReturnType = new TypeToken<ReactionsRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeAsync(String token, String name, ReactionsRemoveRequest reactionsRemoveRequest, String channel, String _file, String fileComment, String timestamp, final ApiCallback<ReactionsRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeValidateBeforeCall(token, name, reactionsRemoveRequest, channel, _file, fileComment, timestamp, _callback);
        Type localVarReturnType = new TypeToken<ReactionsRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveRequestBuilder {
        private final String token;
        private final String name;
        private String channel;
        private String _file;
        private String fileComment;
        private String timestamp;

        private RemoveRequestBuilder(String token, String name) {
            this.token = token;
            this.name = name;
        }

        /**
         * Set channel
         * @param channel Channel where the message to remove reaction from was posted. (optional)
         * @return RemoveRequestBuilder
         */
        public RemoveRequestBuilder channel(String channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set _file
         * @param _file File to remove reaction from. (optional)
         * @return RemoveRequestBuilder
         */
        public RemoveRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set fileComment
         * @param fileComment File comment to remove reaction from. (optional)
         * @return RemoveRequestBuilder
         */
        public RemoveRequestBuilder fileComment(String fileComment) {
            this.fileComment = fileComment;
            return this;
        }
        
        /**
         * Set timestamp
         * @param timestamp Timestamp of the message to remove reaction from. (optional)
         * @return RemoveRequestBuilder
         */
        public RemoveRequestBuilder timestamp(String timestamp) {
            this.timestamp = timestamp;
            return this;
        }
        
        /**
         * Build call for remove
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReactionsRemoveRequest reactionsRemoveRequest = buildBodyParams();
            return removeCall(token, name, reactionsRemoveRequest, channel, _file, fileComment, timestamp, _callback);
        }

        private ReactionsRemoveRequest buildBodyParams() {
            ReactionsRemoveRequest reactionsRemoveRequest = new ReactionsRemoveRequest();
            reactionsRemoveRequest.channel(this.channel);
            reactionsRemoveRequest._file(this._file);
            reactionsRemoveRequest.fileComment(this.fileComment);
            reactionsRemoveRequest.name(this.name);
            reactionsRemoveRequest.timestamp(this.timestamp);
            return reactionsRemoveRequest;
        }

        /**
         * Execute remove request
         * @return ReactionsRemoveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ReactionsRemoveResponse execute() throws ApiException {
            ReactionsRemoveRequest reactionsRemoveRequest = buildBodyParams();
            ApiResponse<ReactionsRemoveResponse> localVarResp = removeWithHttpInfo(token, name, reactionsRemoveRequest, channel, _file, fileComment, timestamp);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute remove request with HTTP info returned
         * @return ApiResponse&lt;ReactionsRemoveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReactionsRemoveResponse> executeWithHttpInfo() throws ApiException {
            ReactionsRemoveRequest reactionsRemoveRequest = buildBodyParams();
            return removeWithHttpInfo(token, name, reactionsRemoveRequest, channel, _file, fileComment, timestamp);
        }

        /**
         * Execute remove request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReactionsRemoveResponse> _callback) throws ApiException {
            ReactionsRemoveRequest reactionsRemoveRequest = buildBodyParams();
            return removeAsync(token, name, reactionsRemoveRequest, channel, _file, fileComment, timestamp, _callback);
        }
    }

    /**
     * 
     * Removes a reaction from an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60; (required)
     * @param name Reaction (emoji) name. (required)
     * @param reactionsRemoveRequest  (required)
     * @return RemoveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reactions.remove"> Documentation</a>
     */
    public RemoveRequestBuilder remove(String token, String name) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new RemoveRequestBuilder(token, name);
    }
}
