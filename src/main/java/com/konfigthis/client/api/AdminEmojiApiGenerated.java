/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminemojiAddEmojiRequest;
import com.konfigthis.client.model.AdminemojiAddEmojiResponse;
import com.konfigthis.client.model.AdminemojiAddEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiAliasAddRequest;
import com.konfigthis.client.model.AdminemojiAliasAddResponse;
import com.konfigthis.client.model.AdminemojiAliasAdddefaultResponse;
import com.konfigthis.client.model.AdminemojiListEnterpriseEmojiResponse;
import com.konfigthis.client.model.AdminemojiListEnterpriseEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojiRequest;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojiResponse;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiRenameEmojiRequest;
import com.konfigthis.client.model.AdminemojiRenameEmojiResponse;
import com.konfigthis.client.model.AdminemojiRenameEmojidefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminEmojiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminEmojiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminEmojiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addEmojiCall(String name, String token, String url, AdminemojiAddEmojiRequest adminemojiAddEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminemojiAddEmojiRequest;

        // create path and map variables
        String localVarPath = "/admin.emoji.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmojiValidateBeforeCall(String name, String token, String url, AdminemojiAddEmojiRequest adminemojiAddEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addEmoji(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addEmoji(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling addEmoji(Async)");
        }

        // verify the required parameter 'adminemojiAddEmojiRequest' is set
        if (adminemojiAddEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'adminemojiAddEmojiRequest' when calling addEmoji(Async)");
        }

        return addEmojiCall(name, token, url, adminemojiAddEmojiRequest, _callback);

    }


    private ApiResponse<AdminemojiAddEmojiResponse> addEmojiWithHttpInfo(String name, String token, String url, AdminemojiAddEmojiRequest adminemojiAddEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = addEmojiValidateBeforeCall(name, token, url, adminemojiAddEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AdminemojiAddEmojiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addEmojiAsync(String name, String token, String url, AdminemojiAddEmojiRequest adminemojiAddEmojiRequest, final ApiCallback<AdminemojiAddEmojiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmojiValidateBeforeCall(name, token, url, adminemojiAddEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminemojiAddEmojiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddEmojiRequestBuilder {
        private final String name;
        private final String token;
        private final String url;

        private AddEmojiRequestBuilder(String name, String token, String url) {
            this.name = name;
            this.token = token;
            this.url = url;
        }

        /**
         * Build call for addEmoji
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminemojiAddEmojiRequest adminemojiAddEmojiRequest = buildBodyParams();
            return addEmojiCall(name, token, url, adminemojiAddEmojiRequest, _callback);
        }

        private AdminemojiAddEmojiRequest buildBodyParams() {
            AdminemojiAddEmojiRequest adminemojiAddEmojiRequest = new AdminemojiAddEmojiRequest();
            adminemojiAddEmojiRequest.name(this.name);
            adminemojiAddEmojiRequest.token(this.token);
            adminemojiAddEmojiRequest.url(this.url);
            return adminemojiAddEmojiRequest;
        }

        /**
         * Execute addEmoji request
         * @return AdminemojiAddEmojiResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminemojiAddEmojiResponse execute() throws ApiException {
            AdminemojiAddEmojiRequest adminemojiAddEmojiRequest = buildBodyParams();
            ApiResponse<AdminemojiAddEmojiResponse> localVarResp = addEmojiWithHttpInfo(name, token, url, adminemojiAddEmojiRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addEmoji request with HTTP info returned
         * @return ApiResponse&lt;AdminemojiAddEmojiResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminemojiAddEmojiResponse> executeWithHttpInfo() throws ApiException {
            AdminemojiAddEmojiRequest adminemojiAddEmojiRequest = buildBodyParams();
            return addEmojiWithHttpInfo(name, token, url, adminemojiAddEmojiRequest);
        }

        /**
         * Execute addEmoji request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminemojiAddEmojiResponse> _callback) throws ApiException {
            AdminemojiAddEmojiRequest adminemojiAddEmojiRequest = buildBodyParams();
            return addEmojiAsync(name, token, url, adminemojiAddEmojiRequest, _callback);
        }
    }

    /**
     * 
     * Add an emoji.
     * @param name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param url The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. (required)
     * @param adminemojiAddEmojiRequest  (required)
     * @return AddEmojiRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.emoji.add"> Documentation</a>
     */
    public AddEmojiRequestBuilder addEmoji(String name, String token, String url) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new AddEmojiRequestBuilder(name, token, url);
    }
    private okhttp3.Call aliasAddCall(String aliasFor, String name, String token, AdminemojiAliasAddRequest adminemojiAliasAddRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminemojiAliasAddRequest;

        // create path and map variables
        String localVarPath = "/admin.emoji.addAlias";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aliasFor != null) {
            localVarFormParams.put("alias_for", aliasFor);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aliasAddValidateBeforeCall(String aliasFor, String name, String token, AdminemojiAliasAddRequest adminemojiAliasAddRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasFor' is set
        if (aliasFor == null) {
            throw new ApiException("Missing the required parameter 'aliasFor' when calling aliasAdd(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling aliasAdd(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling aliasAdd(Async)");
        }

        // verify the required parameter 'adminemojiAliasAddRequest' is set
        if (adminemojiAliasAddRequest == null) {
            throw new ApiException("Missing the required parameter 'adminemojiAliasAddRequest' when calling aliasAdd(Async)");
        }

        return aliasAddCall(aliasFor, name, token, adminemojiAliasAddRequest, _callback);

    }


    private ApiResponse<AdminemojiAliasAddResponse> aliasAddWithHttpInfo(String aliasFor, String name, String token, AdminemojiAliasAddRequest adminemojiAliasAddRequest) throws ApiException {
        okhttp3.Call localVarCall = aliasAddValidateBeforeCall(aliasFor, name, token, adminemojiAliasAddRequest, null);
        Type localVarReturnType = new TypeToken<AdminemojiAliasAddResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call aliasAddAsync(String aliasFor, String name, String token, AdminemojiAliasAddRequest adminemojiAliasAddRequest, final ApiCallback<AdminemojiAliasAddResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aliasAddValidateBeforeCall(aliasFor, name, token, adminemojiAliasAddRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminemojiAliasAddResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AliasAddRequestBuilder {
        private final String aliasFor;
        private final String name;
        private final String token;

        private AliasAddRequestBuilder(String aliasFor, String name, String token) {
            this.aliasFor = aliasFor;
            this.name = name;
            this.token = token;
        }

        /**
         * Build call for aliasAdd
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminemojiAliasAddRequest adminemojiAliasAddRequest = buildBodyParams();
            return aliasAddCall(aliasFor, name, token, adminemojiAliasAddRequest, _callback);
        }

        private AdminemojiAliasAddRequest buildBodyParams() {
            AdminemojiAliasAddRequest adminemojiAliasAddRequest = new AdminemojiAliasAddRequest();
            adminemojiAliasAddRequest.aliasFor(this.aliasFor);
            adminemojiAliasAddRequest.name(this.name);
            adminemojiAliasAddRequest.token(this.token);
            return adminemojiAliasAddRequest;
        }

        /**
         * Execute aliasAdd request
         * @return AdminemojiAliasAddResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminemojiAliasAddResponse execute() throws ApiException {
            AdminemojiAliasAddRequest adminemojiAliasAddRequest = buildBodyParams();
            ApiResponse<AdminemojiAliasAddResponse> localVarResp = aliasAddWithHttpInfo(aliasFor, name, token, adminemojiAliasAddRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute aliasAdd request with HTTP info returned
         * @return ApiResponse&lt;AdminemojiAliasAddResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminemojiAliasAddResponse> executeWithHttpInfo() throws ApiException {
            AdminemojiAliasAddRequest adminemojiAliasAddRequest = buildBodyParams();
            return aliasAddWithHttpInfo(aliasFor, name, token, adminemojiAliasAddRequest);
        }

        /**
         * Execute aliasAdd request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminemojiAliasAddResponse> _callback) throws ApiException {
            AdminemojiAliasAddRequest adminemojiAliasAddRequest = buildBodyParams();
            return aliasAddAsync(aliasFor, name, token, adminemojiAliasAddRequest, _callback);
        }
    }

    /**
     * 
     * Add an emoji alias.
     * @param aliasFor The alias of the emoji. (required)
     * @param name The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param adminemojiAliasAddRequest  (required)
     * @return AliasAddRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.emoji.addAlias"> Documentation</a>
     */
    public AliasAddRequestBuilder aliasAdd(String aliasFor, String name, String token) throws IllegalArgumentException {
        if (aliasFor == null) throw new IllegalArgumentException("\"aliasFor\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new AliasAddRequestBuilder(aliasFor, name, token);
    }
    private okhttp3.Call listEnterpriseEmojiCall(String token, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.emoji.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEnterpriseEmojiValidateBeforeCall(String token, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listEnterpriseEmoji(Async)");
        }

        return listEnterpriseEmojiCall(token, cursor, limit, _callback);

    }


    private ApiResponse<AdminemojiListEnterpriseEmojiResponse> listEnterpriseEmojiWithHttpInfo(String token, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listEnterpriseEmojiValidateBeforeCall(token, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdminemojiListEnterpriseEmojiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEnterpriseEmojiAsync(String token, String cursor, Integer limit, final ApiCallback<AdminemojiListEnterpriseEmojiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEnterpriseEmojiValidateBeforeCall(token, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdminemojiListEnterpriseEmojiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEnterpriseEmojiRequestBuilder {
        private final String token;
        private String cursor;
        private Integer limit;

        private ListEnterpriseEmojiRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
         * @return ListEnterpriseEmojiRequestBuilder
         */
        public ListEnterpriseEmojiRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
         * @return ListEnterpriseEmojiRequestBuilder
         */
        public ListEnterpriseEmojiRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listEnterpriseEmoji
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEnterpriseEmojiCall(token, cursor, limit, _callback);
        }


        /**
         * Execute listEnterpriseEmoji request
         * @return AdminemojiListEnterpriseEmojiResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminemojiListEnterpriseEmojiResponse execute() throws ApiException {
            ApiResponse<AdminemojiListEnterpriseEmojiResponse> localVarResp = listEnterpriseEmojiWithHttpInfo(token, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEnterpriseEmoji request with HTTP info returned
         * @return ApiResponse&lt;AdminemojiListEnterpriseEmojiResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminemojiListEnterpriseEmojiResponse> executeWithHttpInfo() throws ApiException {
            return listEnterpriseEmojiWithHttpInfo(token, cursor, limit);
        }

        /**
         * Execute listEnterpriseEmoji request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminemojiListEnterpriseEmojiResponse> _callback) throws ApiException {
            return listEnterpriseEmojiAsync(token, cursor, limit, _callback);
        }
    }

    /**
     * 
     * List emoji for an Enterprise Grid organization.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @return ListEnterpriseEmojiRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.emoji.list"> Documentation</a>
     */
    public ListEnterpriseEmojiRequestBuilder listEnterpriseEmoji(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListEnterpriseEmojiRequestBuilder(token);
    }
    private okhttp3.Call removeEnterpriseEmojiCall(String name, String token, AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminemojiRemoveEnterpriseEmojiRequest;

        // create path and map variables
        String localVarPath = "/admin.emoji.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEnterpriseEmojiValidateBeforeCall(String name, String token, AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling removeEnterpriseEmoji(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeEnterpriseEmoji(Async)");
        }

        // verify the required parameter 'adminemojiRemoveEnterpriseEmojiRequest' is set
        if (adminemojiRemoveEnterpriseEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'adminemojiRemoveEnterpriseEmojiRequest' when calling removeEnterpriseEmoji(Async)");
        }

        return removeEnterpriseEmojiCall(name, token, adminemojiRemoveEnterpriseEmojiRequest, _callback);

    }


    private ApiResponse<AdminemojiRemoveEnterpriseEmojiResponse> removeEnterpriseEmojiWithHttpInfo(String name, String token, AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = removeEnterpriseEmojiValidateBeforeCall(name, token, adminemojiRemoveEnterpriseEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AdminemojiRemoveEnterpriseEmojiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEnterpriseEmojiAsync(String name, String token, AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest, final ApiCallback<AdminemojiRemoveEnterpriseEmojiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEnterpriseEmojiValidateBeforeCall(name, token, adminemojiRemoveEnterpriseEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminemojiRemoveEnterpriseEmojiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEnterpriseEmojiRequestBuilder {
        private final String name;
        private final String token;

        private RemoveEnterpriseEmojiRequestBuilder(String name, String token) {
            this.name = name;
            this.token = token;
        }

        /**
         * Build call for removeEnterpriseEmoji
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest = buildBodyParams();
            return removeEnterpriseEmojiCall(name, token, adminemojiRemoveEnterpriseEmojiRequest, _callback);
        }

        private AdminemojiRemoveEnterpriseEmojiRequest buildBodyParams() {
            AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest = new AdminemojiRemoveEnterpriseEmojiRequest();
            adminemojiRemoveEnterpriseEmojiRequest.name(this.name);
            adminemojiRemoveEnterpriseEmojiRequest.token(this.token);
            return adminemojiRemoveEnterpriseEmojiRequest;
        }

        /**
         * Execute removeEnterpriseEmoji request
         * @return AdminemojiRemoveEnterpriseEmojiResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminemojiRemoveEnterpriseEmojiResponse execute() throws ApiException {
            AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest = buildBodyParams();
            ApiResponse<AdminemojiRemoveEnterpriseEmojiResponse> localVarResp = removeEnterpriseEmojiWithHttpInfo(name, token, adminemojiRemoveEnterpriseEmojiRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEnterpriseEmoji request with HTTP info returned
         * @return ApiResponse&lt;AdminemojiRemoveEnterpriseEmojiResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminemojiRemoveEnterpriseEmojiResponse> executeWithHttpInfo() throws ApiException {
            AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest = buildBodyParams();
            return removeEnterpriseEmojiWithHttpInfo(name, token, adminemojiRemoveEnterpriseEmojiRequest);
        }

        /**
         * Execute removeEnterpriseEmoji request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminemojiRemoveEnterpriseEmojiResponse> _callback) throws ApiException {
            AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest = buildBodyParams();
            return removeEnterpriseEmojiAsync(name, token, adminemojiRemoveEnterpriseEmojiRequest, _callback);
        }
    }

    /**
     * 
     * Remove an emoji across an Enterprise Grid organization
     * @param name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param adminemojiRemoveEnterpriseEmojiRequest  (required)
     * @return RemoveEnterpriseEmojiRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.emoji.remove"> Documentation</a>
     */
    public RemoveEnterpriseEmojiRequestBuilder removeEnterpriseEmoji(String name, String token) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new RemoveEnterpriseEmojiRequestBuilder(name, token);
    }
    private okhttp3.Call renameEmojiCall(String name, String newName, String token, AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminemojiRenameEmojiRequest;

        // create path and map variables
        String localVarPath = "/admin.emoji.rename";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (newName != null) {
            localVarFormParams.put("new_name", newName);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameEmojiValidateBeforeCall(String name, String newName, String token, AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling renameEmoji(Async)");
        }

        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling renameEmoji(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling renameEmoji(Async)");
        }

        // verify the required parameter 'adminemojiRenameEmojiRequest' is set
        if (adminemojiRenameEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'adminemojiRenameEmojiRequest' when calling renameEmoji(Async)");
        }

        return renameEmojiCall(name, newName, token, adminemojiRenameEmojiRequest, _callback);

    }


    private ApiResponse<AdminemojiRenameEmojiResponse> renameEmojiWithHttpInfo(String name, String newName, String token, AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = renameEmojiValidateBeforeCall(name, newName, token, adminemojiRenameEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AdminemojiRenameEmojiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renameEmojiAsync(String name, String newName, String token, AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest, final ApiCallback<AdminemojiRenameEmojiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameEmojiValidateBeforeCall(name, newName, token, adminemojiRenameEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminemojiRenameEmojiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenameEmojiRequestBuilder {
        private final String name;
        private final String newName;
        private final String token;

        private RenameEmojiRequestBuilder(String name, String newName, String token) {
            this.name = name;
            this.newName = newName;
            this.token = token;
        }

        /**
         * Build call for renameEmoji
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest = buildBodyParams();
            return renameEmojiCall(name, newName, token, adminemojiRenameEmojiRequest, _callback);
        }

        private AdminemojiRenameEmojiRequest buildBodyParams() {
            AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest = new AdminemojiRenameEmojiRequest();
            adminemojiRenameEmojiRequest.name(this.name);
            adminemojiRenameEmojiRequest.newName(this.newName);
            adminemojiRenameEmojiRequest.token(this.token);
            return adminemojiRenameEmojiRequest;
        }

        /**
         * Execute renameEmoji request
         * @return AdminemojiRenameEmojiResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminemojiRenameEmojiResponse execute() throws ApiException {
            AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest = buildBodyParams();
            ApiResponse<AdminemojiRenameEmojiResponse> localVarResp = renameEmojiWithHttpInfo(name, newName, token, adminemojiRenameEmojiRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renameEmoji request with HTTP info returned
         * @return ApiResponse&lt;AdminemojiRenameEmojiResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminemojiRenameEmojiResponse> executeWithHttpInfo() throws ApiException {
            AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest = buildBodyParams();
            return renameEmojiWithHttpInfo(name, newName, token, adminemojiRenameEmojiRequest);
        }

        /**
         * Execute renameEmoji request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminemojiRenameEmojiResponse> _callback) throws ApiException {
            AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest = buildBodyParams();
            return renameEmojiAsync(name, newName, token, adminemojiRenameEmojiRequest, _callback);
        }
    }

    /**
     * 
     * Rename an emoji.
     * @param name The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param newName The new name of the emoji. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param adminemojiRenameEmojiRequest  (required)
     * @return RenameEmojiRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.emoji.rename"> Documentation</a>
     */
    public RenameEmojiRequestBuilder renameEmoji(String name, String newName, String token) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (newName == null) throw new IllegalArgumentException("\"newName\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new RenameEmojiRequestBuilder(name, newName, token);
    }
}
