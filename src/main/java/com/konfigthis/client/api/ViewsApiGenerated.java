/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ViewsOpenResponse;
import com.konfigthis.client.model.ViewsOpendefaultResponse;
import com.konfigthis.client.model.ViewsPublishResponse;
import com.konfigthis.client.model.ViewsPublishdefaultResponse;
import com.konfigthis.client.model.ViewsPushResponse;
import com.konfigthis.client.model.ViewsPushdefaultResponse;
import com.konfigthis.client.model.ViewsUpdateResponse;
import com.konfigthis.client.model.ViewsUpdatedefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ViewsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ViewsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ViewsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call openCall(String token, String triggerId, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/views.open";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (triggerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trigger_id", triggerId));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openValidateBeforeCall(String token, String triggerId, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling open(Async)");
        }

        // verify the required parameter 'triggerId' is set
        if (triggerId == null) {
            throw new ApiException("Missing the required parameter 'triggerId' when calling open(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling open(Async)");
        }

        return openCall(token, triggerId, view, _callback);

    }


    private ApiResponse<ViewsOpenResponse> openWithHttpInfo(String token, String triggerId, String view) throws ApiException {
        okhttp3.Call localVarCall = openValidateBeforeCall(token, triggerId, view, null);
        Type localVarReturnType = new TypeToken<ViewsOpenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call openAsync(String token, String triggerId, String view, final ApiCallback<ViewsOpenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = openValidateBeforeCall(token, triggerId, view, _callback);
        Type localVarReturnType = new TypeToken<ViewsOpenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OpenRequestBuilder {
        private final String token;
        private final String triggerId;
        private final String view;

        private OpenRequestBuilder(String token, String triggerId, String view) {
            this.token = token;
            this.triggerId = triggerId;
            this.view = view;
        }

        /**
         * Build call for open
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the opened view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return openCall(token, triggerId, view, _callback);
        }


        /**
         * Execute open request
         * @return ViewsOpenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the opened view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public ViewsOpenResponse execute() throws ApiException {
            ApiResponse<ViewsOpenResponse> localVarResp = openWithHttpInfo(token, triggerId, view);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute open request with HTTP info returned
         * @return ApiResponse&lt;ViewsOpenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the opened view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ViewsOpenResponse> executeWithHttpInfo() throws ApiException {
            return openWithHttpInfo(token, triggerId, view);
        }

        /**
         * Execute open request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the opened view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ViewsOpenResponse> _callback) throws ApiException {
            return openAsync(token, triggerId, view, _callback);
        }
    }

    /**
     * 
     * Open a view for a user.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @param view A [view payload](https://slack.dev). This must be a JSON-encoded string. (required)
     * @return OpenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the opened view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.open"> Documentation</a>
     */
    public OpenRequestBuilder open(String token, String triggerId, String view) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (triggerId == null) throw new IllegalArgumentException("\"triggerId\" is required but got null");
            

        if (view == null) throw new IllegalArgumentException("\"view\" is required but got null");
            

        return new OpenRequestBuilder(token, triggerId, view);
    }
    private okhttp3.Call publishCall(String token, String userId, String view, String hash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/views.publish";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_id", userId));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishValidateBeforeCall(String token, String userId, String view, String hash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling publish(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling publish(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling publish(Async)");
        }

        return publishCall(token, userId, view, hash, _callback);

    }


    private ApiResponse<ViewsPublishResponse> publishWithHttpInfo(String token, String userId, String view, String hash) throws ApiException {
        okhttp3.Call localVarCall = publishValidateBeforeCall(token, userId, view, hash, null);
        Type localVarReturnType = new TypeToken<ViewsPublishResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call publishAsync(String token, String userId, String view, String hash, final ApiCallback<ViewsPublishResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishValidateBeforeCall(token, userId, view, hash, _callback);
        Type localVarReturnType = new TypeToken<ViewsPublishResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PublishRequestBuilder {
        private final String token;
        private final String userId;
        private final String view;
        private String hash;

        private PublishRequestBuilder(String token, String userId, String view) {
            this.token = token;
            this.userId = userId;
            this.view = view;
        }

        /**
         * Set hash
         * @param hash A string that represents view state to protect against possible race conditions. (optional)
         * @return PublishRequestBuilder
         */
        public PublishRequestBuilder hash(String hash) {
            this.hash = hash;
            return this;
        }
        
        /**
         * Build call for publish
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the published view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return publishCall(token, userId, view, hash, _callback);
        }


        /**
         * Execute publish request
         * @return ViewsPublishResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the published view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public ViewsPublishResponse execute() throws ApiException {
            ApiResponse<ViewsPublishResponse> localVarResp = publishWithHttpInfo(token, userId, view, hash);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute publish request with HTTP info returned
         * @return ApiResponse&lt;ViewsPublishResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the published view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ViewsPublishResponse> executeWithHttpInfo() throws ApiException {
            return publishWithHttpInfo(token, userId, view, hash);
        }

        /**
         * Execute publish request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the published view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ViewsPublishResponse> _callback) throws ApiException {
            return publishAsync(token, userId, view, hash, _callback);
        }
    }

    /**
     * 
     * Publish a static view for a User.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param userId &#x60;id&#x60; of the user you want publish a view to. (required)
     * @param view A [view payload](https://slack.dev). This must be a JSON-encoded string. (required)
     * @return PublishRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the published view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.publish"> Documentation</a>
     */
    public PublishRequestBuilder publish(String token, String userId, String view) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (view == null) throw new IllegalArgumentException("\"view\" is required but got null");
            

        return new PublishRequestBuilder(token, userId, view);
    }
    private okhttp3.Call pushCall(String token, String triggerId, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/views.push";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (triggerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trigger_id", triggerId));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushValidateBeforeCall(String token, String triggerId, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling push(Async)");
        }

        // verify the required parameter 'triggerId' is set
        if (triggerId == null) {
            throw new ApiException("Missing the required parameter 'triggerId' when calling push(Async)");
        }

        // verify the required parameter 'view' is set
        if (view == null) {
            throw new ApiException("Missing the required parameter 'view' when calling push(Async)");
        }

        return pushCall(token, triggerId, view, _callback);

    }


    private ApiResponse<ViewsPushResponse> pushWithHttpInfo(String token, String triggerId, String view) throws ApiException {
        okhttp3.Call localVarCall = pushValidateBeforeCall(token, triggerId, view, null);
        Type localVarReturnType = new TypeToken<ViewsPushResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pushAsync(String token, String triggerId, String view, final ApiCallback<ViewsPushResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushValidateBeforeCall(token, triggerId, view, _callback);
        Type localVarReturnType = new TypeToken<ViewsPushResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PushRequestBuilder {
        private final String token;
        private final String triggerId;
        private final String view;

        private PushRequestBuilder(String token, String triggerId, String view) {
            this.token = token;
            this.triggerId = triggerId;
            this.view = view;
        }

        /**
         * Build call for push
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the pushed view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return pushCall(token, triggerId, view, _callback);
        }


        /**
         * Execute push request
         * @return ViewsPushResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the pushed view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
         </table>
         */
        public ViewsPushResponse execute() throws ApiException {
            ApiResponse<ViewsPushResponse> localVarResp = pushWithHttpInfo(token, triggerId, view);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute push request with HTTP info returned
         * @return ApiResponse&lt;ViewsPushResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the pushed view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ViewsPushResponse> executeWithHttpInfo() throws ApiException {
            return pushWithHttpInfo(token, triggerId, view);
        }

        /**
         * Execute push request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the pushed view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ViewsPushResponse> _callback) throws ApiException {
            return pushAsync(token, triggerId, view, _callback);
        }
    }

    /**
     * 
     * Push a view onto the stack of a root view.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @param view A [view payload](https://slack.dev). This must be a JSON-encoded string. (required)
     * @return PushRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the pushed view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.push"> Documentation</a>
     */
    public PushRequestBuilder push(String token, String triggerId, String view) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (triggerId == null) throw new IllegalArgumentException("\"triggerId\" is required but got null");
            

        if (view == null) throw new IllegalArgumentException("\"view\" is required but got null");
            

        return new PushRequestBuilder(token, triggerId, view);
    }
    private okhttp3.Call updateCall(String token, String viewId, String externalId, String view, String hash, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/views.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (viewId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view_id", viewId));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String token, String viewId, String externalId, String view, String hash, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling update(Async)");
        }

        return updateCall(token, viewId, externalId, view, hash, _callback);

    }


    private ApiResponse<ViewsUpdateResponse> updateWithHttpInfo(String token, String viewId, String externalId, String view, String hash) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(token, viewId, externalId, view, hash, null);
        Type localVarReturnType = new TypeToken<ViewsUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(String token, String viewId, String externalId, String view, String hash, final ApiCallback<ViewsUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(token, viewId, externalId, view, hash, _callback);
        Type localVarReturnType = new TypeToken<ViewsUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final String token;
        private String viewId;
        private String externalId;
        private String view;
        private String hash;

        private UpdateRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set viewId
         * @param viewId A unique identifier of the view to be updated. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder viewId(String viewId) {
            this.viewId = viewId;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set view
         * @param view A [view object](https://slack.dev). This must be a JSON-encoded string. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder view(String view) {
            this.view = view;
            return this;
        }
        
        /**
         * Set hash
         * @param hash A string that represents view state to protect against possible race conditions. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder hash(String hash) {
            this.hash = hash;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the updated view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateCall(token, viewId, externalId, view, hash, _callback);
        }


        /**
         * Execute update request
         * @return ViewsUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the updated view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
         </table>
         */
        public ViewsUpdateResponse execute() throws ApiException {
            ApiResponse<ViewsUpdateResponse> localVarResp = updateWithHttpInfo(token, viewId, externalId, view, hash);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;ViewsUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the updated view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ViewsUpdateResponse> executeWithHttpInfo() throws ApiException {
            return updateWithHttpInfo(token, viewId, externalId, view, hash);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response includes the updated view payload. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ViewsUpdateResponse> _callback) throws ApiException {
            return updateAsync(token, viewId, externalId, view, hash, _callback);
        }
    }

    /**
     * 
     * Update an existing view.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response includes the updated view payload. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/views.update"> Documentation</a>
     */
    public UpdateRequestBuilder update(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new UpdateRequestBuilder(token);
    }
}
