/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OauthAccessResponse;
import com.konfigthis.client.model.OauthAccessdefaultResponse;
import com.konfigthis.client.model.OauthTokenResponse;
import com.konfigthis.client.model.OauthTokendefaultResponse;
import com.konfigthis.client.model.Oauthv2ExchangeTokenResponse;
import com.konfigthis.client.model.Oauthv2ExchangeTokendefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class OauthApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OauthApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public OauthApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call accessCall(String clientId, String clientSecret, String code, String redirectUri, Boolean singleChannel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth.access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (clientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_secret", clientSecret));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        if (singleChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("single_channel", singleChannel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessValidateBeforeCall(String clientId, String clientSecret, String code, String redirectUri, Boolean singleChannel, final ApiCallback _callback) throws ApiException {
        return accessCall(clientId, clientSecret, code, redirectUri, singleChannel, _callback);

    }


    private ApiResponse<OauthAccessResponse> accessWithHttpInfo(String clientId, String clientSecret, String code, String redirectUri, Boolean singleChannel) throws ApiException {
        okhttp3.Call localVarCall = accessValidateBeforeCall(clientId, clientSecret, code, redirectUri, singleChannel, null);
        Type localVarReturnType = new TypeToken<OauthAccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call accessAsync(String clientId, String clientSecret, String code, String redirectUri, Boolean singleChannel, final ApiCallback<OauthAccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessValidateBeforeCall(clientId, clientSecret, code, redirectUri, singleChannel, _callback);
        Type localVarReturnType = new TypeToken<OauthAccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AccessRequestBuilder {
        private String clientId;
        private String clientSecret;
        private String code;
        private String redirectUri;
        private Boolean singleChannel;

        private AccessRequestBuilder() {
        }

        /**
         * Set clientId
         * @param clientId Issued when you created your application. (optional)
         * @return AccessRequestBuilder
         */
        public AccessRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set clientSecret
         * @param clientSecret Issued when you created your application. (optional)
         * @return AccessRequestBuilder
         */
        public AccessRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Set code
         * @param code The &#x60;code&#x60; param returned via the OAuth callback. (optional)
         * @return AccessRequestBuilder
         */
        public AccessRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri This must match the originally submitted URI (if one was sent). (optional)
         * @return AccessRequestBuilder
         */
        public AccessRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set singleChannel
         * @param singleChannel Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps). (optional)
         * @return AccessRequestBuilder
         */
        public AccessRequestBuilder singleChannel(Boolean singleChannel) {
            this.singleChannel = singleChannel;
            return this;
        }
        
        /**
         * Build call for access
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful user token negotiation for a single scope </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return accessCall(clientId, clientSecret, code, redirectUri, singleChannel, _callback);
        }


        /**
         * Execute access request
         * @return OauthAccessResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful user token negotiation for a single scope </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public OauthAccessResponse execute() throws ApiException {
            ApiResponse<OauthAccessResponse> localVarResp = accessWithHttpInfo(clientId, clientSecret, code, redirectUri, singleChannel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute access request with HTTP info returned
         * @return ApiResponse&lt;OauthAccessResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful user token negotiation for a single scope </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OauthAccessResponse> executeWithHttpInfo() throws ApiException {
            return accessWithHttpInfo(clientId, clientSecret, code, redirectUri, singleChannel);
        }

        /**
         * Execute access request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful user token negotiation for a single scope </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OauthAccessResponse> _callback) throws ApiException {
            return accessAsync(clientId, clientSecret, code, redirectUri, singleChannel, _callback);
        }
    }

    /**
     * 
     * Exchanges a temporary OAuth verifier code for an access token.
     * @return AccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful user token negotiation for a single scope </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/oauth.access"> Documentation</a>
     */
    public AccessRequestBuilder access() throws IllegalArgumentException {
        return new AccessRequestBuilder();
    }
    private okhttp3.Call exchangeTokenCall(String code, String clientId, String clientSecret, String redirectUri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth.v2.access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (clientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_secret", clientSecret));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exchangeTokenValidateBeforeCall(String code, String clientId, String clientSecret, String redirectUri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling exchangeToken(Async)");
        }

        return exchangeTokenCall(code, clientId, clientSecret, redirectUri, _callback);

    }


    private ApiResponse<Oauthv2ExchangeTokenResponse> exchangeTokenWithHttpInfo(String code, String clientId, String clientSecret, String redirectUri) throws ApiException {
        okhttp3.Call localVarCall = exchangeTokenValidateBeforeCall(code, clientId, clientSecret, redirectUri, null);
        Type localVarReturnType = new TypeToken<Oauthv2ExchangeTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call exchangeTokenAsync(String code, String clientId, String clientSecret, String redirectUri, final ApiCallback<Oauthv2ExchangeTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = exchangeTokenValidateBeforeCall(code, clientId, clientSecret, redirectUri, _callback);
        Type localVarReturnType = new TypeToken<Oauthv2ExchangeTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ExchangeTokenRequestBuilder {
        private final String code;
        private String clientId;
        private String clientSecret;
        private String redirectUri;

        private ExchangeTokenRequestBuilder(String code) {
            this.code = code;
        }

        /**
         * Set clientId
         * @param clientId Issued when you created your application. (optional)
         * @return ExchangeTokenRequestBuilder
         */
        public ExchangeTokenRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set clientSecret
         * @param clientSecret Issued when you created your application. (optional)
         * @return ExchangeTokenRequestBuilder
         */
        public ExchangeTokenRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri This must match the originally submitted URI (if one was sent). (optional)
         * @return ExchangeTokenRequestBuilder
         */
        public ExchangeTokenRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Build call for exchangeToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful token request with scopes for both a bot user and a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return exchangeTokenCall(code, clientId, clientSecret, redirectUri, _callback);
        }


        /**
         * Execute exchangeToken request
         * @return Oauthv2ExchangeTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful token request with scopes for both a bot user and a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public Oauthv2ExchangeTokenResponse execute() throws ApiException {
            ApiResponse<Oauthv2ExchangeTokenResponse> localVarResp = exchangeTokenWithHttpInfo(code, clientId, clientSecret, redirectUri);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute exchangeToken request with HTTP info returned
         * @return ApiResponse&lt;Oauthv2ExchangeTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful token request with scopes for both a bot user and a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Oauthv2ExchangeTokenResponse> executeWithHttpInfo() throws ApiException {
            return exchangeTokenWithHttpInfo(code, clientId, clientSecret, redirectUri);
        }

        /**
         * Execute exchangeToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful token request with scopes for both a bot user and a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Oauthv2ExchangeTokenResponse> _callback) throws ApiException {
            return exchangeTokenAsync(code, clientId, clientSecret, redirectUri, _callback);
        }
    }

    /**
     * 
     * Exchanges a temporary OAuth verifier code for an access token.
     * @param code The &#x60;code&#x60; param returned via the OAuth callback. (required)
     * @return ExchangeTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful token request with scopes for both a bot user and a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/oauth.v2.access"> Documentation</a>
     */
    public ExchangeTokenRequestBuilder exchangeToken(String code) throws IllegalArgumentException {
        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        return new ExchangeTokenRequestBuilder(code);
    }
    private okhttp3.Call tokenCall(String clientId, String clientSecret, String code, String redirectUri, Boolean singleChannel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth.token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (clientSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_secret", clientSecret));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirect_uri", redirectUri));
        }

        if (singleChannel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("single_channel", singleChannel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tokenValidateBeforeCall(String clientId, String clientSecret, String code, String redirectUri, Boolean singleChannel, final ApiCallback _callback) throws ApiException {
        return tokenCall(clientId, clientSecret, code, redirectUri, singleChannel, _callback);

    }


    private ApiResponse<OauthTokenResponse> tokenWithHttpInfo(String clientId, String clientSecret, String code, String redirectUri, Boolean singleChannel) throws ApiException {
        okhttp3.Call localVarCall = tokenValidateBeforeCall(clientId, clientSecret, code, redirectUri, singleChannel, null);
        Type localVarReturnType = new TypeToken<OauthTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call tokenAsync(String clientId, String clientSecret, String code, String redirectUri, Boolean singleChannel, final ApiCallback<OauthTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tokenValidateBeforeCall(clientId, clientSecret, code, redirectUri, singleChannel, _callback);
        Type localVarReturnType = new TypeToken<OauthTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TokenRequestBuilder {
        private String clientId;
        private String clientSecret;
        private String code;
        private String redirectUri;
        private Boolean singleChannel;

        private TokenRequestBuilder() {
        }

        /**
         * Set clientId
         * @param clientId Issued when you created your application. (optional)
         * @return TokenRequestBuilder
         */
        public TokenRequestBuilder clientId(String clientId) {
            this.clientId = clientId;
            return this;
        }
        
        /**
         * Set clientSecret
         * @param clientSecret Issued when you created your application. (optional)
         * @return TokenRequestBuilder
         */
        public TokenRequestBuilder clientSecret(String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }
        
        /**
         * Set code
         * @param code The &#x60;code&#x60; param returned via the OAuth callback. (optional)
         * @return TokenRequestBuilder
         */
        public TokenRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set redirectUri
         * @param redirectUri This must match the originally submitted URI (if one was sent). (optional)
         * @return TokenRequestBuilder
         */
        public TokenRequestBuilder redirectUri(String redirectUri) {
            this.redirectUri = redirectUri;
            return this;
        }
        
        /**
         * Set singleChannel
         * @param singleChannel Request the user to add your app only to a single channel. (optional)
         * @return TokenRequestBuilder
         */
        public TokenRequestBuilder singleChannel(Boolean singleChannel) {
            this.singleChannel = singleChannel;
            return this;
        }
        
        /**
         * Build call for token
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success example using a workspace app produces a very different kind of response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return tokenCall(clientId, clientSecret, code, redirectUri, singleChannel, _callback);
        }


        /**
         * Execute token request
         * @return OauthTokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success example using a workspace app produces a very different kind of response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public OauthTokenResponse execute() throws ApiException {
            ApiResponse<OauthTokenResponse> localVarResp = tokenWithHttpInfo(clientId, clientSecret, code, redirectUri, singleChannel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute token request with HTTP info returned
         * @return ApiResponse&lt;OauthTokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success example using a workspace app produces a very different kind of response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OauthTokenResponse> executeWithHttpInfo() throws ApiException {
            return tokenWithHttpInfo(clientId, clientSecret, code, redirectUri, singleChannel);
        }

        /**
         * Execute token request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success example using a workspace app produces a very different kind of response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OauthTokenResponse> _callback) throws ApiException {
            return tokenAsync(clientId, clientSecret, code, redirectUri, singleChannel, _callback);
        }
    }

    /**
     * 
     * Exchanges a temporary OAuth verifier code for a workspace token.
     * @return TokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success example using a workspace app produces a very different kind of response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/oauth.token"> Documentation</a>
     */
    public TokenRequestBuilder token() throws IllegalArgumentException {
        return new TokenRequestBuilder();
    }
}
