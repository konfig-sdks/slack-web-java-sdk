/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminappsApproveAppInstallationRequest;
import com.konfigthis.client.model.AdminappsApproveAppInstallationResponse;
import com.konfigthis.client.model.AdminappsApproveAppInstallationdefaultResponse;
import com.konfigthis.client.model.AdminappsRestrictAppRequest;
import com.konfigthis.client.model.AdminappsRestrictAppResponse;
import com.konfigthis.client.model.AdminappsRestrictAppdefaultResponse;
import com.konfigthis.client.model.AdminappsapprovedListResponse;
import com.konfigthis.client.model.AdminappsapprovedListdefaultResponse;
import com.konfigthis.client.model.AdminappsrequestsListResponse;
import com.konfigthis.client.model.AdminappsrequestsListdefaultResponse;
import com.konfigthis.client.model.AdminappsrestrictedGetListResponse;
import com.konfigthis.client.model.AdminappsrestrictedGetListdefaultResponse;
import com.konfigthis.client.model.AdminconversationsArchiveChannelRequest;
import com.konfigthis.client.model.AdminconversationsArchiveChannelResponse;
import com.konfigthis.client.model.AdminconversationsArchiveChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsConvertToPrivateChannelRequest;
import com.konfigthis.client.model.AdminconversationsConvertToPrivateChannelResponse;
import com.konfigthis.client.model.AdminconversationsConvertToPrivateChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsCreateChannelBasedConversationRequest;
import com.konfigthis.client.model.AdminconversationsCreateChannelBasedConversationResponse;
import com.konfigthis.client.model.AdminconversationsCreateChannelBasedConversationdefaultResponse;
import com.konfigthis.client.model.AdminconversationsDeleteChannelRequest;
import com.konfigthis.client.model.AdminconversationsDeleteChannelResponse;
import com.konfigthis.client.model.AdminconversationsDeleteChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsDisconnectSharedChannelRequest;
import com.konfigthis.client.model.AdminconversationsDisconnectSharedChannelResponse;
import com.konfigthis.client.model.AdminconversationsDisconnectSharedChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsGetConversationPrefsResponse;
import com.konfigthis.client.model.AdminconversationsGetConversationPrefsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsGetTeamsListResponse;
import com.konfigthis.client.model.AdminconversationsGetTeamsListdefaultResponse;
import com.konfigthis.client.model.AdminconversationsInviteUserToChannelRequest;
import com.konfigthis.client.model.AdminconversationsInviteUserToChannelResponse;
import com.konfigthis.client.model.AdminconversationsInviteUserToChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsRenameChannelRequest;
import com.konfigthis.client.model.AdminconversationsRenameChannelResponse;
import com.konfigthis.client.model.AdminconversationsRenameChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsSearchChannelsResponse;
import com.konfigthis.client.model.AdminconversationsSearchChannelsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsSetConversationPrefsRequest;
import com.konfigthis.client.model.AdminconversationsSetConversationPrefsResponse;
import com.konfigthis.client.model.AdminconversationsSetConversationPrefsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsSetTeamsWorkspaceConnectionRequest;
import com.konfigthis.client.model.AdminconversationsSetTeamsWorkspaceConnectionResponse;
import com.konfigthis.client.model.AdminconversationsSetTeamsWorkspaceConnectiondefaultResponse;
import com.konfigthis.client.model.AdminconversationsUnarchiveChannelRequest;
import com.konfigthis.client.model.AdminconversationsUnarchiveChannelResponse;
import com.konfigthis.client.model.AdminconversationsUnarchiveChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsekmListOriginalConnectedChannelInfoResponse;
import com.konfigthis.client.model.AdminconversationsekmListOriginalConnectedChannelInfodefaultResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessAddGroupIdpGroupsRequest;
import com.konfigthis.client.model.AdminconversationsrestrictAccessAddGroupIdpGroupsResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessAddGroupIdpGroupsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessListGroupsResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessListGroupsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessRemoveIdpGroupRequest;
import com.konfigthis.client.model.AdminconversationsrestrictAccessRemoveIdpGroupResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessRemoveIdpGroupdefaultResponse;
import com.konfigthis.client.model.AdminemojiAddEmojiRequest;
import com.konfigthis.client.model.AdminemojiAddEmojiResponse;
import com.konfigthis.client.model.AdminemojiAddEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiAliasAddRequest;
import com.konfigthis.client.model.AdminemojiAliasAddResponse;
import com.konfigthis.client.model.AdminemojiAliasAdddefaultResponse;
import com.konfigthis.client.model.AdminemojiListEnterpriseEmojiResponse;
import com.konfigthis.client.model.AdminemojiListEnterpriseEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojiRequest;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojiResponse;
import com.konfigthis.client.model.AdminemojiRemoveEnterpriseEmojidefaultResponse;
import com.konfigthis.client.model.AdminemojiRenameEmojiRequest;
import com.konfigthis.client.model.AdminemojiRenameEmojiResponse;
import com.konfigthis.client.model.AdminemojiRenameEmojidefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsApproveRequestRequest;
import com.konfigthis.client.model.AdmininviteRequestsApproveRequestResponse;
import com.konfigthis.client.model.AdmininviteRequestsApproveRequestdefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsDenyRequestResponse;
import com.konfigthis.client.model.AdmininviteRequestsDenyRequestdefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse;
import com.konfigthis.client.model.AdmininviteRequestsListPendingWorkspaceInviteRequestsdefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsapprovedListResponse;
import com.konfigthis.client.model.AdmininviteRequestsapprovedListdefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsdeniedListResponse;
import com.konfigthis.client.model.AdmininviteRequestsdeniedListdefaultResponse;
import com.konfigthis.client.model.AdminteamsCreateEnterpriseTeamRequest;
import com.konfigthis.client.model.AdminteamsCreateEnterpriseTeamResponse;
import com.konfigthis.client.model.AdminteamsCreateEnterpriseTeamdefaultResponse;
import com.konfigthis.client.model.AdminteamsListAllResponse;
import com.konfigthis.client.model.AdminteamsListAlldefaultResponse;
import com.konfigthis.client.model.AdminteamsadminsGetAllResponse;
import com.konfigthis.client.model.AdminteamsadminsGetAlldefaultResponse;
import com.konfigthis.client.model.AdminteamsownersListOwnersResponse;
import com.konfigthis.client.model.AdminteamsownersListOwnersdefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsGetInfoResponse;
import com.konfigthis.client.model.AdminteamssettingsGetInfodefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDefaultChannelsRequest;
import com.konfigthis.client.model.AdminteamssettingsSetDefaultChannelsResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDefaultChannelsdefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDescriptionRequest;
import com.konfigthis.client.model.AdminteamssettingsSetDescriptionResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDescriptiondefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest;
import com.konfigthis.client.model.AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDiscoverabilityOfWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetIconRequest;
import com.konfigthis.client.model.AdminteamssettingsSetIconResponse;
import com.konfigthis.client.model.AdminteamssettingsSetIcondefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetNameRequest;
import com.konfigthis.client.model.AdminteamssettingsSetNameResponse;
import com.konfigthis.client.model.AdminteamssettingsSetNamedefaultResponse;
import com.konfigthis.client.model.AdminusergroupsAddDefaultChannelsRequest;
import com.konfigthis.client.model.AdminusergroupsAddDefaultChannelsResponse;
import com.konfigthis.client.model.AdminusergroupsAddDefaultChannelsdefaultResponse;
import com.konfigthis.client.model.AdminusergroupsAssociateDefaultWorkspacesRequest;
import com.konfigthis.client.model.AdminusergroupsAssociateDefaultWorkspacesResponse;
import com.konfigthis.client.model.AdminusergroupsAssociateDefaultWorkspacesdefaultResponse;
import com.konfigthis.client.model.AdminusergroupsListChannelsGetResponse;
import com.konfigthis.client.model.AdminusergroupsListChannelsGetdefaultResponse;
import com.konfigthis.client.model.AdminusergroupsRemoveChannelsRequest;
import com.konfigthis.client.model.AdminusergroupsRemoveChannelsResponse;
import com.konfigthis.client.model.AdminusergroupsRemoveChannelsdefaultResponse;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserRequest;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserResponse;
import com.konfigthis.client.model.AdminusersAddWorkspaceUserdefaultResponse;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspaceRequest;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspaceResponse;
import com.konfigthis.client.model.AdminusersInviteUserToWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminusersListWorkspaceUsersResponse;
import com.konfigthis.client.model.AdminusersListWorkspaceUsersdefaultResponse;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspaceRequest;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspaceResponse;
import com.konfigthis.client.model.AdminusersRemoveUserFromWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminusersSetAdminUserRequest;
import com.konfigthis.client.model.AdminusersSetAdminUserResponse;
import com.konfigthis.client.model.AdminusersSetAdminUserdefaultResponse;
import com.konfigthis.client.model.AdminusersSetExpirationGuestRequest;
import com.konfigthis.client.model.AdminusersSetExpirationGuestResponse;
import com.konfigthis.client.model.AdminusersSetExpirationGuestdefaultResponse;
import com.konfigthis.client.model.AdminusersSetRegularUserRequest;
import com.konfigthis.client.model.AdminusersSetRegularUserResponse;
import com.konfigthis.client.model.AdminusersSetRegularUserdefaultResponse;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerRequest;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerResponse;
import com.konfigthis.client.model.AdminusersSetWorkspaceOwnerdefaultResponse;
import com.konfigthis.client.model.AdminuserssessionInvalidateSessionRequest;
import com.konfigthis.client.model.AdminuserssessionInvalidateSessionResponse;
import com.konfigthis.client.model.AdminuserssessionInvalidateSessiondefaultResponse;
import com.konfigthis.client.model.AdminuserssessionResetSessionsRequest;
import com.konfigthis.client.model.AdminuserssessionResetSessionsResponse;
import com.konfigthis.client.model.AdminuserssessionResetSessionsdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addDefaultChannelsCall(String token, String channelIds, String usergroupId, AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusergroupsAddDefaultChannelsRequest;

        // create path and map variables
        String localVarPath = "/admin.usergroups.addChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (usergroupId != null) {
            localVarFormParams.put("usergroup_id", usergroupId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDefaultChannelsValidateBeforeCall(String token, String channelIds, String usergroupId, AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addDefaultChannels(Async)");
        }

        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling addDefaultChannels(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling addDefaultChannels(Async)");
        }

        // verify the required parameter 'adminusergroupsAddDefaultChannelsRequest' is set
        if (adminusergroupsAddDefaultChannelsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusergroupsAddDefaultChannelsRequest' when calling addDefaultChannels(Async)");
        }

        return addDefaultChannelsCall(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId, _callback);

    }


    private ApiResponse<AdminusergroupsAddDefaultChannelsResponse> addDefaultChannelsWithHttpInfo(String token, String channelIds, String usergroupId, AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest, String teamId) throws ApiException {
        okhttp3.Call localVarCall = addDefaultChannelsValidateBeforeCall(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId, null);
        Type localVarReturnType = new TypeToken<AdminusergroupsAddDefaultChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDefaultChannelsAsync(String token, String channelIds, String usergroupId, AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest, String teamId, final ApiCallback<AdminusergroupsAddDefaultChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDefaultChannelsValidateBeforeCall(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminusergroupsAddDefaultChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddDefaultChannelsRequestBuilder {
        private final String token;
        private final String channelIds;
        private final String usergroupId;
        private String teamId;

        private AddDefaultChannelsRequestBuilder(String token, String channelIds, String usergroupId) {
            this.token = token;
            this.channelIds = channelIds;
            this.usergroupId = usergroupId;
        }

        /**
         * Set teamId
         * @param teamId The workspace to add default channels in. (optional)
         * @return AddDefaultChannelsRequestBuilder
         */
        public AddDefaultChannelsRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for addDefaultChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest = buildBodyParams();
            return addDefaultChannelsCall(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId, _callback);
        }

        private AdminusergroupsAddDefaultChannelsRequest buildBodyParams() {
            AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest = new AdminusergroupsAddDefaultChannelsRequest();
            adminusergroupsAddDefaultChannelsRequest.channelIds(this.channelIds);
            adminusergroupsAddDefaultChannelsRequest.teamId(this.teamId);
            adminusergroupsAddDefaultChannelsRequest.usergroupId(this.usergroupId);
            return adminusergroupsAddDefaultChannelsRequest;
        }

        /**
         * Execute addDefaultChannels request
         * @return AdminusergroupsAddDefaultChannelsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public AdminusergroupsAddDefaultChannelsResponse execute() throws ApiException {
            AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest = buildBodyParams();
            ApiResponse<AdminusergroupsAddDefaultChannelsResponse> localVarResp = addDefaultChannelsWithHttpInfo(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addDefaultChannels request with HTTP info returned
         * @return ApiResponse&lt;AdminusergroupsAddDefaultChannelsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusergroupsAddDefaultChannelsResponse> executeWithHttpInfo() throws ApiException {
            AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest = buildBodyParams();
            return addDefaultChannelsWithHttpInfo(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId);
        }

        /**
         * Execute addDefaultChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusergroupsAddDefaultChannelsResponse> _callback) throws ApiException {
            AdminusergroupsAddDefaultChannelsRequest adminusergroupsAddDefaultChannelsRequest = buildBodyParams();
            return addDefaultChannelsAsync(token, channelIds, usergroupId, adminusergroupsAddDefaultChannelsRequest, teamId, _callback);
        }
    }

    /**
     * 
     * Add one or more default channels to an IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma separated string of channel IDs. (required)
     * @param usergroupId ID of the IDP group to add default channels for. (required)
     * @param adminusergroupsAddDefaultChannelsRequest  (required)
     * @return AddDefaultChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addChannels"> Documentation</a>
     */
    public AddDefaultChannelsRequestBuilder addDefaultChannels(String token, String channelIds, String usergroupId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelIds == null) throw new IllegalArgumentException("\"channelIds\" is required but got null");
            

        if (usergroupId == null) throw new IllegalArgumentException("\"usergroupId\" is required but got null");
            

        return new AddDefaultChannelsRequestBuilder(token, channelIds, usergroupId);
    }
    private okhttp3.Call addEmojiCall(String name, String token, String url, AdminemojiAddEmojiRequest adminemojiAddEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminemojiAddEmojiRequest;

        // create path and map variables
        String localVarPath = "/admin.emoji.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addEmojiValidateBeforeCall(String name, String token, String url, AdminemojiAddEmojiRequest adminemojiAddEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addEmoji(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addEmoji(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling addEmoji(Async)");
        }

        // verify the required parameter 'adminemojiAddEmojiRequest' is set
        if (adminemojiAddEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'adminemojiAddEmojiRequest' when calling addEmoji(Async)");
        }

        return addEmojiCall(name, token, url, adminemojiAddEmojiRequest, _callback);

    }


    private ApiResponse<AdminemojiAddEmojiResponse> addEmojiWithHttpInfo(String name, String token, String url, AdminemojiAddEmojiRequest adminemojiAddEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = addEmojiValidateBeforeCall(name, token, url, adminemojiAddEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AdminemojiAddEmojiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addEmojiAsync(String name, String token, String url, AdminemojiAddEmojiRequest adminemojiAddEmojiRequest, final ApiCallback<AdminemojiAddEmojiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addEmojiValidateBeforeCall(name, token, url, adminemojiAddEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminemojiAddEmojiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddEmojiRequestBuilder {
        private final String name;
        private final String token;
        private final String url;

        private AddEmojiRequestBuilder(String name, String token, String url) {
            this.name = name;
            this.token = token;
            this.url = url;
        }

        /**
         * Build call for addEmoji
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminemojiAddEmojiRequest adminemojiAddEmojiRequest = buildBodyParams();
            return addEmojiCall(name, token, url, adminemojiAddEmojiRequest, _callback);
        }

        private AdminemojiAddEmojiRequest buildBodyParams() {
            AdminemojiAddEmojiRequest adminemojiAddEmojiRequest = new AdminemojiAddEmojiRequest();
            adminemojiAddEmojiRequest.name(this.name);
            adminemojiAddEmojiRequest.token(this.token);
            adminemojiAddEmojiRequest.url(this.url);
            return adminemojiAddEmojiRequest;
        }

        /**
         * Execute addEmoji request
         * @return AdminemojiAddEmojiResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminemojiAddEmojiResponse execute() throws ApiException {
            AdminemojiAddEmojiRequest adminemojiAddEmojiRequest = buildBodyParams();
            ApiResponse<AdminemojiAddEmojiResponse> localVarResp = addEmojiWithHttpInfo(name, token, url, adminemojiAddEmojiRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addEmoji request with HTTP info returned
         * @return ApiResponse&lt;AdminemojiAddEmojiResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminemojiAddEmojiResponse> executeWithHttpInfo() throws ApiException {
            AdminemojiAddEmojiRequest adminemojiAddEmojiRequest = buildBodyParams();
            return addEmojiWithHttpInfo(name, token, url, adminemojiAddEmojiRequest);
        }

        /**
         * Execute addEmoji request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminemojiAddEmojiResponse> _callback) throws ApiException {
            AdminemojiAddEmojiRequest adminemojiAddEmojiRequest = buildBodyParams();
            return addEmojiAsync(name, token, url, adminemojiAddEmojiRequest, _callback);
        }
    }

    /**
     * 
     * Add an emoji.
     * @param name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param url The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. (required)
     * @param adminemojiAddEmojiRequest  (required)
     * @return AddEmojiRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.emoji.add"> Documentation</a>
     */
    public AddEmojiRequestBuilder addEmoji(String name, String token, String url) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        return new AddEmojiRequestBuilder(name, token, url);
    }
    private okhttp3.Call addGroupIdpGroupsCall(String channelId, String groupId, String token, AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsrestrictAccessAddGroupIdpGroupsRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.restrictAccess.addGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (groupId != null) {
            localVarFormParams.put("group_id", groupId);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGroupIdpGroupsValidateBeforeCall(String channelId, String groupId, String token, AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addGroupIdpGroups(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addGroupIdpGroups(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addGroupIdpGroups(Async)");
        }

        // verify the required parameter 'adminconversationsrestrictAccessAddGroupIdpGroupsRequest' is set
        if (adminconversationsrestrictAccessAddGroupIdpGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsrestrictAccessAddGroupIdpGroupsRequest' when calling addGroupIdpGroups(Async)");
        }

        return addGroupIdpGroupsCall(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId, _callback);

    }


    private ApiResponse<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> addGroupIdpGroupsWithHttpInfo(String channelId, String groupId, String token, AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest, String teamId) throws ApiException {
        okhttp3.Call localVarCall = addGroupIdpGroupsValidateBeforeCall(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId, null);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addGroupIdpGroupsAsync(String channelId, String groupId, String token, AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest, String teamId, final ApiCallback<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGroupIdpGroupsValidateBeforeCall(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddGroupIdpGroupsRequestBuilder {
        private final String channelId;
        private final String groupId;
        private final String token;
        private String teamId;

        private AddGroupIdpGroupsRequestBuilder(String channelId, String groupId, String token) {
            this.channelId = channelId;
            this.groupId = groupId;
            this.token = token;
        }

        /**
         * Set teamId
         * @param teamId The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
         * @return AddGroupIdpGroupsRequestBuilder
         */
        public AddGroupIdpGroupsRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for addGroupIdpGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest = buildBodyParams();
            return addGroupIdpGroupsCall(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId, _callback);
        }

        private AdminconversationsrestrictAccessAddGroupIdpGroupsRequest buildBodyParams() {
            AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest = new AdminconversationsrestrictAccessAddGroupIdpGroupsRequest();
            adminconversationsrestrictAccessAddGroupIdpGroupsRequest.channelId(this.channelId);
            adminconversationsrestrictAccessAddGroupIdpGroupsRequest.groupId(this.groupId);
            adminconversationsrestrictAccessAddGroupIdpGroupsRequest.teamId(this.teamId);
            adminconversationsrestrictAccessAddGroupIdpGroupsRequest.token(this.token);
            return adminconversationsrestrictAccessAddGroupIdpGroupsRequest;
        }

        /**
         * Execute addGroupIdpGroups request
         * @return AdminconversationsrestrictAccessAddGroupIdpGroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsrestrictAccessAddGroupIdpGroupsResponse execute() throws ApiException {
            AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest = buildBodyParams();
            ApiResponse<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> localVarResp = addGroupIdpGroupsWithHttpInfo(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addGroupIdpGroups request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsrestrictAccessAddGroupIdpGroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest = buildBodyParams();
            return addGroupIdpGroupsWithHttpInfo(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId);
        }

        /**
         * Execute addGroupIdpGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> _callback) throws ApiException {
            AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest = buildBodyParams();
            return addGroupIdpGroupsAsync(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId, _callback);
        }
    }

    /**
     * 
     * Add an allowlist of IDP groups for accessing a channel
     * @param channelId The channel to link this group to. (required)
     * @param groupId The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param adminconversationsrestrictAccessAddGroupIdpGroupsRequest  (required)
     * @return AddGroupIdpGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.restrictAccess.addGroup"> Documentation</a>
     */
    public AddGroupIdpGroupsRequestBuilder addGroupIdpGroups(String channelId, String groupId, String token) throws IllegalArgumentException {
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new AddGroupIdpGroupsRequestBuilder(channelId, groupId, token);
    }
    private okhttp3.Call addWorkspaceUserCall(String token, String teamId, String userId, AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest, String channelIds, Boolean isRestricted, Boolean isUltraRestricted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersAddWorkspaceUserRequest;

        // create path and map variables
        String localVarPath = "/admin.users.assign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (isRestricted != null) {
            localVarFormParams.put("is_restricted", isRestricted);
        }

        if (isUltraRestricted != null) {
            localVarFormParams.put("is_ultra_restricted", isUltraRestricted);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addWorkspaceUserValidateBeforeCall(String token, String teamId, String userId, AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest, String channelIds, Boolean isRestricted, Boolean isUltraRestricted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addWorkspaceUser(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling addWorkspaceUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addWorkspaceUser(Async)");
        }

        // verify the required parameter 'adminusersAddWorkspaceUserRequest' is set
        if (adminusersAddWorkspaceUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersAddWorkspaceUserRequest' when calling addWorkspaceUser(Async)");
        }

        return addWorkspaceUserCall(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted, _callback);

    }


    private ApiResponse<AdminusersAddWorkspaceUserResponse> addWorkspaceUserWithHttpInfo(String token, String teamId, String userId, AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest, String channelIds, Boolean isRestricted, Boolean isUltraRestricted) throws ApiException {
        okhttp3.Call localVarCall = addWorkspaceUserValidateBeforeCall(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted, null);
        Type localVarReturnType = new TypeToken<AdminusersAddWorkspaceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addWorkspaceUserAsync(String token, String teamId, String userId, AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest, String channelIds, Boolean isRestricted, Boolean isUltraRestricted, final ApiCallback<AdminusersAddWorkspaceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addWorkspaceUserValidateBeforeCall(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted, _callback);
        Type localVarReturnType = new TypeToken<AdminusersAddWorkspaceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddWorkspaceUserRequestBuilder {
        private final String token;
        private final String teamId;
        private final String userId;
        private String channelIds;
        private Boolean isRestricted;
        private Boolean isUltraRestricted;

        private AddWorkspaceUserRequestBuilder(String token, String teamId, String userId) {
            this.token = token;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Set channelIds
         * @param channelIds Comma separated values of channel IDs to add user in the new workspace. (optional)
         * @return AddWorkspaceUserRequestBuilder
         */
        public AddWorkspaceUserRequestBuilder channelIds(String channelIds) {
            this.channelIds = channelIds;
            return this;
        }
        
        /**
         * Set isRestricted
         * @param isRestricted True if user should be added to the workspace as a guest. (optional)
         * @return AddWorkspaceUserRequestBuilder
         */
        public AddWorkspaceUserRequestBuilder isRestricted(Boolean isRestricted) {
            this.isRestricted = isRestricted;
            return this;
        }
        
        /**
         * Set isUltraRestricted
         * @param isUltraRestricted True if user should be added to the workspace as a single-channel guest. (optional)
         * @return AddWorkspaceUserRequestBuilder
         */
        public AddWorkspaceUserRequestBuilder isUltraRestricted(Boolean isUltraRestricted) {
            this.isUltraRestricted = isUltraRestricted;
            return this;
        }
        
        /**
         * Build call for addWorkspaceUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest = buildBodyParams();
            return addWorkspaceUserCall(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted, _callback);
        }

        private AdminusersAddWorkspaceUserRequest buildBodyParams() {
            AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest = new AdminusersAddWorkspaceUserRequest();
            adminusersAddWorkspaceUserRequest.channelIds(this.channelIds);
            adminusersAddWorkspaceUserRequest.isRestricted(this.isRestricted);
            adminusersAddWorkspaceUserRequest.isUltraRestricted(this.isUltraRestricted);
            adminusersAddWorkspaceUserRequest.teamId(this.teamId);
            adminusersAddWorkspaceUserRequest.userId(this.userId);
            return adminusersAddWorkspaceUserRequest;
        }

        /**
         * Execute addWorkspaceUser request
         * @return AdminusersAddWorkspaceUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersAddWorkspaceUserResponse execute() throws ApiException {
            AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest = buildBodyParams();
            ApiResponse<AdminusersAddWorkspaceUserResponse> localVarResp = addWorkspaceUserWithHttpInfo(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addWorkspaceUser request with HTTP info returned
         * @return ApiResponse&lt;AdminusersAddWorkspaceUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersAddWorkspaceUserResponse> executeWithHttpInfo() throws ApiException {
            AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest = buildBodyParams();
            return addWorkspaceUserWithHttpInfo(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted);
        }

        /**
         * Execute addWorkspaceUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersAddWorkspaceUserResponse> _callback) throws ApiException {
            AdminusersAddWorkspaceUserRequest adminusersAddWorkspaceUserRequest = buildBodyParams();
            return addWorkspaceUserAsync(token, teamId, userId, adminusersAddWorkspaceUserRequest, channelIds, isRestricted, isUltraRestricted, _callback);
        }
    }

    /**
     * 
     * Add an Enterprise user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to add to the workspace. (required)
     * @param adminusersAddWorkspaceUserRequest  (required)
     * @return AddWorkspaceUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.assign"> Documentation</a>
     */
    public AddWorkspaceUserRequestBuilder addWorkspaceUser(String token, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new AddWorkspaceUserRequestBuilder(token, teamId, userId);
    }
    private okhttp3.Call aliasAddCall(String aliasFor, String name, String token, AdminemojiAliasAddRequest adminemojiAliasAddRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminemojiAliasAddRequest;

        // create path and map variables
        String localVarPath = "/admin.emoji.addAlias";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aliasFor != null) {
            localVarFormParams.put("alias_for", aliasFor);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aliasAddValidateBeforeCall(String aliasFor, String name, String token, AdminemojiAliasAddRequest adminemojiAliasAddRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasFor' is set
        if (aliasFor == null) {
            throw new ApiException("Missing the required parameter 'aliasFor' when calling aliasAdd(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling aliasAdd(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling aliasAdd(Async)");
        }

        // verify the required parameter 'adminemojiAliasAddRequest' is set
        if (adminemojiAliasAddRequest == null) {
            throw new ApiException("Missing the required parameter 'adminemojiAliasAddRequest' when calling aliasAdd(Async)");
        }

        return aliasAddCall(aliasFor, name, token, adminemojiAliasAddRequest, _callback);

    }


    private ApiResponse<AdminemojiAliasAddResponse> aliasAddWithHttpInfo(String aliasFor, String name, String token, AdminemojiAliasAddRequest adminemojiAliasAddRequest) throws ApiException {
        okhttp3.Call localVarCall = aliasAddValidateBeforeCall(aliasFor, name, token, adminemojiAliasAddRequest, null);
        Type localVarReturnType = new TypeToken<AdminemojiAliasAddResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call aliasAddAsync(String aliasFor, String name, String token, AdminemojiAliasAddRequest adminemojiAliasAddRequest, final ApiCallback<AdminemojiAliasAddResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = aliasAddValidateBeforeCall(aliasFor, name, token, adminemojiAliasAddRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminemojiAliasAddResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AliasAddRequestBuilder {
        private final String aliasFor;
        private final String name;
        private final String token;

        private AliasAddRequestBuilder(String aliasFor, String name, String token) {
            this.aliasFor = aliasFor;
            this.name = name;
            this.token = token;
        }

        /**
         * Build call for aliasAdd
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminemojiAliasAddRequest adminemojiAliasAddRequest = buildBodyParams();
            return aliasAddCall(aliasFor, name, token, adminemojiAliasAddRequest, _callback);
        }

        private AdminemojiAliasAddRequest buildBodyParams() {
            AdminemojiAliasAddRequest adminemojiAliasAddRequest = new AdminemojiAliasAddRequest();
            adminemojiAliasAddRequest.aliasFor(this.aliasFor);
            adminemojiAliasAddRequest.name(this.name);
            adminemojiAliasAddRequest.token(this.token);
            return adminemojiAliasAddRequest;
        }

        /**
         * Execute aliasAdd request
         * @return AdminemojiAliasAddResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminemojiAliasAddResponse execute() throws ApiException {
            AdminemojiAliasAddRequest adminemojiAliasAddRequest = buildBodyParams();
            ApiResponse<AdminemojiAliasAddResponse> localVarResp = aliasAddWithHttpInfo(aliasFor, name, token, adminemojiAliasAddRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute aliasAdd request with HTTP info returned
         * @return ApiResponse&lt;AdminemojiAliasAddResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminemojiAliasAddResponse> executeWithHttpInfo() throws ApiException {
            AdminemojiAliasAddRequest adminemojiAliasAddRequest = buildBodyParams();
            return aliasAddWithHttpInfo(aliasFor, name, token, adminemojiAliasAddRequest);
        }

        /**
         * Execute aliasAdd request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminemojiAliasAddResponse> _callback) throws ApiException {
            AdminemojiAliasAddRequest adminemojiAliasAddRequest = buildBodyParams();
            return aliasAddAsync(aliasFor, name, token, adminemojiAliasAddRequest, _callback);
        }
    }

    /**
     * 
     * Add an emoji alias.
     * @param aliasFor The alias of the emoji. (required)
     * @param name The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param adminemojiAliasAddRequest  (required)
     * @return AliasAddRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.emoji.addAlias"> Documentation</a>
     */
    public AliasAddRequestBuilder aliasAdd(String aliasFor, String name, String token) throws IllegalArgumentException {
        if (aliasFor == null) throw new IllegalArgumentException("\"aliasFor\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new AliasAddRequestBuilder(aliasFor, name, token);
    }
    private okhttp3.Call approveAppInstallationCall(String token, String appId, String requestId, String teamId, AdminappsApproveAppInstallationRequest adminappsApproveAppInstallationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminappsApproveAppInstallationRequest;

        // create path and map variables
        String localVarPath = "/admin.apps.approve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarFormParams.put("app_id", appId);
        }

        if (requestId != null) {
            localVarFormParams.put("request_id", requestId);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveAppInstallationValidateBeforeCall(String token, String appId, String requestId, String teamId, AdminappsApproveAppInstallationRequest adminappsApproveAppInstallationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling approveAppInstallation(Async)");
        }

        return approveAppInstallationCall(token, appId, requestId, teamId, adminappsApproveAppInstallationRequest, _callback);

    }


    private ApiResponse<AdminappsApproveAppInstallationResponse> approveAppInstallationWithHttpInfo(String token, String appId, String requestId, String teamId, AdminappsApproveAppInstallationRequest adminappsApproveAppInstallationRequest) throws ApiException {
        okhttp3.Call localVarCall = approveAppInstallationValidateBeforeCall(token, appId, requestId, teamId, adminappsApproveAppInstallationRequest, null);
        Type localVarReturnType = new TypeToken<AdminappsApproveAppInstallationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call approveAppInstallationAsync(String token, String appId, String requestId, String teamId, AdminappsApproveAppInstallationRequest adminappsApproveAppInstallationRequest, final ApiCallback<AdminappsApproveAppInstallationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveAppInstallationValidateBeforeCall(token, appId, requestId, teamId, adminappsApproveAppInstallationRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminappsApproveAppInstallationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApproveAppInstallationRequestBuilder {
        private final String token;
        private String appId;
        private String requestId;
        private String teamId;

        private ApproveAppInstallationRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set appId
         * @param appId The id of the app to approve. (optional)
         * @return ApproveAppInstallationRequestBuilder
         */
        public ApproveAppInstallationRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set requestId
         * @param requestId The id of the request to approve. (optional)
         * @return ApproveAppInstallationRequestBuilder
         */
        public ApproveAppInstallationRequestBuilder requestId(String requestId) {
            this.requestId = requestId;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId  (optional)
         * @return ApproveAppInstallationRequestBuilder
         */
        public ApproveAppInstallationRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for approveAppInstallation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminappsApproveAppInstallationRequest adminappsApproveAppInstallationRequest = buildBodyParams();
            return approveAppInstallationCall(token, appId, requestId, teamId, adminappsApproveAppInstallationRequest, _callback);
        }

        private AdminappsApproveAppInstallationRequest buildBodyParams() {
            AdminappsApproveAppInstallationRequest adminappsApproveAppInstallationRequest = new AdminappsApproveAppInstallationRequest();
            adminappsApproveAppInstallationRequest.appId(this.appId);
            adminappsApproveAppInstallationRequest.requestId(this.requestId);
            adminappsApproveAppInstallationRequest.teamId(this.teamId);
            return adminappsApproveAppInstallationRequest;
        }

        /**
         * Execute approveAppInstallation request
         * @return AdminappsApproveAppInstallationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminappsApproveAppInstallationResponse execute() throws ApiException {
            AdminappsApproveAppInstallationRequest adminappsApproveAppInstallationRequest = buildBodyParams();
            ApiResponse<AdminappsApproveAppInstallationResponse> localVarResp = approveAppInstallationWithHttpInfo(token, appId, requestId, teamId, adminappsApproveAppInstallationRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute approveAppInstallation request with HTTP info returned
         * @return ApiResponse&lt;AdminappsApproveAppInstallationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminappsApproveAppInstallationResponse> executeWithHttpInfo() throws ApiException {
            AdminappsApproveAppInstallationRequest adminappsApproveAppInstallationRequest = buildBodyParams();
            return approveAppInstallationWithHttpInfo(token, appId, requestId, teamId, adminappsApproveAppInstallationRequest);
        }

        /**
         * Execute approveAppInstallation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminappsApproveAppInstallationResponse> _callback) throws ApiException {
            AdminappsApproveAppInstallationRequest adminappsApproveAppInstallationRequest = buildBodyParams();
            return approveAppInstallationAsync(token, appId, requestId, teamId, adminappsApproveAppInstallationRequest, _callback);
        }
    }

    /**
     * 
     * Approve an app for installation on a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @return ApproveAppInstallationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.apps.approve"> Documentation</a>
     */
    public ApproveAppInstallationRequestBuilder approveAppInstallation(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ApproveAppInstallationRequestBuilder(token);
    }
    private okhttp3.Call approveRequestCall(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = admininviteRequestsApproveRequestRequest;

        // create path and map variables
        String localVarPath = "/admin.inviteRequests.approve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveRequestValidateBeforeCall(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling approveRequest(Async)");
        }

        return approveRequestCall(token, admininviteRequestsApproveRequestRequest, _callback);

    }


    private ApiResponse<AdmininviteRequestsApproveRequestResponse> approveRequestWithHttpInfo(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = approveRequestValidateBeforeCall(token, admininviteRequestsApproveRequestRequest, null);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsApproveRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call approveRequestAsync(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback<AdmininviteRequestsApproveRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveRequestValidateBeforeCall(token, admininviteRequestsApproveRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsApproveRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApproveRequestRequestBuilder {
        private final String inviteRequestId;
        private final String token;
        private String teamId;

        private ApproveRequestRequestBuilder(String inviteRequestId, String token) {
            this.inviteRequestId = inviteRequestId;
            this.token = token;
        }

        /**
         * Set teamId
         * @param teamId ID for the workspace where the invite request was made. (optional)
         * @return ApproveRequestRequestBuilder
         */
        public ApproveRequestRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for approveRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return approveRequestCall(token, admininviteRequestsApproveRequestRequest, _callback);
        }

        private AdmininviteRequestsApproveRequestRequest buildBodyParams() {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = new AdmininviteRequestsApproveRequestRequest();
            admininviteRequestsApproveRequestRequest.inviteRequestId(this.inviteRequestId);
            admininviteRequestsApproveRequestRequest.teamId(this.teamId);
            return admininviteRequestsApproveRequestRequest;
        }

        /**
         * Execute approveRequest request
         * @return AdmininviteRequestsApproveRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdmininviteRequestsApproveRequestResponse execute() throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            ApiResponse<AdmininviteRequestsApproveRequestResponse> localVarResp = approveRequestWithHttpInfo(token, admininviteRequestsApproveRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute approveRequest request with HTTP info returned
         * @return ApiResponse&lt;AdmininviteRequestsApproveRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdmininviteRequestsApproveRequestResponse> executeWithHttpInfo() throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return approveRequestWithHttpInfo(token, admininviteRequestsApproveRequestRequest);
        }

        /**
         * Execute approveRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdmininviteRequestsApproveRequestResponse> _callback) throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return approveRequestAsync(token, admininviteRequestsApproveRequestRequest, _callback);
        }
    }

    /**
     * 
     * Approve a workspace invite request.
     * @param token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @return ApproveRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.inviteRequests.approve"> Documentation</a>
     */
    public ApproveRequestRequestBuilder approveRequest(String inviteRequestId, String token) throws IllegalArgumentException {
        if (inviteRequestId == null) throw new IllegalArgumentException("\"inviteRequestId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ApproveRequestRequestBuilder(inviteRequestId, token);
    }
    private okhttp3.Call archiveChannelCall(String token, String channelId, AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsArchiveChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.archive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveChannelValidateBeforeCall(String token, String channelId, AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling archiveChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling archiveChannel(Async)");
        }

        // verify the required parameter 'adminconversationsArchiveChannelRequest' is set
        if (adminconversationsArchiveChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsArchiveChannelRequest' when calling archiveChannel(Async)");
        }

        return archiveChannelCall(token, channelId, adminconversationsArchiveChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsArchiveChannelResponse> archiveChannelWithHttpInfo(String token, String channelId, AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = archiveChannelValidateBeforeCall(token, channelId, adminconversationsArchiveChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsArchiveChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call archiveChannelAsync(String token, String channelId, AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest, final ApiCallback<AdminconversationsArchiveChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveChannelValidateBeforeCall(token, channelId, adminconversationsArchiveChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsArchiveChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ArchiveChannelRequestBuilder {
        private final String token;
        private final String channelId;

        private ArchiveChannelRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Build call for archiveChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest = buildBodyParams();
            return archiveChannelCall(token, channelId, adminconversationsArchiveChannelRequest, _callback);
        }

        private AdminconversationsArchiveChannelRequest buildBodyParams() {
            AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest = new AdminconversationsArchiveChannelRequest();
            adminconversationsArchiveChannelRequest.channelId(this.channelId);
            return adminconversationsArchiveChannelRequest;
        }

        /**
         * Execute archiveChannel request
         * @return AdminconversationsArchiveChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsArchiveChannelResponse execute() throws ApiException {
            AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsArchiveChannelResponse> localVarResp = archiveChannelWithHttpInfo(token, channelId, adminconversationsArchiveChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute archiveChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsArchiveChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsArchiveChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest = buildBodyParams();
            return archiveChannelWithHttpInfo(token, channelId, adminconversationsArchiveChannelRequest);
        }

        /**
         * Execute archiveChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsArchiveChannelResponse> _callback) throws ApiException {
            AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest = buildBodyParams();
            return archiveChannelAsync(token, channelId, adminconversationsArchiveChannelRequest, _callback);
        }
    }

    /**
     * 
     * Archive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to archive. (required)
     * @param adminconversationsArchiveChannelRequest  (required)
     * @return ArchiveChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.archive"> Documentation</a>
     */
    public ArchiveChannelRequestBuilder archiveChannel(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new ArchiveChannelRequestBuilder(token, channelId);
    }
    private okhttp3.Call associateDefaultWorkspacesCall(String token, String teamIds, String usergroupId, AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest, Boolean autoProvision, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusergroupsAssociateDefaultWorkspacesRequest;

        // create path and map variables
        String localVarPath = "/admin.usergroups.addTeams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoProvision != null) {
            localVarFormParams.put("auto_provision", autoProvision);
        }

        if (teamIds != null) {
            localVarFormParams.put("team_ids", teamIds);
        }

        if (usergroupId != null) {
            localVarFormParams.put("usergroup_id", usergroupId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateDefaultWorkspacesValidateBeforeCall(String token, String teamIds, String usergroupId, AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest, Boolean autoProvision, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling associateDefaultWorkspaces(Async)");
        }

        // verify the required parameter 'teamIds' is set
        if (teamIds == null) {
            throw new ApiException("Missing the required parameter 'teamIds' when calling associateDefaultWorkspaces(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling associateDefaultWorkspaces(Async)");
        }

        // verify the required parameter 'adminusergroupsAssociateDefaultWorkspacesRequest' is set
        if (adminusergroupsAssociateDefaultWorkspacesRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusergroupsAssociateDefaultWorkspacesRequest' when calling associateDefaultWorkspaces(Async)");
        }

        return associateDefaultWorkspacesCall(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision, _callback);

    }


    private ApiResponse<AdminusergroupsAssociateDefaultWorkspacesResponse> associateDefaultWorkspacesWithHttpInfo(String token, String teamIds, String usergroupId, AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest, Boolean autoProvision) throws ApiException {
        okhttp3.Call localVarCall = associateDefaultWorkspacesValidateBeforeCall(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision, null);
        Type localVarReturnType = new TypeToken<AdminusergroupsAssociateDefaultWorkspacesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call associateDefaultWorkspacesAsync(String token, String teamIds, String usergroupId, AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest, Boolean autoProvision, final ApiCallback<AdminusergroupsAssociateDefaultWorkspacesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateDefaultWorkspacesValidateBeforeCall(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision, _callback);
        Type localVarReturnType = new TypeToken<AdminusergroupsAssociateDefaultWorkspacesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssociateDefaultWorkspacesRequestBuilder {
        private final String token;
        private final String teamIds;
        private final String usergroupId;
        private Boolean autoProvision;

        private AssociateDefaultWorkspacesRequestBuilder(String token, String teamIds, String usergroupId) {
            this.token = token;
            this.teamIds = teamIds;
            this.usergroupId = usergroupId;
        }

        /**
         * Set autoProvision
         * @param autoProvision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
         * @return AssociateDefaultWorkspacesRequestBuilder
         */
        public AssociateDefaultWorkspacesRequestBuilder autoProvision(Boolean autoProvision) {
            this.autoProvision = autoProvision;
            return this;
        }
        
        /**
         * Build call for associateDefaultWorkspaces
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest = buildBodyParams();
            return associateDefaultWorkspacesCall(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision, _callback);
        }

        private AdminusergroupsAssociateDefaultWorkspacesRequest buildBodyParams() {
            AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest = new AdminusergroupsAssociateDefaultWorkspacesRequest();
            adminusergroupsAssociateDefaultWorkspacesRequest.autoProvision(this.autoProvision);
            adminusergroupsAssociateDefaultWorkspacesRequest.teamIds(this.teamIds);
            adminusergroupsAssociateDefaultWorkspacesRequest.usergroupId(this.usergroupId);
            return adminusergroupsAssociateDefaultWorkspacesRequest;
        }

        /**
         * Execute associateDefaultWorkspaces request
         * @return AdminusergroupsAssociateDefaultWorkspacesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusergroupsAssociateDefaultWorkspacesResponse execute() throws ApiException {
            AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest = buildBodyParams();
            ApiResponse<AdminusergroupsAssociateDefaultWorkspacesResponse> localVarResp = associateDefaultWorkspacesWithHttpInfo(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute associateDefaultWorkspaces request with HTTP info returned
         * @return ApiResponse&lt;AdminusergroupsAssociateDefaultWorkspacesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusergroupsAssociateDefaultWorkspacesResponse> executeWithHttpInfo() throws ApiException {
            AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest = buildBodyParams();
            return associateDefaultWorkspacesWithHttpInfo(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision);
        }

        /**
         * Execute associateDefaultWorkspaces request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusergroupsAssociateDefaultWorkspacesResponse> _callback) throws ApiException {
            AdminusergroupsAssociateDefaultWorkspacesRequest adminusergroupsAssociateDefaultWorkspacesRequest = buildBodyParams();
            return associateDefaultWorkspacesAsync(token, teamIds, usergroupId, adminusergroupsAssociateDefaultWorkspacesRequest, autoProvision, _callback);
        }
    }

    /**
     * 
     * Associate one or more default workspaces with an organization-wide IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param usergroupId An encoded usergroup (IDP Group) ID. (required)
     * @param adminusergroupsAssociateDefaultWorkspacesRequest  (required)
     * @return AssociateDefaultWorkspacesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.addTeams"> Documentation</a>
     */
    public AssociateDefaultWorkspacesRequestBuilder associateDefaultWorkspaces(String token, String teamIds, String usergroupId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamIds == null) throw new IllegalArgumentException("\"teamIds\" is required but got null");
            

        if (usergroupId == null) throw new IllegalArgumentException("\"usergroupId\" is required but got null");
            

        return new AssociateDefaultWorkspacesRequestBuilder(token, teamIds, usergroupId);
    }
    private okhttp3.Call convertToPrivateChannelCall(String token, String channelId, AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsConvertToPrivateChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.convertToPrivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertToPrivateChannelValidateBeforeCall(String token, String channelId, AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling convertToPrivateChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling convertToPrivateChannel(Async)");
        }

        // verify the required parameter 'adminconversationsConvertToPrivateChannelRequest' is set
        if (adminconversationsConvertToPrivateChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsConvertToPrivateChannelRequest' when calling convertToPrivateChannel(Async)");
        }

        return convertToPrivateChannelCall(token, channelId, adminconversationsConvertToPrivateChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsConvertToPrivateChannelResponse> convertToPrivateChannelWithHttpInfo(String token, String channelId, AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = convertToPrivateChannelValidateBeforeCall(token, channelId, adminconversationsConvertToPrivateChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsConvertToPrivateChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call convertToPrivateChannelAsync(String token, String channelId, AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest, final ApiCallback<AdminconversationsConvertToPrivateChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertToPrivateChannelValidateBeforeCall(token, channelId, adminconversationsConvertToPrivateChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsConvertToPrivateChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ConvertToPrivateChannelRequestBuilder {
        private final String token;
        private final String channelId;

        private ConvertToPrivateChannelRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Build call for convertToPrivateChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest = buildBodyParams();
            return convertToPrivateChannelCall(token, channelId, adminconversationsConvertToPrivateChannelRequest, _callback);
        }

        private AdminconversationsConvertToPrivateChannelRequest buildBodyParams() {
            AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest = new AdminconversationsConvertToPrivateChannelRequest();
            adminconversationsConvertToPrivateChannelRequest.channelId(this.channelId);
            return adminconversationsConvertToPrivateChannelRequest;
        }

        /**
         * Execute convertToPrivateChannel request
         * @return AdminconversationsConvertToPrivateChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsConvertToPrivateChannelResponse execute() throws ApiException {
            AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsConvertToPrivateChannelResponse> localVarResp = convertToPrivateChannelWithHttpInfo(token, channelId, adminconversationsConvertToPrivateChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute convertToPrivateChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsConvertToPrivateChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsConvertToPrivateChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest = buildBodyParams();
            return convertToPrivateChannelWithHttpInfo(token, channelId, adminconversationsConvertToPrivateChannelRequest);
        }

        /**
         * Execute convertToPrivateChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsConvertToPrivateChannelResponse> _callback) throws ApiException {
            AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest = buildBodyParams();
            return convertToPrivateChannelAsync(token, channelId, adminconversationsConvertToPrivateChannelRequest, _callback);
        }
    }

    /**
     * 
     * Convert a public channel to a private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to convert to private. (required)
     * @param adminconversationsConvertToPrivateChannelRequest  (required)
     * @return ConvertToPrivateChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.convertToPrivate"> Documentation</a>
     */
    public ConvertToPrivateChannelRequestBuilder convertToPrivateChannel(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new ConvertToPrivateChannelRequestBuilder(token, channelId);
    }
    private okhttp3.Call createChannelBasedConversationCall(String token, Boolean isPrivate, String name, AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest, String description, Boolean orgWide, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsCreateChannelBasedConversationRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (isPrivate != null) {
            localVarFormParams.put("is_private", isPrivate);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (orgWide != null) {
            localVarFormParams.put("org_wide", orgWide);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelBasedConversationValidateBeforeCall(String token, Boolean isPrivate, String name, AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest, String description, Boolean orgWide, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling createChannelBasedConversation(Async)");
        }

        // verify the required parameter 'isPrivate' is set
        if (isPrivate == null) {
            throw new ApiException("Missing the required parameter 'isPrivate' when calling createChannelBasedConversation(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createChannelBasedConversation(Async)");
        }

        // verify the required parameter 'adminconversationsCreateChannelBasedConversationRequest' is set
        if (adminconversationsCreateChannelBasedConversationRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsCreateChannelBasedConversationRequest' when calling createChannelBasedConversation(Async)");
        }

        return createChannelBasedConversationCall(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId, _callback);

    }


    private ApiResponse<AdminconversationsCreateChannelBasedConversationResponse> createChannelBasedConversationWithHttpInfo(String token, Boolean isPrivate, String name, AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest, String description, Boolean orgWide, String teamId) throws ApiException {
        okhttp3.Call localVarCall = createChannelBasedConversationValidateBeforeCall(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId, null);
        Type localVarReturnType = new TypeToken<AdminconversationsCreateChannelBasedConversationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createChannelBasedConversationAsync(String token, Boolean isPrivate, String name, AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest, String description, Boolean orgWide, String teamId, final ApiCallback<AdminconversationsCreateChannelBasedConversationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelBasedConversationValidateBeforeCall(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsCreateChannelBasedConversationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateChannelBasedConversationRequestBuilder {
        private final String token;
        private final Boolean isPrivate;
        private final String name;
        private String description;
        private Boolean orgWide;
        private String teamId;

        private CreateChannelBasedConversationRequestBuilder(String token, Boolean isPrivate, String name) {
            this.token = token;
            this.isPrivate = isPrivate;
            this.name = name;
        }

        /**
         * Set description
         * @param description Description of the public or private channel to create. (optional)
         * @return CreateChannelBasedConversationRequestBuilder
         */
        public CreateChannelBasedConversationRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set orgWide
         * @param orgWide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
         * @return CreateChannelBasedConversationRequestBuilder
         */
        public CreateChannelBasedConversationRequestBuilder orgWide(Boolean orgWide) {
            this.orgWide = orgWide;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
         * @return CreateChannelBasedConversationRequestBuilder
         */
        public CreateChannelBasedConversationRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for createChannelBasedConversation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest = buildBodyParams();
            return createChannelBasedConversationCall(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId, _callback);
        }

        private AdminconversationsCreateChannelBasedConversationRequest buildBodyParams() {
            AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest = new AdminconversationsCreateChannelBasedConversationRequest();
            adminconversationsCreateChannelBasedConversationRequest.description(this.description);
            adminconversationsCreateChannelBasedConversationRequest.isPrivate(this.isPrivate);
            adminconversationsCreateChannelBasedConversationRequest.name(this.name);
            adminconversationsCreateChannelBasedConversationRequest.orgWide(this.orgWide);
            adminconversationsCreateChannelBasedConversationRequest.teamId(this.teamId);
            return adminconversationsCreateChannelBasedConversationRequest;
        }

        /**
         * Execute createChannelBasedConversation request
         * @return AdminconversationsCreateChannelBasedConversationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsCreateChannelBasedConversationResponse execute() throws ApiException {
            AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest = buildBodyParams();
            ApiResponse<AdminconversationsCreateChannelBasedConversationResponse> localVarResp = createChannelBasedConversationWithHttpInfo(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createChannelBasedConversation request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsCreateChannelBasedConversationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsCreateChannelBasedConversationResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest = buildBodyParams();
            return createChannelBasedConversationWithHttpInfo(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId);
        }

        /**
         * Execute createChannelBasedConversation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsCreateChannelBasedConversationResponse> _callback) throws ApiException {
            AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest = buildBodyParams();
            return createChannelBasedConversationAsync(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId, _callback);
        }
    }

    /**
     * 
     * Create a public or private channel-based conversation.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param isPrivate When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param name Name of the public or private channel to create. (required)
     * @param adminconversationsCreateChannelBasedConversationRequest  (required)
     * @return CreateChannelBasedConversationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.create"> Documentation</a>
     */
    public CreateChannelBasedConversationRequestBuilder createChannelBasedConversation(String token, Boolean isPrivate, String name) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (isPrivate == null) throw new IllegalArgumentException("\"isPrivate\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateChannelBasedConversationRequestBuilder(token, isPrivate, name);
    }
    private okhttp3.Call createEnterpriseTeamCall(String token, String teamDomain, String teamName, AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest, String teamDescription, String teamDiscoverability, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamsCreateEnterpriseTeamRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamDescription != null) {
            localVarFormParams.put("team_description", teamDescription);
        }

        if (teamDiscoverability != null) {
            localVarFormParams.put("team_discoverability", teamDiscoverability);
        }

        if (teamDomain != null) {
            localVarFormParams.put("team_domain", teamDomain);
        }

        if (teamName != null) {
            localVarFormParams.put("team_name", teamName);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEnterpriseTeamValidateBeforeCall(String token, String teamDomain, String teamName, AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest, String teamDescription, String teamDiscoverability, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling createEnterpriseTeam(Async)");
        }

        // verify the required parameter 'teamDomain' is set
        if (teamDomain == null) {
            throw new ApiException("Missing the required parameter 'teamDomain' when calling createEnterpriseTeam(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling createEnterpriseTeam(Async)");
        }

        // verify the required parameter 'adminteamsCreateEnterpriseTeamRequest' is set
        if (adminteamsCreateEnterpriseTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamsCreateEnterpriseTeamRequest' when calling createEnterpriseTeam(Async)");
        }

        return createEnterpriseTeamCall(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability, _callback);

    }


    private ApiResponse<AdminteamsCreateEnterpriseTeamResponse> createEnterpriseTeamWithHttpInfo(String token, String teamDomain, String teamName, AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest, String teamDescription, String teamDiscoverability) throws ApiException {
        okhttp3.Call localVarCall = createEnterpriseTeamValidateBeforeCall(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability, null);
        Type localVarReturnType = new TypeToken<AdminteamsCreateEnterpriseTeamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEnterpriseTeamAsync(String token, String teamDomain, String teamName, AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest, String teamDescription, String teamDiscoverability, final ApiCallback<AdminteamsCreateEnterpriseTeamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEnterpriseTeamValidateBeforeCall(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability, _callback);
        Type localVarReturnType = new TypeToken<AdminteamsCreateEnterpriseTeamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEnterpriseTeamRequestBuilder {
        private final String token;
        private final String teamDomain;
        private final String teamName;
        private String teamDescription;
        private String teamDiscoverability;

        private CreateEnterpriseTeamRequestBuilder(String token, String teamDomain, String teamName) {
            this.token = token;
            this.teamDomain = teamDomain;
            this.teamName = teamName;
        }

        /**
         * Set teamDescription
         * @param teamDescription Description for the team. (optional)
         * @return CreateEnterpriseTeamRequestBuilder
         */
        public CreateEnterpriseTeamRequestBuilder teamDescription(String teamDescription) {
            this.teamDescription = teamDescription;
            return this;
        }
        
        /**
         * Set teamDiscoverability
         * @param teamDiscoverability Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;. (optional)
         * @return CreateEnterpriseTeamRequestBuilder
         */
        public CreateEnterpriseTeamRequestBuilder teamDiscoverability(String teamDiscoverability) {
            this.teamDiscoverability = teamDiscoverability;
            return this;
        }
        
        /**
         * Build call for createEnterpriseTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest = buildBodyParams();
            return createEnterpriseTeamCall(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability, _callback);
        }

        private AdminteamsCreateEnterpriseTeamRequest buildBodyParams() {
            AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest = new AdminteamsCreateEnterpriseTeamRequest();
            adminteamsCreateEnterpriseTeamRequest.teamDescription(this.teamDescription);
            adminteamsCreateEnterpriseTeamRequest.teamDiscoverability(this.teamDiscoverability);
            adminteamsCreateEnterpriseTeamRequest.teamDomain(this.teamDomain);
            adminteamsCreateEnterpriseTeamRequest.teamName(this.teamName);
            return adminteamsCreateEnterpriseTeamRequest;
        }

        /**
         * Execute createEnterpriseTeam request
         * @return AdminteamsCreateEnterpriseTeamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamsCreateEnterpriseTeamResponse execute() throws ApiException {
            AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest = buildBodyParams();
            ApiResponse<AdminteamsCreateEnterpriseTeamResponse> localVarResp = createEnterpriseTeamWithHttpInfo(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEnterpriseTeam request with HTTP info returned
         * @return ApiResponse&lt;AdminteamsCreateEnterpriseTeamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamsCreateEnterpriseTeamResponse> executeWithHttpInfo() throws ApiException {
            AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest = buildBodyParams();
            return createEnterpriseTeamWithHttpInfo(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability);
        }

        /**
         * Execute createEnterpriseTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamsCreateEnterpriseTeamResponse> _callback) throws ApiException {
            AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest = buildBodyParams();
            return createEnterpriseTeamAsync(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability, _callback);
        }
    }

    /**
     * 
     * Create an Enterprise team.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param teamDomain Team domain (for example, slacksoftballteam). (required)
     * @param teamName Team name (for example, Slack Softball Team). (required)
     * @param adminteamsCreateEnterpriseTeamRequest  (required)
     * @return CreateEnterpriseTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.create"> Documentation</a>
     */
    public CreateEnterpriseTeamRequestBuilder createEnterpriseTeam(String token, String teamDomain, String teamName) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamDomain == null) throw new IllegalArgumentException("\"teamDomain\" is required but got null");
            

        if (teamName == null) throw new IllegalArgumentException("\"teamName\" is required but got null");
            

        return new CreateEnterpriseTeamRequestBuilder(token, teamDomain, teamName);
    }
    private okhttp3.Call deleteChannelCall(String token, String channelId, AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsDeleteChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelValidateBeforeCall(String token, String channelId, AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling deleteChannel(Async)");
        }

        // verify the required parameter 'adminconversationsDeleteChannelRequest' is set
        if (adminconversationsDeleteChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsDeleteChannelRequest' when calling deleteChannel(Async)");
        }

        return deleteChannelCall(token, channelId, adminconversationsDeleteChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsDeleteChannelResponse> deleteChannelWithHttpInfo(String token, String channelId, AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(token, channelId, adminconversationsDeleteChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsDeleteChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteChannelAsync(String token, String channelId, AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest, final ApiCallback<AdminconversationsDeleteChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(token, channelId, adminconversationsDeleteChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsDeleteChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteChannelRequestBuilder {
        private final String token;
        private final String channelId;

        private DeleteChannelRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Build call for deleteChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest = buildBodyParams();
            return deleteChannelCall(token, channelId, adminconversationsDeleteChannelRequest, _callback);
        }

        private AdminconversationsDeleteChannelRequest buildBodyParams() {
            AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest = new AdminconversationsDeleteChannelRequest();
            adminconversationsDeleteChannelRequest.channelId(this.channelId);
            return adminconversationsDeleteChannelRequest;
        }

        /**
         * Execute deleteChannel request
         * @return AdminconversationsDeleteChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsDeleteChannelResponse execute() throws ApiException {
            AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsDeleteChannelResponse> localVarResp = deleteChannelWithHttpInfo(token, channelId, adminconversationsDeleteChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsDeleteChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsDeleteChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest = buildBodyParams();
            return deleteChannelWithHttpInfo(token, channelId, adminconversationsDeleteChannelRequest);
        }

        /**
         * Execute deleteChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsDeleteChannelResponse> _callback) throws ApiException {
            AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest = buildBodyParams();
            return deleteChannelAsync(token, channelId, adminconversationsDeleteChannelRequest, _callback);
        }
    }

    /**
     * 
     * Delete a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to delete. (required)
     * @param adminconversationsDeleteChannelRequest  (required)
     * @return DeleteChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.delete"> Documentation</a>
     */
    public DeleteChannelRequestBuilder deleteChannel(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new DeleteChannelRequestBuilder(token, channelId);
    }
    private okhttp3.Call denyRequestCall(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = admininviteRequestsApproveRequestRequest;

        // create path and map variables
        String localVarPath = "/admin.inviteRequests.deny";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyRequestValidateBeforeCall(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling denyRequest(Async)");
        }

        return denyRequestCall(token, admininviteRequestsApproveRequestRequest, _callback);

    }


    private ApiResponse<AdmininviteRequestsDenyRequestResponse> denyRequestWithHttpInfo(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = denyRequestValidateBeforeCall(token, admininviteRequestsApproveRequestRequest, null);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsDenyRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call denyRequestAsync(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback<AdmininviteRequestsDenyRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyRequestValidateBeforeCall(token, admininviteRequestsApproveRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsDenyRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DenyRequestRequestBuilder {
        private final String inviteRequestId;
        private final String token;
        private String teamId;

        private DenyRequestRequestBuilder(String inviteRequestId, String token) {
            this.inviteRequestId = inviteRequestId;
            this.token = token;
        }

        /**
         * Set teamId
         * @param teamId ID for the workspace where the invite request was made. (optional)
         * @return DenyRequestRequestBuilder
         */
        public DenyRequestRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for denyRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return denyRequestCall(token, admininviteRequestsApproveRequestRequest, _callback);
        }

        private AdmininviteRequestsApproveRequestRequest buildBodyParams() {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = new AdmininviteRequestsApproveRequestRequest();
            admininviteRequestsApproveRequestRequest.inviteRequestId(this.inviteRequestId);
            admininviteRequestsApproveRequestRequest.teamId(this.teamId);
            return admininviteRequestsApproveRequestRequest;
        }

        /**
         * Execute denyRequest request
         * @return AdmininviteRequestsDenyRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdmininviteRequestsDenyRequestResponse execute() throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            ApiResponse<AdmininviteRequestsDenyRequestResponse> localVarResp = denyRequestWithHttpInfo(token, admininviteRequestsApproveRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute denyRequest request with HTTP info returned
         * @return ApiResponse&lt;AdmininviteRequestsDenyRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdmininviteRequestsDenyRequestResponse> executeWithHttpInfo() throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return denyRequestWithHttpInfo(token, admininviteRequestsApproveRequestRequest);
        }

        /**
         * Execute denyRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdmininviteRequestsDenyRequestResponse> _callback) throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return denyRequestAsync(token, admininviteRequestsApproveRequestRequest, _callback);
        }
    }

    /**
     * 
     * Deny a workspace invite request.
     * @param token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @return DenyRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.inviteRequests.deny"> Documentation</a>
     */
    public DenyRequestRequestBuilder denyRequest(String inviteRequestId, String token) throws IllegalArgumentException {
        if (inviteRequestId == null) throw new IllegalArgumentException("\"inviteRequestId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new DenyRequestRequestBuilder(inviteRequestId, token);
    }
    private okhttp3.Call disconnectSharedChannelCall(String token, String channelId, AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest, String leavingTeamIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsDisconnectSharedChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.disconnectShared";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (leavingTeamIds != null) {
            localVarFormParams.put("leaving_team_ids", leavingTeamIds);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disconnectSharedChannelValidateBeforeCall(String token, String channelId, AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest, String leavingTeamIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling disconnectSharedChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling disconnectSharedChannel(Async)");
        }

        // verify the required parameter 'adminconversationsDisconnectSharedChannelRequest' is set
        if (adminconversationsDisconnectSharedChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsDisconnectSharedChannelRequest' when calling disconnectSharedChannel(Async)");
        }

        return disconnectSharedChannelCall(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds, _callback);

    }


    private ApiResponse<AdminconversationsDisconnectSharedChannelResponse> disconnectSharedChannelWithHttpInfo(String token, String channelId, AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest, String leavingTeamIds) throws ApiException {
        okhttp3.Call localVarCall = disconnectSharedChannelValidateBeforeCall(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds, null);
        Type localVarReturnType = new TypeToken<AdminconversationsDisconnectSharedChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disconnectSharedChannelAsync(String token, String channelId, AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest, String leavingTeamIds, final ApiCallback<AdminconversationsDisconnectSharedChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disconnectSharedChannelValidateBeforeCall(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsDisconnectSharedChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DisconnectSharedChannelRequestBuilder {
        private final String token;
        private final String channelId;
        private String leavingTeamIds;

        private DisconnectSharedChannelRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Set leavingTeamIds
         * @param leavingTeamIds The team to be removed from the channel. Currently only a single team id can be specified. (optional)
         * @return DisconnectSharedChannelRequestBuilder
         */
        public DisconnectSharedChannelRequestBuilder leavingTeamIds(String leavingTeamIds) {
            this.leavingTeamIds = leavingTeamIds;
            return this;
        }
        
        /**
         * Build call for disconnectSharedChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest = buildBodyParams();
            return disconnectSharedChannelCall(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds, _callback);
        }

        private AdminconversationsDisconnectSharedChannelRequest buildBodyParams() {
            AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest = new AdminconversationsDisconnectSharedChannelRequest();
            adminconversationsDisconnectSharedChannelRequest.channelId(this.channelId);
            adminconversationsDisconnectSharedChannelRequest.leavingTeamIds(this.leavingTeamIds);
            return adminconversationsDisconnectSharedChannelRequest;
        }

        /**
         * Execute disconnectSharedChannel request
         * @return AdminconversationsDisconnectSharedChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsDisconnectSharedChannelResponse execute() throws ApiException {
            AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsDisconnectSharedChannelResponse> localVarResp = disconnectSharedChannelWithHttpInfo(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute disconnectSharedChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsDisconnectSharedChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsDisconnectSharedChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest = buildBodyParams();
            return disconnectSharedChannelWithHttpInfo(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds);
        }

        /**
         * Execute disconnectSharedChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsDisconnectSharedChannelResponse> _callback) throws ApiException {
            AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest = buildBodyParams();
            return disconnectSharedChannelAsync(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds, _callback);
        }
    }

    /**
     * 
     * Disconnect a connected channel from one or more workspaces.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to be disconnected from some workspaces. (required)
     * @param adminconversationsDisconnectSharedChannelRequest  (required)
     * @return DisconnectSharedChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.disconnectShared"> Documentation</a>
     */
    public DisconnectSharedChannelRequestBuilder disconnectSharedChannel(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new DisconnectSharedChannelRequestBuilder(token, channelId);
    }
    private okhttp3.Call getAllCall(String token, String teamId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.teams.admins.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(String token, String teamId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getAll(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getAll(Async)");
        }

        return getAllCall(token, teamId, limit, cursor, _callback);

    }


    private ApiResponse<AdminteamsadminsGetAllResponse> getAllWithHttpInfo(String token, String teamId, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(token, teamId, limit, cursor, null);
        Type localVarReturnType = new TypeToken<AdminteamsadminsGetAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(String token, String teamId, Integer limit, String cursor, final ApiCallback<AdminteamsadminsGetAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(token, teamId, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<AdminteamsadminsGetAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {
        private final String token;
        private final String teamId;
        private Integer limit;
        private String cursor;

        private GetAllRequestBuilder(String token, String teamId) {
            this.token = token;
            this.teamId = teamId;
        }

        /**
         * Set limit
         * @param limit The maximum number of items to return. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
         * @return GetAllRequestBuilder
         */
        public GetAllRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(token, teamId, limit, cursor, _callback);
        }


        /**
         * Execute getAll request
         * @return AdminteamsadminsGetAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamsadminsGetAllResponse execute() throws ApiException {
            ApiResponse<AdminteamsadminsGetAllResponse> localVarResp = getAllWithHttpInfo(token, teamId, limit, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;AdminteamsadminsGetAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamsadminsGetAllResponse> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo(token, teamId, limit, cursor);
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamsadminsGetAllResponse> _callback) throws ApiException {
            return getAllAsync(token, teamId, limit, cursor, _callback);
        }
    }

    /**
     * 
     * List all of the admins on a given workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param teamId  (required)
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.admins.list"> Documentation</a>
     */
    public GetAllRequestBuilder getAll(String token, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new GetAllRequestBuilder(token, teamId);
    }
    private okhttp3.Call getConversationPrefsCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.getConversationPrefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_id", channelId));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConversationPrefsValidateBeforeCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getConversationPrefs(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getConversationPrefs(Async)");
        }

        return getConversationPrefsCall(token, channelId, _callback);

    }


    private ApiResponse<AdminconversationsGetConversationPrefsResponse> getConversationPrefsWithHttpInfo(String token, String channelId) throws ApiException {
        okhttp3.Call localVarCall = getConversationPrefsValidateBeforeCall(token, channelId, null);
        Type localVarReturnType = new TypeToken<AdminconversationsGetConversationPrefsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConversationPrefsAsync(String token, String channelId, final ApiCallback<AdminconversationsGetConversationPrefsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConversationPrefsValidateBeforeCall(token, channelId, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsGetConversationPrefsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConversationPrefsRequestBuilder {
        private final String token;
        private final String channelId;

        private GetConversationPrefsRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Build call for getConversationPrefs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConversationPrefsCall(token, channelId, _callback);
        }


        /**
         * Execute getConversationPrefs request
         * @return AdminconversationsGetConversationPrefsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsGetConversationPrefsResponse execute() throws ApiException {
            ApiResponse<AdminconversationsGetConversationPrefsResponse> localVarResp = getConversationPrefsWithHttpInfo(token, channelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConversationPrefs request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsGetConversationPrefsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsGetConversationPrefsResponse> executeWithHttpInfo() throws ApiException {
            return getConversationPrefsWithHttpInfo(token, channelId);
        }

        /**
         * Execute getConversationPrefs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsGetConversationPrefsResponse> _callback) throws ApiException {
            return getConversationPrefsAsync(token, channelId, _callback);
        }
    }

    /**
     * 
     * Get conversation preferences for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to get preferences for. (required)
     * @return GetConversationPrefsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getConversationPrefs"> Documentation</a>
     */
    public GetConversationPrefsRequestBuilder getConversationPrefs(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new GetConversationPrefsRequestBuilder(token, channelId);
    }
    private okhttp3.Call getInfoCall(String token, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String token, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getInfo(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getInfo(Async)");
        }

        return getInfoCall(token, teamId, _callback);

    }


    private ApiResponse<AdminteamssettingsGetInfoResponse> getInfoWithHttpInfo(String token, String teamId) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(token, teamId, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsGetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String token, String teamId, final ApiCallback<AdminteamssettingsGetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(token, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsGetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String token;
        private final String teamId;

        private GetInfoRequestBuilder(String token, String teamId) {
            this.token = token;
            this.teamId = teamId;
        }

        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(token, teamId, _callback);
        }


        /**
         * Execute getInfo request
         * @return AdminteamssettingsGetInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsGetInfoResponse execute() throws ApiException {
            ApiResponse<AdminteamssettingsGetInfoResponse> localVarResp = getInfoWithHttpInfo(token, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsGetInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsGetInfoResponse> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(token, teamId);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsGetInfoResponse> _callback) throws ApiException {
            return getInfoAsync(token, teamId, _callback);
        }
    }

    /**
     * 
     * Fetch information about settings in a workspace
     * @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param teamId  (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.info"> Documentation</a>
     */
    public GetInfoRequestBuilder getInfo(String token, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new GetInfoRequestBuilder(token, teamId);
    }
    private okhttp3.Call getListCall(String token, Integer limit, String cursor, String teamId, String enterpriseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.apps.restricted.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (enterpriseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enterprise_id", enterpriseId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListValidateBeforeCall(String token, Integer limit, String cursor, String teamId, String enterpriseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getList(Async)");
        }

        return getListCall(token, limit, cursor, teamId, enterpriseId, _callback);

    }


    private ApiResponse<AdminappsrestrictedGetListResponse> getListWithHttpInfo(String token, Integer limit, String cursor, String teamId, String enterpriseId) throws ApiException {
        okhttp3.Call localVarCall = getListValidateBeforeCall(token, limit, cursor, teamId, enterpriseId, null);
        Type localVarReturnType = new TypeToken<AdminappsrestrictedGetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getListAsync(String token, Integer limit, String cursor, String teamId, String enterpriseId, final ApiCallback<AdminappsrestrictedGetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListValidateBeforeCall(token, limit, cursor, teamId, enterpriseId, _callback);
        Type localVarReturnType = new TypeToken<AdminappsrestrictedGetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetListRequestBuilder {
        private final String token;
        private Integer limit;
        private String cursor;
        private String teamId;
        private String enterpriseId;

        private GetListRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set enterpriseId
         * @param enterpriseId  (optional)
         * @return GetListRequestBuilder
         */
        public GetListRequestBuilder enterpriseId(String enterpriseId) {
            this.enterpriseId = enterpriseId;
            return this;
        }
        
        /**
         * Build call for getList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getListCall(token, limit, cursor, teamId, enterpriseId, _callback);
        }


        /**
         * Execute getList request
         * @return AdminappsrestrictedGetListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminappsrestrictedGetListResponse execute() throws ApiException {
            ApiResponse<AdminappsrestrictedGetListResponse> localVarResp = getListWithHttpInfo(token, limit, cursor, teamId, enterpriseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getList request with HTTP info returned
         * @return ApiResponse&lt;AdminappsrestrictedGetListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminappsrestrictedGetListResponse> executeWithHttpInfo() throws ApiException {
            return getListWithHttpInfo(token, limit, cursor, teamId, enterpriseId);
        }

        /**
         * Execute getList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminappsrestrictedGetListResponse> _callback) throws ApiException {
            return getListAsync(token, limit, cursor, teamId, enterpriseId, _callback);
        }
    }

    /**
     * 
     * List restricted apps for an org or workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @return GetListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.apps.restricted.list"> Documentation</a>
     */
    public GetListRequestBuilder getList(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new GetListRequestBuilder(token);
    }
    private okhttp3.Call getTeamsListCall(String token, String channelId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.getTeams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_id", channelId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamsListValidateBeforeCall(String token, String channelId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getTeamsList(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getTeamsList(Async)");
        }

        return getTeamsListCall(token, channelId, cursor, limit, _callback);

    }


    private ApiResponse<AdminconversationsGetTeamsListResponse> getTeamsListWithHttpInfo(String token, String channelId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getTeamsListValidateBeforeCall(token, channelId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdminconversationsGetTeamsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamsListAsync(String token, String channelId, String cursor, Integer limit, final ApiCallback<AdminconversationsGetTeamsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamsListValidateBeforeCall(token, channelId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsGetTeamsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTeamsListRequestBuilder {
        private final String token;
        private final String channelId;
        private String cursor;
        private Integer limit;

        private GetTeamsListRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
         * @return GetTeamsListRequestBuilder
         */
        public GetTeamsListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
         * @return GetTeamsListRequestBuilder
         */
        public GetTeamsListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getTeamsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamsListCall(token, channelId, cursor, limit, _callback);
        }


        /**
         * Execute getTeamsList request
         * @return AdminconversationsGetTeamsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsGetTeamsListResponse execute() throws ApiException {
            ApiResponse<AdminconversationsGetTeamsListResponse> localVarResp = getTeamsListWithHttpInfo(token, channelId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTeamsList request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsGetTeamsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsGetTeamsListResponse> executeWithHttpInfo() throws ApiException {
            return getTeamsListWithHttpInfo(token, channelId, cursor, limit);
        }

        /**
         * Execute getTeamsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsGetTeamsListResponse> _callback) throws ApiException {
            return getTeamsListAsync(token, channelId, cursor, limit, _callback);
        }
    }

    /**
     * 
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to determine connected workspaces within the organization for. (required)
     * @return GetTeamsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getTeams"> Documentation</a>
     */
    public GetTeamsListRequestBuilder getTeamsList(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new GetTeamsListRequestBuilder(token, channelId);
    }
    private okhttp3.Call invalidateSessionCall(String token, Integer sessionId, String teamId, AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminuserssessionInvalidateSessionRequest;

        // create path and map variables
        String localVarPath = "/admin.users.session.invalidate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarFormParams.put("session_id", sessionId);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invalidateSessionValidateBeforeCall(String token, Integer sessionId, String teamId, AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling invalidateSession(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling invalidateSession(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling invalidateSession(Async)");
        }

        // verify the required parameter 'adminuserssessionInvalidateSessionRequest' is set
        if (adminuserssessionInvalidateSessionRequest == null) {
            throw new ApiException("Missing the required parameter 'adminuserssessionInvalidateSessionRequest' when calling invalidateSession(Async)");
        }

        return invalidateSessionCall(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest, _callback);

    }


    private ApiResponse<AdminuserssessionInvalidateSessionResponse> invalidateSessionWithHttpInfo(String token, Integer sessionId, String teamId, AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = invalidateSessionValidateBeforeCall(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest, null);
        Type localVarReturnType = new TypeToken<AdminuserssessionInvalidateSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call invalidateSessionAsync(String token, Integer sessionId, String teamId, AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest, final ApiCallback<AdminuserssessionInvalidateSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = invalidateSessionValidateBeforeCall(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminuserssessionInvalidateSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InvalidateSessionRequestBuilder {
        private final String token;
        private final Integer sessionId;
        private final String teamId;

        private InvalidateSessionRequestBuilder(String token, Integer sessionId, String teamId) {
            this.token = token;
            this.sessionId = sessionId;
            this.teamId = teamId;
        }

        /**
         * Build call for invalidateSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest = buildBodyParams();
            return invalidateSessionCall(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest, _callback);
        }

        private AdminuserssessionInvalidateSessionRequest buildBodyParams() {
            AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest = new AdminuserssessionInvalidateSessionRequest();
            adminuserssessionInvalidateSessionRequest.sessionId(this.sessionId);
            adminuserssessionInvalidateSessionRequest.teamId(this.teamId);
            return adminuserssessionInvalidateSessionRequest;
        }

        /**
         * Execute invalidateSession request
         * @return AdminuserssessionInvalidateSessionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminuserssessionInvalidateSessionResponse execute() throws ApiException {
            AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest = buildBodyParams();
            ApiResponse<AdminuserssessionInvalidateSessionResponse> localVarResp = invalidateSessionWithHttpInfo(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute invalidateSession request with HTTP info returned
         * @return ApiResponse&lt;AdminuserssessionInvalidateSessionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminuserssessionInvalidateSessionResponse> executeWithHttpInfo() throws ApiException {
            AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest = buildBodyParams();
            return invalidateSessionWithHttpInfo(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest);
        }

        /**
         * Execute invalidateSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminuserssessionInvalidateSessionResponse> _callback) throws ApiException {
            AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest = buildBodyParams();
            return invalidateSessionAsync(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest, _callback);
        }
    }

    /**
     * 
     * Invalidate a single session for a user by session_id
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param sessionId  (required)
     * @param teamId ID of the team that the session belongs to (required)
     * @param adminuserssessionInvalidateSessionRequest  (required)
     * @return InvalidateSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.session.invalidate"> Documentation</a>
     */
    public InvalidateSessionRequestBuilder invalidateSession(String token, Integer sessionId, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new InvalidateSessionRequestBuilder(token, sessionId, teamId);
    }
    private okhttp3.Call inviteUserToChannelCall(String token, String channelId, String userIds, AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsInviteUserToChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.invite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (userIds != null) {
            localVarFormParams.put("user_ids", userIds);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteUserToChannelValidateBeforeCall(String token, String channelId, String userIds, AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling inviteUserToChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling inviteUserToChannel(Async)");
        }

        // verify the required parameter 'userIds' is set
        if (userIds == null) {
            throw new ApiException("Missing the required parameter 'userIds' when calling inviteUserToChannel(Async)");
        }

        // verify the required parameter 'adminconversationsInviteUserToChannelRequest' is set
        if (adminconversationsInviteUserToChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsInviteUserToChannelRequest' when calling inviteUserToChannel(Async)");
        }

        return inviteUserToChannelCall(token, channelId, userIds, adminconversationsInviteUserToChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsInviteUserToChannelResponse> inviteUserToChannelWithHttpInfo(String token, String channelId, String userIds, AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = inviteUserToChannelValidateBeforeCall(token, channelId, userIds, adminconversationsInviteUserToChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsInviteUserToChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call inviteUserToChannelAsync(String token, String channelId, String userIds, AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest, final ApiCallback<AdminconversationsInviteUserToChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteUserToChannelValidateBeforeCall(token, channelId, userIds, adminconversationsInviteUserToChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsInviteUserToChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InviteUserToChannelRequestBuilder {
        private final String token;
        private final String channelId;
        private final String userIds;

        private InviteUserToChannelRequestBuilder(String token, String channelId, String userIds) {
            this.token = token;
            this.channelId = channelId;
            this.userIds = userIds;
        }

        /**
         * Build call for inviteUserToChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest = buildBodyParams();
            return inviteUserToChannelCall(token, channelId, userIds, adminconversationsInviteUserToChannelRequest, _callback);
        }

        private AdminconversationsInviteUserToChannelRequest buildBodyParams() {
            AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest = new AdminconversationsInviteUserToChannelRequest();
            adminconversationsInviteUserToChannelRequest.channelId(this.channelId);
            adminconversationsInviteUserToChannelRequest.userIds(this.userIds);
            return adminconversationsInviteUserToChannelRequest;
        }

        /**
         * Execute inviteUserToChannel request
         * @return AdminconversationsInviteUserToChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsInviteUserToChannelResponse execute() throws ApiException {
            AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsInviteUserToChannelResponse> localVarResp = inviteUserToChannelWithHttpInfo(token, channelId, userIds, adminconversationsInviteUserToChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute inviteUserToChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsInviteUserToChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsInviteUserToChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest = buildBodyParams();
            return inviteUserToChannelWithHttpInfo(token, channelId, userIds, adminconversationsInviteUserToChannelRequest);
        }

        /**
         * Execute inviteUserToChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsInviteUserToChannelResponse> _callback) throws ApiException {
            AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest = buildBodyParams();
            return inviteUserToChannelAsync(token, channelId, userIds, adminconversationsInviteUserToChannelRequest, _callback);
        }
    }

    /**
     * 
     * Invite a user to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel that the users will be invited to. (required)
     * @param userIds The users to invite. (required)
     * @param adminconversationsInviteUserToChannelRequest  (required)
     * @return InviteUserToChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.invite"> Documentation</a>
     */
    public InviteUserToChannelRequestBuilder inviteUserToChannel(String token, String channelId, String userIds) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (userIds == null) throw new IllegalArgumentException("\"userIds\" is required but got null");
            

        return new InviteUserToChannelRequestBuilder(token, channelId, userIds);
    }
    private okhttp3.Call inviteUserToWorkspaceCall(String token, String channelIds, String email, String teamId, AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersInviteUserToWorkspaceRequest;

        // create path and map variables
        String localVarPath = "/admin.users.invite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (customMessage != null) {
            localVarFormParams.put("custom_message", customMessage);
        }

        if (email != null) {
            localVarFormParams.put("email", email);
        }

        if (guestExpirationTs != null) {
            localVarFormParams.put("guest_expiration_ts", guestExpirationTs);
        }

        if (isRestricted != null) {
            localVarFormParams.put("is_restricted", isRestricted);
        }

        if (isUltraRestricted != null) {
            localVarFormParams.put("is_ultra_restricted", isUltraRestricted);
        }

        if (realName != null) {
            localVarFormParams.put("real_name", realName);
        }

        if (resend != null) {
            localVarFormParams.put("resend", resend);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteUserToWorkspaceValidateBeforeCall(String token, String channelIds, String email, String teamId, AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling inviteUserToWorkspace(Async)");
        }

        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling inviteUserToWorkspace(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling inviteUserToWorkspace(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling inviteUserToWorkspace(Async)");
        }

        // verify the required parameter 'adminusersInviteUserToWorkspaceRequest' is set
        if (adminusersInviteUserToWorkspaceRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersInviteUserToWorkspaceRequest' when calling inviteUserToWorkspace(Async)");
        }

        return inviteUserToWorkspaceCall(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, _callback);

    }


    private ApiResponse<AdminusersInviteUserToWorkspaceResponse> inviteUserToWorkspaceWithHttpInfo(String token, String channelIds, String email, String teamId, AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend) throws ApiException {
        okhttp3.Call localVarCall = inviteUserToWorkspaceValidateBeforeCall(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, null);
        Type localVarReturnType = new TypeToken<AdminusersInviteUserToWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call inviteUserToWorkspaceAsync(String token, String channelIds, String email, String teamId, AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest, String customMessage, String guestExpirationTs, Boolean isRestricted, Boolean isUltraRestricted, String realName, Boolean resend, final ApiCallback<AdminusersInviteUserToWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteUserToWorkspaceValidateBeforeCall(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, _callback);
        Type localVarReturnType = new TypeToken<AdminusersInviteUserToWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InviteUserToWorkspaceRequestBuilder {
        private final String token;
        private final String channelIds;
        private final String email;
        private final String teamId;
        private String customMessage;
        private String guestExpirationTs;
        private Boolean isRestricted;
        private Boolean isUltraRestricted;
        private String realName;
        private Boolean resend;

        private InviteUserToWorkspaceRequestBuilder(String token, String channelIds, String email, String teamId) {
            this.token = token;
            this.channelIds = channelIds;
            this.email = email;
            this.teamId = teamId;
        }

        /**
         * Set customMessage
         * @param customMessage An optional message to send to the user in the invite email. (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder customMessage(String customMessage) {
            this.customMessage = customMessage;
            return this;
        }
        
        /**
         * Set guestExpirationTs
         * @param guestExpirationTs Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder guestExpirationTs(String guestExpirationTs) {
            this.guestExpirationTs = guestExpirationTs;
            return this;
        }
        
        /**
         * Set isRestricted
         * @param isRestricted Is this user a multi-channel guest user? (default: false) (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder isRestricted(Boolean isRestricted) {
            this.isRestricted = isRestricted;
            return this;
        }
        
        /**
         * Set isUltraRestricted
         * @param isUltraRestricted Is this user a single channel guest user? (default: false) (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder isUltraRestricted(Boolean isUltraRestricted) {
            this.isUltraRestricted = isUltraRestricted;
            return this;
        }
        
        /**
         * Set realName
         * @param realName Full name of the user. (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder realName(String realName) {
            this.realName = realName;
            return this;
        }
        
        /**
         * Set resend
         * @param resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
         * @return InviteUserToWorkspaceRequestBuilder
         */
        public InviteUserToWorkspaceRequestBuilder resend(Boolean resend) {
            this.resend = resend;
            return this;
        }
        
        /**
         * Build call for inviteUserToWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = buildBodyParams();
            return inviteUserToWorkspaceCall(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, _callback);
        }

        private AdminusersInviteUserToWorkspaceRequest buildBodyParams() {
            AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = new AdminusersInviteUserToWorkspaceRequest();
            adminusersInviteUserToWorkspaceRequest.channelIds(this.channelIds);
            adminusersInviteUserToWorkspaceRequest.customMessage(this.customMessage);
            adminusersInviteUserToWorkspaceRequest.email(this.email);
            adminusersInviteUserToWorkspaceRequest.guestExpirationTs(this.guestExpirationTs);
            adminusersInviteUserToWorkspaceRequest.isRestricted(this.isRestricted);
            adminusersInviteUserToWorkspaceRequest.isUltraRestricted(this.isUltraRestricted);
            adminusersInviteUserToWorkspaceRequest.realName(this.realName);
            adminusersInviteUserToWorkspaceRequest.resend(this.resend);
            adminusersInviteUserToWorkspaceRequest.teamId(this.teamId);
            return adminusersInviteUserToWorkspaceRequest;
        }

        /**
         * Execute inviteUserToWorkspace request
         * @return AdminusersInviteUserToWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersInviteUserToWorkspaceResponse execute() throws ApiException {
            AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = buildBodyParams();
            ApiResponse<AdminusersInviteUserToWorkspaceResponse> localVarResp = inviteUserToWorkspaceWithHttpInfo(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute inviteUserToWorkspace request with HTTP info returned
         * @return ApiResponse&lt;AdminusersInviteUserToWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersInviteUserToWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = buildBodyParams();
            return inviteUserToWorkspaceWithHttpInfo(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend);
        }

        /**
         * Execute inviteUserToWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersInviteUserToWorkspaceResponse> _callback) throws ApiException {
            AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = buildBodyParams();
            return inviteUserToWorkspaceAsync(token, channelIds, email, teamId, adminusersInviteUserToWorkspaceRequest, customMessage, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, _callback);
        }
    }

    /**
     * 
     * Invite a user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param channelIds A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param email The email address of the person to invite. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param adminusersInviteUserToWorkspaceRequest  (required)
     * @return InviteUserToWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.invite"> Documentation</a>
     */
    public InviteUserToWorkspaceRequestBuilder inviteUserToWorkspace(String token, String channelIds, String email, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelIds == null) throw new IllegalArgumentException("\"channelIds\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new InviteUserToWorkspaceRequestBuilder(token, channelIds, email, teamId);
    }
    private okhttp3.Call listCall(String token, Integer limit, String cursor, String teamId, String enterpriseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.apps.approved.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (enterpriseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enterprise_id", enterpriseId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String token, Integer limit, String cursor, String teamId, String enterpriseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling list(Async)");
        }

        return listCall(token, limit, cursor, teamId, enterpriseId, _callback);

    }


    private ApiResponse<AdminappsapprovedListResponse> listWithHttpInfo(String token, Integer limit, String cursor, String teamId, String enterpriseId) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(token, limit, cursor, teamId, enterpriseId, null);
        Type localVarReturnType = new TypeToken<AdminappsapprovedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String token, Integer limit, String cursor, String teamId, String enterpriseId, final ApiCallback<AdminappsapprovedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(token, limit, cursor, teamId, enterpriseId, _callback);
        Type localVarReturnType = new TypeToken<AdminappsapprovedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String token;
        private Integer limit;
        private String cursor;
        private String teamId;
        private String enterpriseId;

        private ListRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set enterpriseId
         * @param enterpriseId  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder enterpriseId(String enterpriseId) {
            this.enterpriseId = enterpriseId;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(token, limit, cursor, teamId, enterpriseId, _callback);
        }


        /**
         * Execute list request
         * @return AdminappsapprovedListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminappsapprovedListResponse execute() throws ApiException {
            ApiResponse<AdminappsapprovedListResponse> localVarResp = listWithHttpInfo(token, limit, cursor, teamId, enterpriseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;AdminappsapprovedListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminappsapprovedListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(token, limit, cursor, teamId, enterpriseId);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminappsapprovedListResponse> _callback) throws ApiException {
            return listAsync(token, limit, cursor, teamId, enterpriseId, _callback);
        }
    }

    /**
     * 
     * List approved apps for an org or workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.apps.approved.list"> Documentation</a>
     */
    public ListRequestBuilder list(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListRequestBuilder(token);
    }
    private okhttp3.Call listAllCall(String token, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.teams.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String token, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listAll(Async)");
        }

        return listAllCall(token, limit, cursor, _callback);

    }


    private ApiResponse<AdminteamsListAllResponse> listAllWithHttpInfo(String token, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(token, limit, cursor, null);
        Type localVarReturnType = new TypeToken<AdminteamsListAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String token, Integer limit, String cursor, final ApiCallback<AdminteamsListAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(token, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<AdminteamsListAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private final String token;
        private Integer limit;
        private String cursor;

        private ListAllRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 100 both inclusive. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(token, limit, cursor, _callback);
        }


        /**
         * Execute listAll request
         * @return AdminteamsListAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamsListAllResponse execute() throws ApiException {
            ApiResponse<AdminteamsListAllResponse> localVarResp = listAllWithHttpInfo(token, limit, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;AdminteamsListAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamsListAllResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(token, limit, cursor);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamsListAllResponse> _callback) throws ApiException {
            return listAllAsync(token, limit, cursor, _callback);
        }
    }

    /**
     * 
     * List all teams on an Enterprise organization
     * @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.list"> Documentation</a>
     */
    public ListAllRequestBuilder listAll(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListAllRequestBuilder(token);
    }
    private okhttp3.Call listChannelsGetCall(String token, String usergroupId, String teamId, Boolean includeNumMembers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.usergroups.listChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (usergroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usergroup_id", usergroupId));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (includeNumMembers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_num_members", includeNumMembers));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelsGetValidateBeforeCall(String token, String usergroupId, String teamId, Boolean includeNumMembers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listChannelsGet(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling listChannelsGet(Async)");
        }

        return listChannelsGetCall(token, usergroupId, teamId, includeNumMembers, _callback);

    }


    private ApiResponse<AdminusergroupsListChannelsGetResponse> listChannelsGetWithHttpInfo(String token, String usergroupId, String teamId, Boolean includeNumMembers) throws ApiException {
        okhttp3.Call localVarCall = listChannelsGetValidateBeforeCall(token, usergroupId, teamId, includeNumMembers, null);
        Type localVarReturnType = new TypeToken<AdminusergroupsListChannelsGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listChannelsGetAsync(String token, String usergroupId, String teamId, Boolean includeNumMembers, final ApiCallback<AdminusergroupsListChannelsGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelsGetValidateBeforeCall(token, usergroupId, teamId, includeNumMembers, _callback);
        Type localVarReturnType = new TypeToken<AdminusergroupsListChannelsGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListChannelsGetRequestBuilder {
        private final String token;
        private final String usergroupId;
        private String teamId;
        private Boolean includeNumMembers;

        private ListChannelsGetRequestBuilder(String token, String usergroupId) {
            this.token = token;
            this.usergroupId = usergroupId;
        }

        /**
         * Set teamId
         * @param teamId ID of the the workspace. (optional)
         * @return ListChannelsGetRequestBuilder
         */
        public ListChannelsGetRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set includeNumMembers
         * @param includeNumMembers Flag to include or exclude the count of members per channel. (optional)
         * @return ListChannelsGetRequestBuilder
         */
        public ListChannelsGetRequestBuilder includeNumMembers(Boolean includeNumMembers) {
            this.includeNumMembers = includeNumMembers;
            return this;
        }
        
        /**
         * Build call for listChannelsGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listChannelsGetCall(token, usergroupId, teamId, includeNumMembers, _callback);
        }


        /**
         * Execute listChannelsGet request
         * @return AdminusergroupsListChannelsGetResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public AdminusergroupsListChannelsGetResponse execute() throws ApiException {
            ApiResponse<AdminusergroupsListChannelsGetResponse> localVarResp = listChannelsGetWithHttpInfo(token, usergroupId, teamId, includeNumMembers);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listChannelsGet request with HTTP info returned
         * @return ApiResponse&lt;AdminusergroupsListChannelsGetResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusergroupsListChannelsGetResponse> executeWithHttpInfo() throws ApiException {
            return listChannelsGetWithHttpInfo(token, usergroupId, teamId, includeNumMembers);
        }

        /**
         * Execute listChannelsGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusergroupsListChannelsGetResponse> _callback) throws ApiException {
            return listChannelsGetAsync(token, usergroupId, teamId, includeNumMembers, _callback);
        }
    }

    /**
     * 
     * List the channels linked to an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param usergroupId ID of the IDP group to list default channels for. (required)
     * @return ListChannelsGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.listChannels"> Documentation</a>
     */
    public ListChannelsGetRequestBuilder listChannelsGet(String token, String usergroupId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (usergroupId == null) throw new IllegalArgumentException("\"usergroupId\" is required but got null");
            

        return new ListChannelsGetRequestBuilder(token, usergroupId);
    }
    private okhttp3.Call listEnterpriseEmojiCall(String token, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.emoji.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEnterpriseEmojiValidateBeforeCall(String token, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listEnterpriseEmoji(Async)");
        }

        return listEnterpriseEmojiCall(token, cursor, limit, _callback);

    }


    private ApiResponse<AdminemojiListEnterpriseEmojiResponse> listEnterpriseEmojiWithHttpInfo(String token, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listEnterpriseEmojiValidateBeforeCall(token, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdminemojiListEnterpriseEmojiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEnterpriseEmojiAsync(String token, String cursor, Integer limit, final ApiCallback<AdminemojiListEnterpriseEmojiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEnterpriseEmojiValidateBeforeCall(token, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdminemojiListEnterpriseEmojiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEnterpriseEmojiRequestBuilder {
        private final String token;
        private String cursor;
        private Integer limit;

        private ListEnterpriseEmojiRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
         * @return ListEnterpriseEmojiRequestBuilder
         */
        public ListEnterpriseEmojiRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
         * @return ListEnterpriseEmojiRequestBuilder
         */
        public ListEnterpriseEmojiRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listEnterpriseEmoji
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEnterpriseEmojiCall(token, cursor, limit, _callback);
        }


        /**
         * Execute listEnterpriseEmoji request
         * @return AdminemojiListEnterpriseEmojiResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminemojiListEnterpriseEmojiResponse execute() throws ApiException {
            ApiResponse<AdminemojiListEnterpriseEmojiResponse> localVarResp = listEnterpriseEmojiWithHttpInfo(token, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEnterpriseEmoji request with HTTP info returned
         * @return ApiResponse&lt;AdminemojiListEnterpriseEmojiResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminemojiListEnterpriseEmojiResponse> executeWithHttpInfo() throws ApiException {
            return listEnterpriseEmojiWithHttpInfo(token, cursor, limit);
        }

        /**
         * Execute listEnterpriseEmoji request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminemojiListEnterpriseEmojiResponse> _callback) throws ApiException {
            return listEnterpriseEmojiAsync(token, cursor, limit, _callback);
        }
    }

    /**
     * 
     * List emoji for an Enterprise Grid organization.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @return ListEnterpriseEmojiRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.emoji.list"> Documentation</a>
     */
    public ListEnterpriseEmojiRequestBuilder listEnterpriseEmoji(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListEnterpriseEmojiRequestBuilder(token);
    }
    private okhttp3.Call listGroupsCall(String token, String channelId, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.restrictAccess.listGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_id", channelId));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupsValidateBeforeCall(String token, String channelId, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listGroups(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling listGroups(Async)");
        }

        return listGroupsCall(token, channelId, teamId, _callback);

    }


    private ApiResponse<AdminconversationsrestrictAccessListGroupsResponse> listGroupsWithHttpInfo(String token, String channelId, String teamId) throws ApiException {
        okhttp3.Call localVarCall = listGroupsValidateBeforeCall(token, channelId, teamId, null);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessListGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGroupsAsync(String token, String channelId, String teamId, final ApiCallback<AdminconversationsrestrictAccessListGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupsValidateBeforeCall(token, channelId, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessListGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGroupsRequestBuilder {
        private final String token;
        private final String channelId;
        private String teamId;

        private ListGroupsRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Set teamId
         * @param teamId The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
         * @return ListGroupsRequestBuilder
         */
        public ListGroupsRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for listGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGroupsCall(token, channelId, teamId, _callback);
        }


        /**
         * Execute listGroups request
         * @return AdminconversationsrestrictAccessListGroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsrestrictAccessListGroupsResponse execute() throws ApiException {
            ApiResponse<AdminconversationsrestrictAccessListGroupsResponse> localVarResp = listGroupsWithHttpInfo(token, channelId, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGroups request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsrestrictAccessListGroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsrestrictAccessListGroupsResponse> executeWithHttpInfo() throws ApiException {
            return listGroupsWithHttpInfo(token, channelId, teamId);
        }

        /**
         * Execute listGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsrestrictAccessListGroupsResponse> _callback) throws ApiException {
            return listGroupsAsync(token, channelId, teamId, _callback);
        }
    }

    /**
     * 
     * List all IDP Groups linked to a channel
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId  (required)
     * @return ListGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.restrictAccess.listGroups"> Documentation</a>
     */
    public ListGroupsRequestBuilder listGroups(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new ListGroupsRequestBuilder(token, channelId);
    }
    private okhttp3.Call listOriginalConnectedChannelInfoCall(String token, String channelIds, String teamIds, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.ekm.listOriginalConnectedChannelInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (channelIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_ids", channelIds));
        }

        if (teamIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_ids", teamIds));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOriginalConnectedChannelInfoValidateBeforeCall(String token, String channelIds, String teamIds, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listOriginalConnectedChannelInfo(Async)");
        }

        return listOriginalConnectedChannelInfoCall(token, channelIds, teamIds, limit, cursor, _callback);

    }


    private ApiResponse<AdminconversationsekmListOriginalConnectedChannelInfoResponse> listOriginalConnectedChannelInfoWithHttpInfo(String token, String channelIds, String teamIds, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listOriginalConnectedChannelInfoValidateBeforeCall(token, channelIds, teamIds, limit, cursor, null);
        Type localVarReturnType = new TypeToken<AdminconversationsekmListOriginalConnectedChannelInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOriginalConnectedChannelInfoAsync(String token, String channelIds, String teamIds, Integer limit, String cursor, final ApiCallback<AdminconversationsekmListOriginalConnectedChannelInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOriginalConnectedChannelInfoValidateBeforeCall(token, channelIds, teamIds, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsekmListOriginalConnectedChannelInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOriginalConnectedChannelInfoRequestBuilder {
        private final String token;
        private String channelIds;
        private String teamIds;
        private Integer limit;
        private String cursor;

        private ListOriginalConnectedChannelInfoRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set channelIds
         * @param channelIds A comma-separated list of channels to filter to. (optional)
         * @return ListOriginalConnectedChannelInfoRequestBuilder
         */
        public ListOriginalConnectedChannelInfoRequestBuilder channelIds(String channelIds) {
            this.channelIds = channelIds;
            return this;
        }
        
        /**
         * Set teamIds
         * @param teamIds A comma-separated list of the workspaces to which the channels you would like returned belong. (optional)
         * @return ListOriginalConnectedChannelInfoRequestBuilder
         */
        public ListOriginalConnectedChannelInfoRequestBuilder teamIds(String teamIds) {
            this.teamIds = teamIds;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
         * @return ListOriginalConnectedChannelInfoRequestBuilder
         */
        public ListOriginalConnectedChannelInfoRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
         * @return ListOriginalConnectedChannelInfoRequestBuilder
         */
        public ListOriginalConnectedChannelInfoRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for listOriginalConnectedChannelInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOriginalConnectedChannelInfoCall(token, channelIds, teamIds, limit, cursor, _callback);
        }


        /**
         * Execute listOriginalConnectedChannelInfo request
         * @return AdminconversationsekmListOriginalConnectedChannelInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsekmListOriginalConnectedChannelInfoResponse execute() throws ApiException {
            ApiResponse<AdminconversationsekmListOriginalConnectedChannelInfoResponse> localVarResp = listOriginalConnectedChannelInfoWithHttpInfo(token, channelIds, teamIds, limit, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOriginalConnectedChannelInfo request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsekmListOriginalConnectedChannelInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsekmListOriginalConnectedChannelInfoResponse> executeWithHttpInfo() throws ApiException {
            return listOriginalConnectedChannelInfoWithHttpInfo(token, channelIds, teamIds, limit, cursor);
        }

        /**
         * Execute listOriginalConnectedChannelInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsekmListOriginalConnectedChannelInfoResponse> _callback) throws ApiException {
            return listOriginalConnectedChannelInfoAsync(token, channelIds, teamIds, limit, cursor, _callback);
        }
    }

    /**
     * 
     * List all disconnected channels—i.e., channels that were once connected to other workspaces and then disconnected—and the corresponding original channel IDs for key revocation with EKM.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @return ListOriginalConnectedChannelInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.ekm.listOriginalConnectedChannelInfo"> Documentation</a>
     */
    public ListOriginalConnectedChannelInfoRequestBuilder listOriginalConnectedChannelInfo(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListOriginalConnectedChannelInfoRequestBuilder(token);
    }
    private okhttp3.Call listOwnersCall(String token, String teamId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.teams.owners.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOwnersValidateBeforeCall(String token, String teamId, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listOwners(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listOwners(Async)");
        }

        return listOwnersCall(token, teamId, limit, cursor, _callback);

    }


    private ApiResponse<AdminteamsownersListOwnersResponse> listOwnersWithHttpInfo(String token, String teamId, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listOwnersValidateBeforeCall(token, teamId, limit, cursor, null);
        Type localVarReturnType = new TypeToken<AdminteamsownersListOwnersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listOwnersAsync(String token, String teamId, Integer limit, String cursor, final ApiCallback<AdminteamsownersListOwnersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOwnersValidateBeforeCall(token, teamId, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<AdminteamsownersListOwnersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListOwnersRequestBuilder {
        private final String token;
        private final String teamId;
        private Integer limit;
        private String cursor;

        private ListOwnersRequestBuilder(String token, String teamId) {
            this.token = token;
            this.teamId = teamId;
        }

        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
         * @return ListOwnersRequestBuilder
         */
        public ListOwnersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
         * @return ListOwnersRequestBuilder
         */
        public ListOwnersRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for listOwners
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listOwnersCall(token, teamId, limit, cursor, _callback);
        }


        /**
         * Execute listOwners request
         * @return AdminteamsownersListOwnersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamsownersListOwnersResponse execute() throws ApiException {
            ApiResponse<AdminteamsownersListOwnersResponse> localVarResp = listOwnersWithHttpInfo(token, teamId, limit, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listOwners request with HTTP info returned
         * @return ApiResponse&lt;AdminteamsownersListOwnersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamsownersListOwnersResponse> executeWithHttpInfo() throws ApiException {
            return listOwnersWithHttpInfo(token, teamId, limit, cursor);
        }

        /**
         * Execute listOwners request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamsownersListOwnersResponse> _callback) throws ApiException {
            return listOwnersAsync(token, teamId, limit, cursor, _callback);
        }
    }

    /**
     * 
     * List all of the owners on a given workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param teamId  (required)
     * @return ListOwnersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.owners.list"> Documentation</a>
     */
    public ListOwnersRequestBuilder listOwners(String token, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListOwnersRequestBuilder(token, teamId);
    }
    private okhttp3.Call listPendingWorkspaceInviteRequestsCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.inviteRequests.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPendingWorkspaceInviteRequestsValidateBeforeCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listPendingWorkspaceInviteRequests(Async)");
        }

        return listPendingWorkspaceInviteRequestsCall(token, teamId, cursor, limit, _callback);

    }


    private ApiResponse<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> listPendingWorkspaceInviteRequestsWithHttpInfo(String token, String teamId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listPendingWorkspaceInviteRequestsValidateBeforeCall(token, teamId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPendingWorkspaceInviteRequestsAsync(String token, String teamId, String cursor, Integer limit, final ApiCallback<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPendingWorkspaceInviteRequestsValidateBeforeCall(token, teamId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPendingWorkspaceInviteRequestsRequestBuilder {
        private final String token;
        private String teamId;
        private String cursor;
        private Integer limit;

        private ListPendingWorkspaceInviteRequestsRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set teamId
         * @param teamId ID for the workspace where the invite requests were made. (optional)
         * @return ListPendingWorkspaceInviteRequestsRequestBuilder
         */
        public ListPendingWorkspaceInviteRequestsRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
         * @return ListPendingWorkspaceInviteRequestsRequestBuilder
         */
        public ListPendingWorkspaceInviteRequestsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
         * @return ListPendingWorkspaceInviteRequestsRequestBuilder
         */
        public ListPendingWorkspaceInviteRequestsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listPendingWorkspaceInviteRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPendingWorkspaceInviteRequestsCall(token, teamId, cursor, limit, _callback);
        }


        /**
         * Execute listPendingWorkspaceInviteRequests request
         * @return AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse execute() throws ApiException {
            ApiResponse<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> localVarResp = listPendingWorkspaceInviteRequestsWithHttpInfo(token, teamId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPendingWorkspaceInviteRequests request with HTTP info returned
         * @return ApiResponse&lt;AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> executeWithHttpInfo() throws ApiException {
            return listPendingWorkspaceInviteRequestsWithHttpInfo(token, teamId, cursor, limit);
        }

        /**
         * Execute listPendingWorkspaceInviteRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> _callback) throws ApiException {
            return listPendingWorkspaceInviteRequestsAsync(token, teamId, cursor, limit, _callback);
        }
    }

    /**
     * 
     * List all pending workspace invite requests.
     * @param token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @return ListPendingWorkspaceInviteRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.inviteRequests.list"> Documentation</a>
     */
    public ListPendingWorkspaceInviteRequestsRequestBuilder listPendingWorkspaceInviteRequests(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListPendingWorkspaceInviteRequestsRequestBuilder(token);
    }
    private okhttp3.Call listWorkspaceUsersCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.users.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWorkspaceUsersValidateBeforeCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listWorkspaceUsers(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listWorkspaceUsers(Async)");
        }

        return listWorkspaceUsersCall(token, teamId, cursor, limit, _callback);

    }


    private ApiResponse<AdminusersListWorkspaceUsersResponse> listWorkspaceUsersWithHttpInfo(String token, String teamId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listWorkspaceUsersValidateBeforeCall(token, teamId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdminusersListWorkspaceUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWorkspaceUsersAsync(String token, String teamId, String cursor, Integer limit, final ApiCallback<AdminusersListWorkspaceUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWorkspaceUsersValidateBeforeCall(token, teamId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdminusersListWorkspaceUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWorkspaceUsersRequestBuilder {
        private final String token;
        private final String teamId;
        private String cursor;
        private Integer limit;

        private ListWorkspaceUsersRequestBuilder(String token, String teamId) {
            this.token = token;
            this.teamId = teamId;
        }

        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
         * @return ListWorkspaceUsersRequestBuilder
         */
        public ListWorkspaceUsersRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit for how many users to be retrieved per page (optional)
         * @return ListWorkspaceUsersRequestBuilder
         */
        public ListWorkspaceUsersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listWorkspaceUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWorkspaceUsersCall(token, teamId, cursor, limit, _callback);
        }


        /**
         * Execute listWorkspaceUsers request
         * @return AdminusersListWorkspaceUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersListWorkspaceUsersResponse execute() throws ApiException {
            ApiResponse<AdminusersListWorkspaceUsersResponse> localVarResp = listWorkspaceUsersWithHttpInfo(token, teamId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWorkspaceUsers request with HTTP info returned
         * @return ApiResponse&lt;AdminusersListWorkspaceUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersListWorkspaceUsersResponse> executeWithHttpInfo() throws ApiException {
            return listWorkspaceUsersWithHttpInfo(token, teamId, cursor, limit);
        }

        /**
         * Execute listWorkspaceUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersListWorkspaceUsersResponse> _callback) throws ApiException {
            return listWorkspaceUsersAsync(token, teamId, cursor, limit, _callback);
        }
    }

    /**
     * 
     * List users on a workspace
     * @param token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @return ListWorkspaceUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.list"> Documentation</a>
     */
    public ListWorkspaceUsersRequestBuilder listWorkspaceUsers(String token, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListWorkspaceUsersRequestBuilder(token, teamId);
    }
    private okhttp3.Call list_0Call(String token, Integer limit, String cursor, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.apps.requests.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call list_0ValidateBeforeCall(String token, Integer limit, String cursor, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling list_0(Async)");
        }

        return list_0Call(token, limit, cursor, teamId, _callback);

    }


    private ApiResponse<AdminappsrequestsListResponse> list_0WithHttpInfo(String token, Integer limit, String cursor, String teamId) throws ApiException {
        okhttp3.Call localVarCall = list_0ValidateBeforeCall(token, limit, cursor, teamId, null);
        Type localVarReturnType = new TypeToken<AdminappsrequestsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call list_0Async(String token, Integer limit, String cursor, String teamId, final ApiCallback<AdminappsrequestsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = list_0ValidateBeforeCall(token, limit, cursor, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminappsrequestsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class List0RequestBuilder {
        private final String token;
        private Integer limit;
        private String cursor;
        private String teamId;

        private List0RequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId  (optional)
         * @return List0RequestBuilder
         */
        public List0RequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for list_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return list_0Call(token, limit, cursor, teamId, _callback);
        }


        /**
         * Execute list_0 request
         * @return AdminappsrequestsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminappsrequestsListResponse execute() throws ApiException {
            ApiResponse<AdminappsrequestsListResponse> localVarResp = list_0WithHttpInfo(token, limit, cursor, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list_0 request with HTTP info returned
         * @return ApiResponse&lt;AdminappsrequestsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminappsrequestsListResponse> executeWithHttpInfo() throws ApiException {
            return list_0WithHttpInfo(token, limit, cursor, teamId);
        }

        /**
         * Execute list_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminappsrequestsListResponse> _callback) throws ApiException {
            return list_0Async(token, limit, cursor, teamId, _callback);
        }
    }

    /**
     * 
     * List app requests for a team/workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @return List0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.apps.requests.list"> Documentation</a>
     */
    public List0RequestBuilder list_0(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new List0RequestBuilder(token);
    }
    private okhttp3.Call list_1Call(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.inviteRequests.approved.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call list_1ValidateBeforeCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling list_1(Async)");
        }

        return list_1Call(token, teamId, cursor, limit, _callback);

    }


    private ApiResponse<AdmininviteRequestsapprovedListResponse> list_1WithHttpInfo(String token, String teamId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = list_1ValidateBeforeCall(token, teamId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsapprovedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call list_1Async(String token, String teamId, String cursor, Integer limit, final ApiCallback<AdmininviteRequestsapprovedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = list_1ValidateBeforeCall(token, teamId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsapprovedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class List1RequestBuilder {
        private final String token;
        private String teamId;
        private String cursor;
        private Integer limit;

        private List1RequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set teamId
         * @param teamId ID for the workspace where the invite requests were made. (optional)
         * @return List1RequestBuilder
         */
        public List1RequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
         * @return List1RequestBuilder
         */
        public List1RequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
         * @return List1RequestBuilder
         */
        public List1RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return list_1Call(token, teamId, cursor, limit, _callback);
        }


        /**
         * Execute list_1 request
         * @return AdmininviteRequestsapprovedListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdmininviteRequestsapprovedListResponse execute() throws ApiException {
            ApiResponse<AdmininviteRequestsapprovedListResponse> localVarResp = list_1WithHttpInfo(token, teamId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list_1 request with HTTP info returned
         * @return ApiResponse&lt;AdmininviteRequestsapprovedListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdmininviteRequestsapprovedListResponse> executeWithHttpInfo() throws ApiException {
            return list_1WithHttpInfo(token, teamId, cursor, limit);
        }

        /**
         * Execute list_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdmininviteRequestsapprovedListResponse> _callback) throws ApiException {
            return list_1Async(token, teamId, cursor, limit, _callback);
        }
    }

    /**
     * 
     * List all approved workspace invite requests.
     * @param token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @return List1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.inviteRequests.approved.list"> Documentation</a>
     */
    public List1RequestBuilder list_1(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new List1RequestBuilder(token);
    }
    private okhttp3.Call list_2Call(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.inviteRequests.denied.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call list_2ValidateBeforeCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling list_2(Async)");
        }

        return list_2Call(token, teamId, cursor, limit, _callback);

    }


    private ApiResponse<AdmininviteRequestsdeniedListResponse> list_2WithHttpInfo(String token, String teamId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = list_2ValidateBeforeCall(token, teamId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsdeniedListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call list_2Async(String token, String teamId, String cursor, Integer limit, final ApiCallback<AdmininviteRequestsdeniedListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = list_2ValidateBeforeCall(token, teamId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsdeniedListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class List2RequestBuilder {
        private final String token;
        private String teamId;
        private String cursor;
        private Integer limit;

        private List2RequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set teamId
         * @param teamId ID for the workspace where the invite requests were made. (optional)
         * @return List2RequestBuilder
         */
        public List2RequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous api response (optional)
         * @return List2RequestBuilder
         */
        public List2RequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive (optional)
         * @return List2RequestBuilder
         */
        public List2RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return list_2Call(token, teamId, cursor, limit, _callback);
        }


        /**
         * Execute list_2 request
         * @return AdmininviteRequestsdeniedListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdmininviteRequestsdeniedListResponse execute() throws ApiException {
            ApiResponse<AdmininviteRequestsdeniedListResponse> localVarResp = list_2WithHttpInfo(token, teamId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list_2 request with HTTP info returned
         * @return ApiResponse&lt;AdmininviteRequestsdeniedListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdmininviteRequestsdeniedListResponse> executeWithHttpInfo() throws ApiException {
            return list_2WithHttpInfo(token, teamId, cursor, limit);
        }

        /**
         * Execute list_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdmininviteRequestsdeniedListResponse> _callback) throws ApiException {
            return list_2Async(token, teamId, cursor, limit, _callback);
        }
    }

    /**
     * 
     * List all denied workspace invite requests.
     * @param token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @return List2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.inviteRequests.denied.list"> Documentation</a>
     */
    public List2RequestBuilder list_2(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new List2RequestBuilder(token);
    }
    private okhttp3.Call removeChannelsCall(String token, String channelIds, String usergroupId, AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusergroupsRemoveChannelsRequest;

        // create path and map variables
        String localVarPath = "/admin.usergroups.removeChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (usergroupId != null) {
            localVarFormParams.put("usergroup_id", usergroupId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeChannelsValidateBeforeCall(String token, String channelIds, String usergroupId, AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeChannels(Async)");
        }

        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling removeChannels(Async)");
        }

        // verify the required parameter 'usergroupId' is set
        if (usergroupId == null) {
            throw new ApiException("Missing the required parameter 'usergroupId' when calling removeChannels(Async)");
        }

        // verify the required parameter 'adminusergroupsRemoveChannelsRequest' is set
        if (adminusergroupsRemoveChannelsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusergroupsRemoveChannelsRequest' when calling removeChannels(Async)");
        }

        return removeChannelsCall(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest, _callback);

    }


    private ApiResponse<AdminusergroupsRemoveChannelsResponse> removeChannelsWithHttpInfo(String token, String channelIds, String usergroupId, AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest) throws ApiException {
        okhttp3.Call localVarCall = removeChannelsValidateBeforeCall(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest, null);
        Type localVarReturnType = new TypeToken<AdminusergroupsRemoveChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeChannelsAsync(String token, String channelIds, String usergroupId, AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest, final ApiCallback<AdminusergroupsRemoveChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeChannelsValidateBeforeCall(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusergroupsRemoveChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveChannelsRequestBuilder {
        private final String token;
        private final String channelIds;
        private final String usergroupId;

        private RemoveChannelsRequestBuilder(String token, String channelIds, String usergroupId) {
            this.token = token;
            this.channelIds = channelIds;
            this.usergroupId = usergroupId;
        }

        /**
         * Build call for removeChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest = buildBodyParams();
            return removeChannelsCall(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest, _callback);
        }

        private AdminusergroupsRemoveChannelsRequest buildBodyParams() {
            AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest = new AdminusergroupsRemoveChannelsRequest();
            adminusergroupsRemoveChannelsRequest.channelIds(this.channelIds);
            adminusergroupsRemoveChannelsRequest.usergroupId(this.usergroupId);
            return adminusergroupsRemoveChannelsRequest;
        }

        /**
         * Execute removeChannels request
         * @return AdminusergroupsRemoveChannelsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public AdminusergroupsRemoveChannelsResponse execute() throws ApiException {
            AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest = buildBodyParams();
            ApiResponse<AdminusergroupsRemoveChannelsResponse> localVarResp = removeChannelsWithHttpInfo(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeChannels request with HTTP info returned
         * @return ApiResponse&lt;AdminusergroupsRemoveChannelsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusergroupsRemoveChannelsResponse> executeWithHttpInfo() throws ApiException {
            AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest = buildBodyParams();
            return removeChannelsWithHttpInfo(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest);
        }

        /**
         * Execute removeChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusergroupsRemoveChannelsResponse> _callback) throws ApiException {
            AdminusergroupsRemoveChannelsRequest adminusergroupsRemoveChannelsRequest = buildBodyParams();
            return removeChannelsAsync(token, channelIds, usergroupId, adminusergroupsRemoveChannelsRequest, _callback);
        }
    }

    /**
     * 
     * Remove one or more default channels from an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param channelIds Comma-separated string of channel IDs (required)
     * @param usergroupId ID of the IDP Group (required)
     * @param adminusergroupsRemoveChannelsRequest  (required)
     * @return RemoveChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response if the token provided is not associated with an Org Admin or Owner </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.usergroups.removeChannels"> Documentation</a>
     */
    public RemoveChannelsRequestBuilder removeChannels(String token, String channelIds, String usergroupId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelIds == null) throw new IllegalArgumentException("\"channelIds\" is required but got null");
            

        if (usergroupId == null) throw new IllegalArgumentException("\"usergroupId\" is required but got null");
            

        return new RemoveChannelsRequestBuilder(token, channelIds, usergroupId);
    }
    private okhttp3.Call removeEnterpriseEmojiCall(String name, String token, AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminemojiRemoveEnterpriseEmojiRequest;

        // create path and map variables
        String localVarPath = "/admin.emoji.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEnterpriseEmojiValidateBeforeCall(String name, String token, AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling removeEnterpriseEmoji(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeEnterpriseEmoji(Async)");
        }

        // verify the required parameter 'adminemojiRemoveEnterpriseEmojiRequest' is set
        if (adminemojiRemoveEnterpriseEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'adminemojiRemoveEnterpriseEmojiRequest' when calling removeEnterpriseEmoji(Async)");
        }

        return removeEnterpriseEmojiCall(name, token, adminemojiRemoveEnterpriseEmojiRequest, _callback);

    }


    private ApiResponse<AdminemojiRemoveEnterpriseEmojiResponse> removeEnterpriseEmojiWithHttpInfo(String name, String token, AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = removeEnterpriseEmojiValidateBeforeCall(name, token, adminemojiRemoveEnterpriseEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AdminemojiRemoveEnterpriseEmojiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeEnterpriseEmojiAsync(String name, String token, AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest, final ApiCallback<AdminemojiRemoveEnterpriseEmojiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEnterpriseEmojiValidateBeforeCall(name, token, adminemojiRemoveEnterpriseEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminemojiRemoveEnterpriseEmojiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveEnterpriseEmojiRequestBuilder {
        private final String name;
        private final String token;

        private RemoveEnterpriseEmojiRequestBuilder(String name, String token) {
            this.name = name;
            this.token = token;
        }

        /**
         * Build call for removeEnterpriseEmoji
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest = buildBodyParams();
            return removeEnterpriseEmojiCall(name, token, adminemojiRemoveEnterpriseEmojiRequest, _callback);
        }

        private AdminemojiRemoveEnterpriseEmojiRequest buildBodyParams() {
            AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest = new AdminemojiRemoveEnterpriseEmojiRequest();
            adminemojiRemoveEnterpriseEmojiRequest.name(this.name);
            adminemojiRemoveEnterpriseEmojiRequest.token(this.token);
            return adminemojiRemoveEnterpriseEmojiRequest;
        }

        /**
         * Execute removeEnterpriseEmoji request
         * @return AdminemojiRemoveEnterpriseEmojiResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminemojiRemoveEnterpriseEmojiResponse execute() throws ApiException {
            AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest = buildBodyParams();
            ApiResponse<AdminemojiRemoveEnterpriseEmojiResponse> localVarResp = removeEnterpriseEmojiWithHttpInfo(name, token, adminemojiRemoveEnterpriseEmojiRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeEnterpriseEmoji request with HTTP info returned
         * @return ApiResponse&lt;AdminemojiRemoveEnterpriseEmojiResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminemojiRemoveEnterpriseEmojiResponse> executeWithHttpInfo() throws ApiException {
            AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest = buildBodyParams();
            return removeEnterpriseEmojiWithHttpInfo(name, token, adminemojiRemoveEnterpriseEmojiRequest);
        }

        /**
         * Execute removeEnterpriseEmoji request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminemojiRemoveEnterpriseEmojiResponse> _callback) throws ApiException {
            AdminemojiRemoveEnterpriseEmojiRequest adminemojiRemoveEnterpriseEmojiRequest = buildBodyParams();
            return removeEnterpriseEmojiAsync(name, token, adminemojiRemoveEnterpriseEmojiRequest, _callback);
        }
    }

    /**
     * 
     * Remove an emoji across an Enterprise Grid organization
     * @param name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param adminemojiRemoveEnterpriseEmojiRequest  (required)
     * @return RemoveEnterpriseEmojiRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.emoji.remove"> Documentation</a>
     */
    public RemoveEnterpriseEmojiRequestBuilder removeEnterpriseEmoji(String name, String token) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new RemoveEnterpriseEmojiRequestBuilder(name, token);
    }
    private okhttp3.Call removeIdpGroupCall(String channelId, String groupId, String teamId, String token, AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsrestrictAccessRemoveIdpGroupRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.restrictAccess.removeGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (groupId != null) {
            localVarFormParams.put("group_id", groupId);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIdpGroupValidateBeforeCall(String channelId, String groupId, String teamId, String token, AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling removeIdpGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeIdpGroup(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling removeIdpGroup(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeIdpGroup(Async)");
        }

        // verify the required parameter 'adminconversationsrestrictAccessRemoveIdpGroupRequest' is set
        if (adminconversationsrestrictAccessRemoveIdpGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsrestrictAccessRemoveIdpGroupRequest' when calling removeIdpGroup(Async)");
        }

        return removeIdpGroupCall(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest, _callback);

    }


    private ApiResponse<AdminconversationsrestrictAccessRemoveIdpGroupResponse> removeIdpGroupWithHttpInfo(String channelId, String groupId, String teamId, String token, AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = removeIdpGroupValidateBeforeCall(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessRemoveIdpGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeIdpGroupAsync(String channelId, String groupId, String teamId, String token, AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest, final ApiCallback<AdminconversationsrestrictAccessRemoveIdpGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIdpGroupValidateBeforeCall(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessRemoveIdpGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveIdpGroupRequestBuilder {
        private final String channelId;
        private final String groupId;
        private final String teamId;
        private final String token;

        private RemoveIdpGroupRequestBuilder(String channelId, String groupId, String teamId, String token) {
            this.channelId = channelId;
            this.groupId = groupId;
            this.teamId = teamId;
            this.token = token;
        }

        /**
         * Build call for removeIdpGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest = buildBodyParams();
            return removeIdpGroupCall(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest, _callback);
        }

        private AdminconversationsrestrictAccessRemoveIdpGroupRequest buildBodyParams() {
            AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest = new AdminconversationsrestrictAccessRemoveIdpGroupRequest();
            adminconversationsrestrictAccessRemoveIdpGroupRequest.channelId(this.channelId);
            adminconversationsrestrictAccessRemoveIdpGroupRequest.groupId(this.groupId);
            adminconversationsrestrictAccessRemoveIdpGroupRequest.teamId(this.teamId);
            adminconversationsrestrictAccessRemoveIdpGroupRequest.token(this.token);
            return adminconversationsrestrictAccessRemoveIdpGroupRequest;
        }

        /**
         * Execute removeIdpGroup request
         * @return AdminconversationsrestrictAccessRemoveIdpGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsrestrictAccessRemoveIdpGroupResponse execute() throws ApiException {
            AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest = buildBodyParams();
            ApiResponse<AdminconversationsrestrictAccessRemoveIdpGroupResponse> localVarResp = removeIdpGroupWithHttpInfo(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeIdpGroup request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsrestrictAccessRemoveIdpGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsrestrictAccessRemoveIdpGroupResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest = buildBodyParams();
            return removeIdpGroupWithHttpInfo(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest);
        }

        /**
         * Execute removeIdpGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsrestrictAccessRemoveIdpGroupResponse> _callback) throws ApiException {
            AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest = buildBodyParams();
            return removeIdpGroupAsync(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest, _callback);
        }
    }

    /**
     * 
     * Remove a linked IDP group linked from a private channel
     * @param channelId The channel to remove the linked group from. (required)
     * @param groupId The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. (required)
     * @param teamId The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param adminconversationsrestrictAccessRemoveIdpGroupRequest  (required)
     * @return RemoveIdpGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.restrictAccess.removeGroup"> Documentation</a>
     */
    public RemoveIdpGroupRequestBuilder removeIdpGroup(String channelId, String groupId, String teamId, String token) throws IllegalArgumentException {
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new RemoveIdpGroupRequestBuilder(channelId, groupId, teamId, token);
    }
    private okhttp3.Call removeUserFromWorkspaceCall(String token, String teamId, String userId, AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersRemoveUserFromWorkspaceRequest;

        // create path and map variables
        String localVarPath = "/admin.users.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUserFromWorkspaceValidateBeforeCall(String token, String teamId, String userId, AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeUserFromWorkspace(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling removeUserFromWorkspace(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling removeUserFromWorkspace(Async)");
        }

        // verify the required parameter 'adminusersRemoveUserFromWorkspaceRequest' is set
        if (adminusersRemoveUserFromWorkspaceRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersRemoveUserFromWorkspaceRequest' when calling removeUserFromWorkspace(Async)");
        }

        return removeUserFromWorkspaceCall(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest, _callback);

    }


    private ApiResponse<AdminusersRemoveUserFromWorkspaceResponse> removeUserFromWorkspaceWithHttpInfo(String token, String teamId, String userId, AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest) throws ApiException {
        okhttp3.Call localVarCall = removeUserFromWorkspaceValidateBeforeCall(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest, null);
        Type localVarReturnType = new TypeToken<AdminusersRemoveUserFromWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeUserFromWorkspaceAsync(String token, String teamId, String userId, AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest, final ApiCallback<AdminusersRemoveUserFromWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUserFromWorkspaceValidateBeforeCall(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusersRemoveUserFromWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveUserFromWorkspaceRequestBuilder {
        private final String token;
        private final String teamId;
        private final String userId;

        private RemoveUserFromWorkspaceRequestBuilder(String token, String teamId, String userId) {
            this.token = token;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for removeUserFromWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest = buildBodyParams();
            return removeUserFromWorkspaceCall(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest, _callback);
        }

        private AdminusersRemoveUserFromWorkspaceRequest buildBodyParams() {
            AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest = new AdminusersRemoveUserFromWorkspaceRequest();
            adminusersRemoveUserFromWorkspaceRequest.teamId(this.teamId);
            adminusersRemoveUserFromWorkspaceRequest.userId(this.userId);
            return adminusersRemoveUserFromWorkspaceRequest;
        }

        /**
         * Execute removeUserFromWorkspace request
         * @return AdminusersRemoveUserFromWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersRemoveUserFromWorkspaceResponse execute() throws ApiException {
            AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest = buildBodyParams();
            ApiResponse<AdminusersRemoveUserFromWorkspaceResponse> localVarResp = removeUserFromWorkspaceWithHttpInfo(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeUserFromWorkspace request with HTTP info returned
         * @return ApiResponse&lt;AdminusersRemoveUserFromWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersRemoveUserFromWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest = buildBodyParams();
            return removeUserFromWorkspaceWithHttpInfo(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest);
        }

        /**
         * Execute removeUserFromWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersRemoveUserFromWorkspaceResponse> _callback) throws ApiException {
            AdminusersRemoveUserFromWorkspaceRequest adminusersRemoveUserFromWorkspaceRequest = buildBodyParams();
            return removeUserFromWorkspaceAsync(token, teamId, userId, adminusersRemoveUserFromWorkspaceRequest, _callback);
        }
    }

    /**
     * 
     * Remove a user from a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to remove. (required)
     * @param adminusersRemoveUserFromWorkspaceRequest  (required)
     * @return RemoveUserFromWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.remove"> Documentation</a>
     */
    public RemoveUserFromWorkspaceRequestBuilder removeUserFromWorkspace(String token, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new RemoveUserFromWorkspaceRequestBuilder(token, teamId, userId);
    }
    private okhttp3.Call renameChannelCall(String token, String channelId, String name, AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsRenameChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.rename";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameChannelValidateBeforeCall(String token, String channelId, String name, AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling renameChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling renameChannel(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling renameChannel(Async)");
        }

        // verify the required parameter 'adminconversationsRenameChannelRequest' is set
        if (adminconversationsRenameChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsRenameChannelRequest' when calling renameChannel(Async)");
        }

        return renameChannelCall(token, channelId, name, adminconversationsRenameChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsRenameChannelResponse> renameChannelWithHttpInfo(String token, String channelId, String name, AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = renameChannelValidateBeforeCall(token, channelId, name, adminconversationsRenameChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsRenameChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renameChannelAsync(String token, String channelId, String name, AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest, final ApiCallback<AdminconversationsRenameChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameChannelValidateBeforeCall(token, channelId, name, adminconversationsRenameChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsRenameChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenameChannelRequestBuilder {
        private final String token;
        private final String channelId;
        private final String name;

        private RenameChannelRequestBuilder(String token, String channelId, String name) {
            this.token = token;
            this.channelId = channelId;
            this.name = name;
        }

        /**
         * Build call for renameChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest = buildBodyParams();
            return renameChannelCall(token, channelId, name, adminconversationsRenameChannelRequest, _callback);
        }

        private AdminconversationsRenameChannelRequest buildBodyParams() {
            AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest = new AdminconversationsRenameChannelRequest();
            adminconversationsRenameChannelRequest.channelId(this.channelId);
            adminconversationsRenameChannelRequest.name(this.name);
            return adminconversationsRenameChannelRequest;
        }

        /**
         * Execute renameChannel request
         * @return AdminconversationsRenameChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsRenameChannelResponse execute() throws ApiException {
            AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsRenameChannelResponse> localVarResp = renameChannelWithHttpInfo(token, channelId, name, adminconversationsRenameChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renameChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsRenameChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsRenameChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest = buildBodyParams();
            return renameChannelWithHttpInfo(token, channelId, name, adminconversationsRenameChannelRequest);
        }

        /**
         * Execute renameChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsRenameChannelResponse> _callback) throws ApiException {
            AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest = buildBodyParams();
            return renameChannelAsync(token, channelId, name, adminconversationsRenameChannelRequest, _callback);
        }
    }

    /**
     * 
     * Rename a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to rename. (required)
     * @param name  (required)
     * @param adminconversationsRenameChannelRequest  (required)
     * @return RenameChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.rename"> Documentation</a>
     */
    public RenameChannelRequestBuilder renameChannel(String token, String channelId, String name) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new RenameChannelRequestBuilder(token, channelId, name);
    }
    private okhttp3.Call renameEmojiCall(String name, String newName, String token, AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminemojiRenameEmojiRequest;

        // create path and map variables
        String localVarPath = "/admin.emoji.rename";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (newName != null) {
            localVarFormParams.put("new_name", newName);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameEmojiValidateBeforeCall(String name, String newName, String token, AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling renameEmoji(Async)");
        }

        // verify the required parameter 'newName' is set
        if (newName == null) {
            throw new ApiException("Missing the required parameter 'newName' when calling renameEmoji(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling renameEmoji(Async)");
        }

        // verify the required parameter 'adminemojiRenameEmojiRequest' is set
        if (adminemojiRenameEmojiRequest == null) {
            throw new ApiException("Missing the required parameter 'adminemojiRenameEmojiRequest' when calling renameEmoji(Async)");
        }

        return renameEmojiCall(name, newName, token, adminemojiRenameEmojiRequest, _callback);

    }


    private ApiResponse<AdminemojiRenameEmojiResponse> renameEmojiWithHttpInfo(String name, String newName, String token, AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest) throws ApiException {
        okhttp3.Call localVarCall = renameEmojiValidateBeforeCall(name, newName, token, adminemojiRenameEmojiRequest, null);
        Type localVarReturnType = new TypeToken<AdminemojiRenameEmojiResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renameEmojiAsync(String name, String newName, String token, AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest, final ApiCallback<AdminemojiRenameEmojiResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameEmojiValidateBeforeCall(name, newName, token, adminemojiRenameEmojiRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminemojiRenameEmojiResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenameEmojiRequestBuilder {
        private final String name;
        private final String newName;
        private final String token;

        private RenameEmojiRequestBuilder(String name, String newName, String token) {
            this.name = name;
            this.newName = newName;
            this.token = token;
        }

        /**
         * Build call for renameEmoji
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest = buildBodyParams();
            return renameEmojiCall(name, newName, token, adminemojiRenameEmojiRequest, _callback);
        }

        private AdminemojiRenameEmojiRequest buildBodyParams() {
            AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest = new AdminemojiRenameEmojiRequest();
            adminemojiRenameEmojiRequest.name(this.name);
            adminemojiRenameEmojiRequest.newName(this.newName);
            adminemojiRenameEmojiRequest.token(this.token);
            return adminemojiRenameEmojiRequest;
        }

        /**
         * Execute renameEmoji request
         * @return AdminemojiRenameEmojiResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminemojiRenameEmojiResponse execute() throws ApiException {
            AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest = buildBodyParams();
            ApiResponse<AdminemojiRenameEmojiResponse> localVarResp = renameEmojiWithHttpInfo(name, newName, token, adminemojiRenameEmojiRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renameEmoji request with HTTP info returned
         * @return ApiResponse&lt;AdminemojiRenameEmojiResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminemojiRenameEmojiResponse> executeWithHttpInfo() throws ApiException {
            AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest = buildBodyParams();
            return renameEmojiWithHttpInfo(name, newName, token, adminemojiRenameEmojiRequest);
        }

        /**
         * Execute renameEmoji request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminemojiRenameEmojiResponse> _callback) throws ApiException {
            AdminemojiRenameEmojiRequest adminemojiRenameEmojiRequest = buildBodyParams();
            return renameEmojiAsync(name, newName, token, adminemojiRenameEmojiRequest, _callback);
        }
    }

    /**
     * 
     * Rename an emoji.
     * @param name The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param newName The new name of the emoji. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param adminemojiRenameEmojiRequest  (required)
     * @return RenameEmojiRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.emoji.rename"> Documentation</a>
     */
    public RenameEmojiRequestBuilder renameEmoji(String name, String newName, String token) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (newName == null) throw new IllegalArgumentException("\"newName\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new RenameEmojiRequestBuilder(name, newName, token);
    }
    private okhttp3.Call resetSessionsCall(String token, String userId, AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest, Boolean mobileOnly, Boolean webOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminuserssessionResetSessionsRequest;

        // create path and map variables
        String localVarPath = "/admin.users.session.reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mobileOnly != null) {
            localVarFormParams.put("mobile_only", mobileOnly);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (webOnly != null) {
            localVarFormParams.put("web_only", webOnly);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetSessionsValidateBeforeCall(String token, String userId, AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest, Boolean mobileOnly, Boolean webOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling resetSessions(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling resetSessions(Async)");
        }

        // verify the required parameter 'adminuserssessionResetSessionsRequest' is set
        if (adminuserssessionResetSessionsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminuserssessionResetSessionsRequest' when calling resetSessions(Async)");
        }

        return resetSessionsCall(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly, _callback);

    }


    private ApiResponse<AdminuserssessionResetSessionsResponse> resetSessionsWithHttpInfo(String token, String userId, AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest, Boolean mobileOnly, Boolean webOnly) throws ApiException {
        okhttp3.Call localVarCall = resetSessionsValidateBeforeCall(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly, null);
        Type localVarReturnType = new TypeToken<AdminuserssessionResetSessionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resetSessionsAsync(String token, String userId, AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest, Boolean mobileOnly, Boolean webOnly, final ApiCallback<AdminuserssessionResetSessionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetSessionsValidateBeforeCall(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly, _callback);
        Type localVarReturnType = new TypeToken<AdminuserssessionResetSessionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResetSessionsRequestBuilder {
        private final String token;
        private final String userId;
        private Boolean mobileOnly;
        private Boolean webOnly;

        private ResetSessionsRequestBuilder(String token, String userId) {
            this.token = token;
            this.userId = userId;
        }

        /**
         * Set mobileOnly
         * @param mobileOnly Only expire mobile sessions (default: false) (optional)
         * @return ResetSessionsRequestBuilder
         */
        public ResetSessionsRequestBuilder mobileOnly(Boolean mobileOnly) {
            this.mobileOnly = mobileOnly;
            return this;
        }
        
        /**
         * Set webOnly
         * @param webOnly Only expire web sessions (default: false) (optional)
         * @return ResetSessionsRequestBuilder
         */
        public ResetSessionsRequestBuilder webOnly(Boolean webOnly) {
            this.webOnly = webOnly;
            return this;
        }
        
        /**
         * Build call for resetSessions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest = buildBodyParams();
            return resetSessionsCall(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly, _callback);
        }

        private AdminuserssessionResetSessionsRequest buildBodyParams() {
            AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest = new AdminuserssessionResetSessionsRequest();
            adminuserssessionResetSessionsRequest.mobileOnly(this.mobileOnly);
            adminuserssessionResetSessionsRequest.userId(this.userId);
            adminuserssessionResetSessionsRequest.webOnly(this.webOnly);
            return adminuserssessionResetSessionsRequest;
        }

        /**
         * Execute resetSessions request
         * @return AdminuserssessionResetSessionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminuserssessionResetSessionsResponse execute() throws ApiException {
            AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest = buildBodyParams();
            ApiResponse<AdminuserssessionResetSessionsResponse> localVarResp = resetSessionsWithHttpInfo(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resetSessions request with HTTP info returned
         * @return ApiResponse&lt;AdminuserssessionResetSessionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminuserssessionResetSessionsResponse> executeWithHttpInfo() throws ApiException {
            AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest = buildBodyParams();
            return resetSessionsWithHttpInfo(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly);
        }

        /**
         * Execute resetSessions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminuserssessionResetSessionsResponse> _callback) throws ApiException {
            AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest = buildBodyParams();
            return resetSessionsAsync(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly, _callback);
        }
    }

    /**
     * 
     * Wipes all valid sessions on all devices for a given user
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param userId The ID of the user to wipe sessions for (required)
     * @param adminuserssessionResetSessionsRequest  (required)
     * @return ResetSessionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.session.reset"> Documentation</a>
     */
    public ResetSessionsRequestBuilder resetSessions(String token, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ResetSessionsRequestBuilder(token, userId);
    }
    private okhttp3.Call restrictAppCall(String token, String appId, String requestId, String teamId, AdminappsRestrictAppRequest adminappsRestrictAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminappsRestrictAppRequest;

        // create path and map variables
        String localVarPath = "/admin.apps.restrict";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarFormParams.put("app_id", appId);
        }

        if (requestId != null) {
            localVarFormParams.put("request_id", requestId);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restrictAppValidateBeforeCall(String token, String appId, String requestId, String teamId, AdminappsRestrictAppRequest adminappsRestrictAppRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling restrictApp(Async)");
        }

        return restrictAppCall(token, appId, requestId, teamId, adminappsRestrictAppRequest, _callback);

    }


    private ApiResponse<AdminappsRestrictAppResponse> restrictAppWithHttpInfo(String token, String appId, String requestId, String teamId, AdminappsRestrictAppRequest adminappsRestrictAppRequest) throws ApiException {
        okhttp3.Call localVarCall = restrictAppValidateBeforeCall(token, appId, requestId, teamId, adminappsRestrictAppRequest, null);
        Type localVarReturnType = new TypeToken<AdminappsRestrictAppResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call restrictAppAsync(String token, String appId, String requestId, String teamId, AdminappsRestrictAppRequest adminappsRestrictAppRequest, final ApiCallback<AdminappsRestrictAppResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restrictAppValidateBeforeCall(token, appId, requestId, teamId, adminappsRestrictAppRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminappsRestrictAppResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RestrictAppRequestBuilder {
        private final String token;
        private String appId;
        private String requestId;
        private String teamId;

        private RestrictAppRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set appId
         * @param appId The id of the app to restrict. (optional)
         * @return RestrictAppRequestBuilder
         */
        public RestrictAppRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set requestId
         * @param requestId The id of the request to restrict. (optional)
         * @return RestrictAppRequestBuilder
         */
        public RestrictAppRequestBuilder requestId(String requestId) {
            this.requestId = requestId;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId  (optional)
         * @return RestrictAppRequestBuilder
         */
        public RestrictAppRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for restrictApp
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminappsRestrictAppRequest adminappsRestrictAppRequest = buildBodyParams();
            return restrictAppCall(token, appId, requestId, teamId, adminappsRestrictAppRequest, _callback);
        }

        private AdminappsRestrictAppRequest buildBodyParams() {
            AdminappsRestrictAppRequest adminappsRestrictAppRequest = new AdminappsRestrictAppRequest();
            adminappsRestrictAppRequest.appId(this.appId);
            adminappsRestrictAppRequest.requestId(this.requestId);
            adminappsRestrictAppRequest.teamId(this.teamId);
            return adminappsRestrictAppRequest;
        }

        /**
         * Execute restrictApp request
         * @return AdminappsRestrictAppResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminappsRestrictAppResponse execute() throws ApiException {
            AdminappsRestrictAppRequest adminappsRestrictAppRequest = buildBodyParams();
            ApiResponse<AdminappsRestrictAppResponse> localVarResp = restrictAppWithHttpInfo(token, appId, requestId, teamId, adminappsRestrictAppRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute restrictApp request with HTTP info returned
         * @return ApiResponse&lt;AdminappsRestrictAppResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminappsRestrictAppResponse> executeWithHttpInfo() throws ApiException {
            AdminappsRestrictAppRequest adminappsRestrictAppRequest = buildBodyParams();
            return restrictAppWithHttpInfo(token, appId, requestId, teamId, adminappsRestrictAppRequest);
        }

        /**
         * Execute restrictApp request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminappsRestrictAppResponse> _callback) throws ApiException {
            AdminappsRestrictAppRequest adminappsRestrictAppRequest = buildBodyParams();
            return restrictAppAsync(token, appId, requestId, teamId, adminappsRestrictAppRequest, _callback);
        }
    }

    /**
     * 
     * Restrict an app for installation on a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @return RestrictAppRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.apps.restrict"> Documentation</a>
     */
    public RestrictAppRequestBuilder restrictApp(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new RestrictAppRequestBuilder(token);
    }
    private okhttp3.Call searchChannelsCall(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_ids", teamIds));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (searchChannelTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_channel_types", searchChannelTypes));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchChannelsValidateBeforeCall(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling searchChannels(Async)");
        }

        return searchChannelsCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, _callback);

    }


    private ApiResponse<AdminconversationsSearchChannelsResponse> searchChannelsWithHttpInfo(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = searchChannelsValidateBeforeCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, null);
        Type localVarReturnType = new TypeToken<AdminconversationsSearchChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchChannelsAsync(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir, final ApiCallback<AdminconversationsSearchChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchChannelsValidateBeforeCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsSearchChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchChannelsRequestBuilder {
        private final String token;
        private String teamIds;
        private String query;
        private Integer limit;
        private String cursor;
        private String searchChannelTypes;
        private String sort;
        private String sortDir;

        private SearchChannelsRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set teamIds
         * @param teamIds Comma separated string of team IDs, signifying the workspaces to search through. (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder teamIds(String teamIds) {
            this.teamIds = teamIds;
            return this;
        }
        
        /**
         * Set query
         * @param query Name of the the channel to query by. (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set searchChannelTypes
         * @param searchChannelTypes The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](https://slack.dev). (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder searchChannelTypes(String searchChannelTypes) {
            this.searchChannelTypes = searchChannelTypes;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted  (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Build call for searchChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchChannelsCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, _callback);
        }


        /**
         * Execute searchChannels request
         * @return AdminconversationsSearchChannelsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsSearchChannelsResponse execute() throws ApiException {
            ApiResponse<AdminconversationsSearchChannelsResponse> localVarResp = searchChannelsWithHttpInfo(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchChannels request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsSearchChannelsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsSearchChannelsResponse> executeWithHttpInfo() throws ApiException {
            return searchChannelsWithHttpInfo(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir);
        }

        /**
         * Execute searchChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsSearchChannelsResponse> _callback) throws ApiException {
            return searchChannelsAsync(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, _callback);
        }
    }

    /**
     * 
     * Search for public or private channels in an Enterprise organization.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @return SearchChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.search"> Documentation</a>
     */
    public SearchChannelsRequestBuilder searchChannels(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SearchChannelsRequestBuilder(token);
    }
    private okhttp3.Call setAdminUserCall(String token, String teamId, String userId, AdminusersSetAdminUserRequest adminusersSetAdminUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersSetAdminUserRequest;

        // create path and map variables
        String localVarPath = "/admin.users.setAdmin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAdminUserValidateBeforeCall(String token, String teamId, String userId, AdminusersSetAdminUserRequest adminusersSetAdminUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setAdminUser(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setAdminUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setAdminUser(Async)");
        }

        // verify the required parameter 'adminusersSetAdminUserRequest' is set
        if (adminusersSetAdminUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersSetAdminUserRequest' when calling setAdminUser(Async)");
        }

        return setAdminUserCall(token, teamId, userId, adminusersSetAdminUserRequest, _callback);

    }


    private ApiResponse<AdminusersSetAdminUserResponse> setAdminUserWithHttpInfo(String token, String teamId, String userId, AdminusersSetAdminUserRequest adminusersSetAdminUserRequest) throws ApiException {
        okhttp3.Call localVarCall = setAdminUserValidateBeforeCall(token, teamId, userId, adminusersSetAdminUserRequest, null);
        Type localVarReturnType = new TypeToken<AdminusersSetAdminUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setAdminUserAsync(String token, String teamId, String userId, AdminusersSetAdminUserRequest adminusersSetAdminUserRequest, final ApiCallback<AdminusersSetAdminUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setAdminUserValidateBeforeCall(token, teamId, userId, adminusersSetAdminUserRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusersSetAdminUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetAdminUserRequestBuilder {
        private final String token;
        private final String teamId;
        private final String userId;

        private SetAdminUserRequestBuilder(String token, String teamId, String userId) {
            this.token = token;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for setAdminUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersSetAdminUserRequest adminusersSetAdminUserRequest = buildBodyParams();
            return setAdminUserCall(token, teamId, userId, adminusersSetAdminUserRequest, _callback);
        }

        private AdminusersSetAdminUserRequest buildBodyParams() {
            AdminusersSetAdminUserRequest adminusersSetAdminUserRequest = new AdminusersSetAdminUserRequest();
            adminusersSetAdminUserRequest.teamId(this.teamId);
            adminusersSetAdminUserRequest.userId(this.userId);
            return adminusersSetAdminUserRequest;
        }

        /**
         * Execute setAdminUser request
         * @return AdminusersSetAdminUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersSetAdminUserResponse execute() throws ApiException {
            AdminusersSetAdminUserRequest adminusersSetAdminUserRequest = buildBodyParams();
            ApiResponse<AdminusersSetAdminUserResponse> localVarResp = setAdminUserWithHttpInfo(token, teamId, userId, adminusersSetAdminUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setAdminUser request with HTTP info returned
         * @return ApiResponse&lt;AdminusersSetAdminUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersSetAdminUserResponse> executeWithHttpInfo() throws ApiException {
            AdminusersSetAdminUserRequest adminusersSetAdminUserRequest = buildBodyParams();
            return setAdminUserWithHttpInfo(token, teamId, userId, adminusersSetAdminUserRequest);
        }

        /**
         * Execute setAdminUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersSetAdminUserResponse> _callback) throws ApiException {
            AdminusersSetAdminUserRequest adminusersSetAdminUserRequest = buildBodyParams();
            return setAdminUserAsync(token, teamId, userId, adminusersSetAdminUserRequest, _callback);
        }
    }

    /**
     * 
     * Set an existing guest, regular user, or owner to be an admin user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as an admin. (required)
     * @param adminusersSetAdminUserRequest  (required)
     * @return SetAdminUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setAdmin"> Documentation</a>
     */
    public SetAdminUserRequestBuilder setAdminUser(String token, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SetAdminUserRequestBuilder(token, teamId, userId);
    }
    private okhttp3.Call setConversationPrefsCall(String token, String channelId, String prefs, AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsSetConversationPrefsRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.setConversationPrefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (prefs != null) {
            localVarFormParams.put("prefs", prefs);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setConversationPrefsValidateBeforeCall(String token, String channelId, String prefs, AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setConversationPrefs(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling setConversationPrefs(Async)");
        }

        // verify the required parameter 'prefs' is set
        if (prefs == null) {
            throw new ApiException("Missing the required parameter 'prefs' when calling setConversationPrefs(Async)");
        }

        // verify the required parameter 'adminconversationsSetConversationPrefsRequest' is set
        if (adminconversationsSetConversationPrefsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsSetConversationPrefsRequest' when calling setConversationPrefs(Async)");
        }

        return setConversationPrefsCall(token, channelId, prefs, adminconversationsSetConversationPrefsRequest, _callback);

    }


    private ApiResponse<AdminconversationsSetConversationPrefsResponse> setConversationPrefsWithHttpInfo(String token, String channelId, String prefs, AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest) throws ApiException {
        okhttp3.Call localVarCall = setConversationPrefsValidateBeforeCall(token, channelId, prefs, adminconversationsSetConversationPrefsRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsSetConversationPrefsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setConversationPrefsAsync(String token, String channelId, String prefs, AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest, final ApiCallback<AdminconversationsSetConversationPrefsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setConversationPrefsValidateBeforeCall(token, channelId, prefs, adminconversationsSetConversationPrefsRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsSetConversationPrefsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetConversationPrefsRequestBuilder {
        private final String token;
        private final String channelId;
        private final String prefs;

        private SetConversationPrefsRequestBuilder(String token, String channelId, String prefs) {
            this.token = token;
            this.channelId = channelId;
            this.prefs = prefs;
        }

        /**
         * Build call for setConversationPrefs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest = buildBodyParams();
            return setConversationPrefsCall(token, channelId, prefs, adminconversationsSetConversationPrefsRequest, _callback);
        }

        private AdminconversationsSetConversationPrefsRequest buildBodyParams() {
            AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest = new AdminconversationsSetConversationPrefsRequest();
            adminconversationsSetConversationPrefsRequest.channelId(this.channelId);
            adminconversationsSetConversationPrefsRequest.prefs(this.prefs);
            return adminconversationsSetConversationPrefsRequest;
        }

        /**
         * Execute setConversationPrefs request
         * @return AdminconversationsSetConversationPrefsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsSetConversationPrefsResponse execute() throws ApiException {
            AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest = buildBodyParams();
            ApiResponse<AdminconversationsSetConversationPrefsResponse> localVarResp = setConversationPrefsWithHttpInfo(token, channelId, prefs, adminconversationsSetConversationPrefsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setConversationPrefs request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsSetConversationPrefsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsSetConversationPrefsResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest = buildBodyParams();
            return setConversationPrefsWithHttpInfo(token, channelId, prefs, adminconversationsSetConversationPrefsRequest);
        }

        /**
         * Execute setConversationPrefs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsSetConversationPrefsResponse> _callback) throws ApiException {
            AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest = buildBodyParams();
            return setConversationPrefsAsync(token, channelId, prefs, adminconversationsSetConversationPrefsRequest, _callback);
        }
    }

    /**
     * 
     * Set the posting permissions for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to set the prefs for (required)
     * @param prefs The prefs for this channel in a stringified JSON format. (required)
     * @param adminconversationsSetConversationPrefsRequest  (required)
     * @return SetConversationPrefsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setConversationPrefs"> Documentation</a>
     */
    public SetConversationPrefsRequestBuilder setConversationPrefs(String token, String channelId, String prefs) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (prefs == null) throw new IllegalArgumentException("\"prefs\" is required but got null");
            

        return new SetConversationPrefsRequestBuilder(token, channelId, prefs);
    }
    private okhttp3.Call setDefaultChannelsCall(String channelIds, String teamId, String token, AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamssettingsSetDefaultChannelsRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.setDefaultChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultChannelsValidateBeforeCall(String channelIds, String teamId, String token, AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling setDefaultChannels(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setDefaultChannels(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setDefaultChannels(Async)");
        }

        // verify the required parameter 'adminteamssettingsSetDefaultChannelsRequest' is set
        if (adminteamssettingsSetDefaultChannelsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamssettingsSetDefaultChannelsRequest' when calling setDefaultChannels(Async)");
        }

        return setDefaultChannelsCall(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest, _callback);

    }


    private ApiResponse<AdminteamssettingsSetDefaultChannelsResponse> setDefaultChannelsWithHttpInfo(String channelIds, String teamId, String token, AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest) throws ApiException {
        okhttp3.Call localVarCall = setDefaultChannelsValidateBeforeCall(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDefaultChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDefaultChannelsAsync(String channelIds, String teamId, String token, AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest, final ApiCallback<AdminteamssettingsSetDefaultChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultChannelsValidateBeforeCall(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDefaultChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDefaultChannelsRequestBuilder {
        private final String channelIds;
        private final String teamId;
        private final String token;

        private SetDefaultChannelsRequestBuilder(String channelIds, String teamId, String token) {
            this.channelIds = channelIds;
            this.teamId = teamId;
            this.token = token;
        }

        /**
         * Build call for setDefaultChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest = buildBodyParams();
            return setDefaultChannelsCall(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest, _callback);
        }

        private AdminteamssettingsSetDefaultChannelsRequest buildBodyParams() {
            AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest = new AdminteamssettingsSetDefaultChannelsRequest();
            adminteamssettingsSetDefaultChannelsRequest.channelIds(this.channelIds);
            adminteamssettingsSetDefaultChannelsRequest.teamId(this.teamId);
            adminteamssettingsSetDefaultChannelsRequest.token(this.token);
            return adminteamssettingsSetDefaultChannelsRequest;
        }

        /**
         * Execute setDefaultChannels request
         * @return AdminteamssettingsSetDefaultChannelsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsSetDefaultChannelsResponse execute() throws ApiException {
            AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest = buildBodyParams();
            ApiResponse<AdminteamssettingsSetDefaultChannelsResponse> localVarResp = setDefaultChannelsWithHttpInfo(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDefaultChannels request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsSetDefaultChannelsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsSetDefaultChannelsResponse> executeWithHttpInfo() throws ApiException {
            AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest = buildBodyParams();
            return setDefaultChannelsWithHttpInfo(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest);
        }

        /**
         * Execute setDefaultChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsSetDefaultChannelsResponse> _callback) throws ApiException {
            AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest = buildBodyParams();
            return setDefaultChannelsAsync(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest, _callback);
        }
    }

    /**
     * 
     * Set the default channels of a workspace.
     * @param channelIds An array of channel IDs. (required)
     * @param teamId ID for the workspace to set the default channel for. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param adminteamssettingsSetDefaultChannelsRequest  (required)
     * @return SetDefaultChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.setDefaultChannels"> Documentation</a>
     */
    public SetDefaultChannelsRequestBuilder setDefaultChannels(String channelIds, String teamId, String token) throws IllegalArgumentException {
        if (channelIds == null) throw new IllegalArgumentException("\"channelIds\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SetDefaultChannelsRequestBuilder(channelIds, teamId, token);
    }
    private okhttp3.Call setDescriptionCall(String token, String description, String teamId, AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamssettingsSetDescriptionRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.setDescription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDescriptionValidateBeforeCall(String token, String description, String teamId, AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setDescription(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling setDescription(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setDescription(Async)");
        }

        // verify the required parameter 'adminteamssettingsSetDescriptionRequest' is set
        if (adminteamssettingsSetDescriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamssettingsSetDescriptionRequest' when calling setDescription(Async)");
        }

        return setDescriptionCall(token, description, teamId, adminteamssettingsSetDescriptionRequest, _callback);

    }


    private ApiResponse<AdminteamssettingsSetDescriptionResponse> setDescriptionWithHttpInfo(String token, String description, String teamId, AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = setDescriptionValidateBeforeCall(token, description, teamId, adminteamssettingsSetDescriptionRequest, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDescriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDescriptionAsync(String token, String description, String teamId, AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest, final ApiCallback<AdminteamssettingsSetDescriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDescriptionValidateBeforeCall(token, description, teamId, adminteamssettingsSetDescriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDescriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDescriptionRequestBuilder {
        private final String token;
        private final String description;
        private final String teamId;

        private SetDescriptionRequestBuilder(String token, String description, String teamId) {
            this.token = token;
            this.description = description;
            this.teamId = teamId;
        }

        /**
         * Build call for setDescription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest = buildBodyParams();
            return setDescriptionCall(token, description, teamId, adminteamssettingsSetDescriptionRequest, _callback);
        }

        private AdminteamssettingsSetDescriptionRequest buildBodyParams() {
            AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest = new AdminteamssettingsSetDescriptionRequest();
            adminteamssettingsSetDescriptionRequest.description(this.description);
            adminteamssettingsSetDescriptionRequest.teamId(this.teamId);
            return adminteamssettingsSetDescriptionRequest;
        }

        /**
         * Execute setDescription request
         * @return AdminteamssettingsSetDescriptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsSetDescriptionResponse execute() throws ApiException {
            AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest = buildBodyParams();
            ApiResponse<AdminteamssettingsSetDescriptionResponse> localVarResp = setDescriptionWithHttpInfo(token, description, teamId, adminteamssettingsSetDescriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDescription request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsSetDescriptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsSetDescriptionResponse> executeWithHttpInfo() throws ApiException {
            AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest = buildBodyParams();
            return setDescriptionWithHttpInfo(token, description, teamId, adminteamssettingsSetDescriptionRequest);
        }

        /**
         * Execute setDescription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsSetDescriptionResponse> _callback) throws ApiException {
            AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest = buildBodyParams();
            return setDescriptionAsync(token, description, teamId, adminteamssettingsSetDescriptionRequest, _callback);
        }
    }

    /**
     * 
     * Set the description of a given workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param description The new description for the workspace. (required)
     * @param teamId ID for the workspace to set the description for. (required)
     * @param adminteamssettingsSetDescriptionRequest  (required)
     * @return SetDescriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.setDescription"> Documentation</a>
     */
    public SetDescriptionRequestBuilder setDescription(String token, String description, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new SetDescriptionRequestBuilder(token, description, teamId);
    }
    private okhttp3.Call setDiscoverabilityOfWorkspaceCall(String token, String discoverability, String teamId, AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamssettingsSetDiscoverabilityOfWorkspaceRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.setDiscoverability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (discoverability != null) {
            localVarFormParams.put("discoverability", discoverability);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDiscoverabilityOfWorkspaceValidateBeforeCall(String token, String discoverability, String teamId, AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setDiscoverabilityOfWorkspace(Async)");
        }

        // verify the required parameter 'discoverability' is set
        if (discoverability == null) {
            throw new ApiException("Missing the required parameter 'discoverability' when calling setDiscoverabilityOfWorkspace(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setDiscoverabilityOfWorkspace(Async)");
        }

        // verify the required parameter 'adminteamssettingsSetDiscoverabilityOfWorkspaceRequest' is set
        if (adminteamssettingsSetDiscoverabilityOfWorkspaceRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamssettingsSetDiscoverabilityOfWorkspaceRequest' when calling setDiscoverabilityOfWorkspace(Async)");
        }

        return setDiscoverabilityOfWorkspaceCall(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, _callback);

    }


    private ApiResponse<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> setDiscoverabilityOfWorkspaceWithHttpInfo(String token, String discoverability, String teamId, AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest) throws ApiException {
        okhttp3.Call localVarCall = setDiscoverabilityOfWorkspaceValidateBeforeCall(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDiscoverabilityOfWorkspaceAsync(String token, String discoverability, String teamId, AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, final ApiCallback<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDiscoverabilityOfWorkspaceValidateBeforeCall(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDiscoverabilityOfWorkspaceRequestBuilder {
        private final String token;
        private final String discoverability;
        private final String teamId;

        private SetDiscoverabilityOfWorkspaceRequestBuilder(String token, String discoverability, String teamId) {
            this.token = token;
            this.discoverability = discoverability;
            this.teamId = teamId;
        }

        /**
         * Build call for setDiscoverabilityOfWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest = buildBodyParams();
            return setDiscoverabilityOfWorkspaceCall(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, _callback);
        }

        private AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest buildBodyParams() {
            AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest = new AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest();
            adminteamssettingsSetDiscoverabilityOfWorkspaceRequest.discoverability(this.discoverability);
            adminteamssettingsSetDiscoverabilityOfWorkspaceRequest.teamId(this.teamId);
            return adminteamssettingsSetDiscoverabilityOfWorkspaceRequest;
        }

        /**
         * Execute setDiscoverabilityOfWorkspace request
         * @return AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse execute() throws ApiException {
            AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest = buildBodyParams();
            ApiResponse<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> localVarResp = setDiscoverabilityOfWorkspaceWithHttpInfo(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDiscoverabilityOfWorkspace request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest = buildBodyParams();
            return setDiscoverabilityOfWorkspaceWithHttpInfo(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest);
        }

        /**
         * Execute setDiscoverabilityOfWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> _callback) throws ApiException {
            AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest = buildBodyParams();
            return setDiscoverabilityOfWorkspaceAsync(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, _callback);
        }
    }

    /**
     * 
     * An API method that allows admins to set the discoverability of a given workspace
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param discoverability This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;. (required)
     * @param teamId The ID of the workspace to set discoverability on. (required)
     * @param adminteamssettingsSetDiscoverabilityOfWorkspaceRequest  (required)
     * @return SetDiscoverabilityOfWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.setDiscoverability"> Documentation</a>
     */
    public SetDiscoverabilityOfWorkspaceRequestBuilder setDiscoverabilityOfWorkspace(String token, String discoverability, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (discoverability == null) throw new IllegalArgumentException("\"discoverability\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new SetDiscoverabilityOfWorkspaceRequestBuilder(token, discoverability, teamId);
    }
    private okhttp3.Call setExpirationGuestCall(String token, Integer expirationTs, String teamId, String userId, AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersSetExpirationGuestRequest;

        // create path and map variables
        String localVarPath = "/admin.users.setExpiration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expirationTs != null) {
            localVarFormParams.put("expiration_ts", expirationTs);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setExpirationGuestValidateBeforeCall(String token, Integer expirationTs, String teamId, String userId, AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setExpirationGuest(Async)");
        }

        // verify the required parameter 'expirationTs' is set
        if (expirationTs == null) {
            throw new ApiException("Missing the required parameter 'expirationTs' when calling setExpirationGuest(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setExpirationGuest(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setExpirationGuest(Async)");
        }

        // verify the required parameter 'adminusersSetExpirationGuestRequest' is set
        if (adminusersSetExpirationGuestRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersSetExpirationGuestRequest' when calling setExpirationGuest(Async)");
        }

        return setExpirationGuestCall(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest, _callback);

    }


    private ApiResponse<AdminusersSetExpirationGuestResponse> setExpirationGuestWithHttpInfo(String token, Integer expirationTs, String teamId, String userId, AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest) throws ApiException {
        okhttp3.Call localVarCall = setExpirationGuestValidateBeforeCall(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest, null);
        Type localVarReturnType = new TypeToken<AdminusersSetExpirationGuestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setExpirationGuestAsync(String token, Integer expirationTs, String teamId, String userId, AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest, final ApiCallback<AdminusersSetExpirationGuestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setExpirationGuestValidateBeforeCall(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusersSetExpirationGuestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetExpirationGuestRequestBuilder {
        private final String token;
        private final Integer expirationTs;
        private final String teamId;
        private final String userId;

        private SetExpirationGuestRequestBuilder(String token, Integer expirationTs, String teamId, String userId) {
            this.token = token;
            this.expirationTs = expirationTs;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for setExpirationGuest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest = buildBodyParams();
            return setExpirationGuestCall(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest, _callback);
        }

        private AdminusersSetExpirationGuestRequest buildBodyParams() {
            AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest = new AdminusersSetExpirationGuestRequest();
            adminusersSetExpirationGuestRequest.expirationTs(this.expirationTs);
            adminusersSetExpirationGuestRequest.teamId(this.teamId);
            adminusersSetExpirationGuestRequest.userId(this.userId);
            return adminusersSetExpirationGuestRequest;
        }

        /**
         * Execute setExpirationGuest request
         * @return AdminusersSetExpirationGuestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersSetExpirationGuestResponse execute() throws ApiException {
            AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest = buildBodyParams();
            ApiResponse<AdminusersSetExpirationGuestResponse> localVarResp = setExpirationGuestWithHttpInfo(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setExpirationGuest request with HTTP info returned
         * @return ApiResponse&lt;AdminusersSetExpirationGuestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersSetExpirationGuestResponse> executeWithHttpInfo() throws ApiException {
            AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest = buildBodyParams();
            return setExpirationGuestWithHttpInfo(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest);
        }

        /**
         * Execute setExpirationGuest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersSetExpirationGuestResponse> _callback) throws ApiException {
            AdminusersSetExpirationGuestRequest adminusersSetExpirationGuestRequest = buildBodyParams();
            return setExpirationGuestAsync(token, expirationTs, teamId, userId, adminusersSetExpirationGuestRequest, _callback);
        }
    }

    /**
     * 
     * Set an expiration for a guest user
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param expirationTs Timestamp when guest account should be disabled. (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to set an expiration for. (required)
     * @param adminusersSetExpirationGuestRequest  (required)
     * @return SetExpirationGuestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setExpiration"> Documentation</a>
     */
    public SetExpirationGuestRequestBuilder setExpirationGuest(String token, Integer expirationTs, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (expirationTs == null) throw new IllegalArgumentException("\"expirationTs\" is required but got null");
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SetExpirationGuestRequestBuilder(token, expirationTs, teamId, userId);
    }
    private okhttp3.Call setIconCall(String imageUrl, String teamId, String token, AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamssettingsSetIconRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.setIcon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageUrl != null) {
            localVarFormParams.put("image_url", imageUrl);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setIconValidateBeforeCall(String imageUrl, String teamId, String token, AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling setIcon(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setIcon(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setIcon(Async)");
        }

        // verify the required parameter 'adminteamssettingsSetIconRequest' is set
        if (adminteamssettingsSetIconRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamssettingsSetIconRequest' when calling setIcon(Async)");
        }

        return setIconCall(imageUrl, teamId, token, adminteamssettingsSetIconRequest, _callback);

    }


    private ApiResponse<AdminteamssettingsSetIconResponse> setIconWithHttpInfo(String imageUrl, String teamId, String token, AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest) throws ApiException {
        okhttp3.Call localVarCall = setIconValidateBeforeCall(imageUrl, teamId, token, adminteamssettingsSetIconRequest, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetIconResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setIconAsync(String imageUrl, String teamId, String token, AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest, final ApiCallback<AdminteamssettingsSetIconResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setIconValidateBeforeCall(imageUrl, teamId, token, adminteamssettingsSetIconRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetIconResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetIconRequestBuilder {
        private final String imageUrl;
        private final String teamId;
        private final String token;

        private SetIconRequestBuilder(String imageUrl, String teamId, String token) {
            this.imageUrl = imageUrl;
            this.teamId = teamId;
            this.token = token;
        }

        /**
         * Build call for setIcon
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest = buildBodyParams();
            return setIconCall(imageUrl, teamId, token, adminteamssettingsSetIconRequest, _callback);
        }

        private AdminteamssettingsSetIconRequest buildBodyParams() {
            AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest = new AdminteamssettingsSetIconRequest();
            adminteamssettingsSetIconRequest.imageUrl(this.imageUrl);
            adminteamssettingsSetIconRequest.teamId(this.teamId);
            adminteamssettingsSetIconRequest.token(this.token);
            return adminteamssettingsSetIconRequest;
        }

        /**
         * Execute setIcon request
         * @return AdminteamssettingsSetIconResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsSetIconResponse execute() throws ApiException {
            AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest = buildBodyParams();
            ApiResponse<AdminteamssettingsSetIconResponse> localVarResp = setIconWithHttpInfo(imageUrl, teamId, token, adminteamssettingsSetIconRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setIcon request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsSetIconResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsSetIconResponse> executeWithHttpInfo() throws ApiException {
            AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest = buildBodyParams();
            return setIconWithHttpInfo(imageUrl, teamId, token, adminteamssettingsSetIconRequest);
        }

        /**
         * Execute setIcon request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsSetIconResponse> _callback) throws ApiException {
            AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest = buildBodyParams();
            return setIconAsync(imageUrl, teamId, token, adminteamssettingsSetIconRequest, _callback);
        }
    }

    /**
     * 
     * Sets the icon of a workspace.
     * @param imageUrl Image URL for the icon (required)
     * @param teamId ID for the workspace to set the icon for. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param adminteamssettingsSetIconRequest  (required)
     * @return SetIconRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.setIcon"> Documentation</a>
     */
    public SetIconRequestBuilder setIcon(String imageUrl, String teamId, String token) throws IllegalArgumentException {
        if (imageUrl == null) throw new IllegalArgumentException("\"imageUrl\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SetIconRequestBuilder(imageUrl, teamId, token);
    }
    private okhttp3.Call setNameCall(String token, String name, String teamId, AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamssettingsSetNameRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.setName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setNameValidateBeforeCall(String token, String name, String teamId, AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setName(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setName(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setName(Async)");
        }

        // verify the required parameter 'adminteamssettingsSetNameRequest' is set
        if (adminteamssettingsSetNameRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamssettingsSetNameRequest' when calling setName(Async)");
        }

        return setNameCall(token, name, teamId, adminteamssettingsSetNameRequest, _callback);

    }


    private ApiResponse<AdminteamssettingsSetNameResponse> setNameWithHttpInfo(String token, String name, String teamId, AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest) throws ApiException {
        okhttp3.Call localVarCall = setNameValidateBeforeCall(token, name, teamId, adminteamssettingsSetNameRequest, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setNameAsync(String token, String name, String teamId, AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest, final ApiCallback<AdminteamssettingsSetNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setNameValidateBeforeCall(token, name, teamId, adminteamssettingsSetNameRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetNameRequestBuilder {
        private final String token;
        private final String name;
        private final String teamId;

        private SetNameRequestBuilder(String token, String name, String teamId) {
            this.token = token;
            this.name = name;
            this.teamId = teamId;
        }

        /**
         * Build call for setName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest = buildBodyParams();
            return setNameCall(token, name, teamId, adminteamssettingsSetNameRequest, _callback);
        }

        private AdminteamssettingsSetNameRequest buildBodyParams() {
            AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest = new AdminteamssettingsSetNameRequest();
            adminteamssettingsSetNameRequest.name(this.name);
            adminteamssettingsSetNameRequest.teamId(this.teamId);
            return adminteamssettingsSetNameRequest;
        }

        /**
         * Execute setName request
         * @return AdminteamssettingsSetNameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsSetNameResponse execute() throws ApiException {
            AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest = buildBodyParams();
            ApiResponse<AdminteamssettingsSetNameResponse> localVarResp = setNameWithHttpInfo(token, name, teamId, adminteamssettingsSetNameRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setName request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsSetNameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsSetNameResponse> executeWithHttpInfo() throws ApiException {
            AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest = buildBodyParams();
            return setNameWithHttpInfo(token, name, teamId, adminteamssettingsSetNameRequest);
        }

        /**
         * Execute setName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsSetNameResponse> _callback) throws ApiException {
            AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest = buildBodyParams();
            return setNameAsync(token, name, teamId, adminteamssettingsSetNameRequest, _callback);
        }
    }

    /**
     * 
     * Set the name of a given workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param name The new name of the workspace. (required)
     * @param teamId ID for the workspace to set the name for. (required)
     * @param adminteamssettingsSetNameRequest  (required)
     * @return SetNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.setName"> Documentation</a>
     */
    public SetNameRequestBuilder setName(String token, String name, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new SetNameRequestBuilder(token, name, teamId);
    }
    private okhttp3.Call setRegularUserCall(String token, String teamId, String userId, AdminusersSetRegularUserRequest adminusersSetRegularUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersSetRegularUserRequest;

        // create path and map variables
        String localVarPath = "/admin.users.setRegular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRegularUserValidateBeforeCall(String token, String teamId, String userId, AdminusersSetRegularUserRequest adminusersSetRegularUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setRegularUser(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setRegularUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setRegularUser(Async)");
        }

        // verify the required parameter 'adminusersSetRegularUserRequest' is set
        if (adminusersSetRegularUserRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersSetRegularUserRequest' when calling setRegularUser(Async)");
        }

        return setRegularUserCall(token, teamId, userId, adminusersSetRegularUserRequest, _callback);

    }


    private ApiResponse<AdminusersSetRegularUserResponse> setRegularUserWithHttpInfo(String token, String teamId, String userId, AdminusersSetRegularUserRequest adminusersSetRegularUserRequest) throws ApiException {
        okhttp3.Call localVarCall = setRegularUserValidateBeforeCall(token, teamId, userId, adminusersSetRegularUserRequest, null);
        Type localVarReturnType = new TypeToken<AdminusersSetRegularUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setRegularUserAsync(String token, String teamId, String userId, AdminusersSetRegularUserRequest adminusersSetRegularUserRequest, final ApiCallback<AdminusersSetRegularUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRegularUserValidateBeforeCall(token, teamId, userId, adminusersSetRegularUserRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusersSetRegularUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetRegularUserRequestBuilder {
        private final String token;
        private final String teamId;
        private final String userId;

        private SetRegularUserRequestBuilder(String token, String teamId, String userId) {
            this.token = token;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for setRegularUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersSetRegularUserRequest adminusersSetRegularUserRequest = buildBodyParams();
            return setRegularUserCall(token, teamId, userId, adminusersSetRegularUserRequest, _callback);
        }

        private AdminusersSetRegularUserRequest buildBodyParams() {
            AdminusersSetRegularUserRequest adminusersSetRegularUserRequest = new AdminusersSetRegularUserRequest();
            adminusersSetRegularUserRequest.teamId(this.teamId);
            adminusersSetRegularUserRequest.userId(this.userId);
            return adminusersSetRegularUserRequest;
        }

        /**
         * Execute setRegularUser request
         * @return AdminusersSetRegularUserResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersSetRegularUserResponse execute() throws ApiException {
            AdminusersSetRegularUserRequest adminusersSetRegularUserRequest = buildBodyParams();
            ApiResponse<AdminusersSetRegularUserResponse> localVarResp = setRegularUserWithHttpInfo(token, teamId, userId, adminusersSetRegularUserRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setRegularUser request with HTTP info returned
         * @return ApiResponse&lt;AdminusersSetRegularUserResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersSetRegularUserResponse> executeWithHttpInfo() throws ApiException {
            AdminusersSetRegularUserRequest adminusersSetRegularUserRequest = buildBodyParams();
            return setRegularUserWithHttpInfo(token, teamId, userId, adminusersSetRegularUserRequest);
        }

        /**
         * Execute setRegularUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersSetRegularUserResponse> _callback) throws ApiException {
            AdminusersSetRegularUserRequest adminusersSetRegularUserRequest = buildBodyParams();
            return setRegularUserAsync(token, teamId, userId, adminusersSetRegularUserRequest, _callback);
        }
    }

    /**
     * 
     * Set an existing guest user, admin user, or owner to be a regular user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId The ID of the user to designate as a regular user. (required)
     * @param adminusersSetRegularUserRequest  (required)
     * @return SetRegularUserRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setRegular"> Documentation</a>
     */
    public SetRegularUserRequestBuilder setRegularUser(String token, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SetRegularUserRequestBuilder(token, teamId, userId);
    }
    private okhttp3.Call setTeamsWorkspaceConnectionCall(String token, String channelId, AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest, Boolean orgChannel, String targetTeamIds, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsSetTeamsWorkspaceConnectionRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.setTeams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (orgChannel != null) {
            localVarFormParams.put("org_channel", orgChannel);
        }

        if (targetTeamIds != null) {
            localVarFormParams.put("target_team_ids", targetTeamIds);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTeamsWorkspaceConnectionValidateBeforeCall(String token, String channelId, AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest, Boolean orgChannel, String targetTeamIds, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setTeamsWorkspaceConnection(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling setTeamsWorkspaceConnection(Async)");
        }

        // verify the required parameter 'adminconversationsSetTeamsWorkspaceConnectionRequest' is set
        if (adminconversationsSetTeamsWorkspaceConnectionRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsSetTeamsWorkspaceConnectionRequest' when calling setTeamsWorkspaceConnection(Async)");
        }

        return setTeamsWorkspaceConnectionCall(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId, _callback);

    }


    private ApiResponse<AdminconversationsSetTeamsWorkspaceConnectionResponse> setTeamsWorkspaceConnectionWithHttpInfo(String token, String channelId, AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest, Boolean orgChannel, String targetTeamIds, String teamId) throws ApiException {
        okhttp3.Call localVarCall = setTeamsWorkspaceConnectionValidateBeforeCall(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId, null);
        Type localVarReturnType = new TypeToken<AdminconversationsSetTeamsWorkspaceConnectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setTeamsWorkspaceConnectionAsync(String token, String channelId, AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest, Boolean orgChannel, String targetTeamIds, String teamId, final ApiCallback<AdminconversationsSetTeamsWorkspaceConnectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTeamsWorkspaceConnectionValidateBeforeCall(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsSetTeamsWorkspaceConnectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetTeamsWorkspaceConnectionRequestBuilder {
        private final String token;
        private final String channelId;
        private Boolean orgChannel;
        private String targetTeamIds;
        private String teamId;

        private SetTeamsWorkspaceConnectionRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Set orgChannel
         * @param orgChannel True if channel has to be converted to an org channel (optional)
         * @return SetTeamsWorkspaceConnectionRequestBuilder
         */
        public SetTeamsWorkspaceConnectionRequestBuilder orgChannel(Boolean orgChannel) {
            this.orgChannel = orgChannel;
            return this;
        }
        
        /**
         * Set targetTeamIds
         * @param targetTeamIds A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
         * @return SetTeamsWorkspaceConnectionRequestBuilder
         */
        public SetTeamsWorkspaceConnectionRequestBuilder targetTeamIds(String targetTeamIds) {
            this.targetTeamIds = targetTeamIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
         * @return SetTeamsWorkspaceConnectionRequestBuilder
         */
        public SetTeamsWorkspaceConnectionRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for setTeamsWorkspaceConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest = buildBodyParams();
            return setTeamsWorkspaceConnectionCall(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId, _callback);
        }

        private AdminconversationsSetTeamsWorkspaceConnectionRequest buildBodyParams() {
            AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest = new AdminconversationsSetTeamsWorkspaceConnectionRequest();
            adminconversationsSetTeamsWorkspaceConnectionRequest.channelId(this.channelId);
            adminconversationsSetTeamsWorkspaceConnectionRequest.orgChannel(this.orgChannel);
            adminconversationsSetTeamsWorkspaceConnectionRequest.targetTeamIds(this.targetTeamIds);
            adminconversationsSetTeamsWorkspaceConnectionRequest.teamId(this.teamId);
            return adminconversationsSetTeamsWorkspaceConnectionRequest;
        }

        /**
         * Execute setTeamsWorkspaceConnection request
         * @return AdminconversationsSetTeamsWorkspaceConnectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsSetTeamsWorkspaceConnectionResponse execute() throws ApiException {
            AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest = buildBodyParams();
            ApiResponse<AdminconversationsSetTeamsWorkspaceConnectionResponse> localVarResp = setTeamsWorkspaceConnectionWithHttpInfo(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setTeamsWorkspaceConnection request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsSetTeamsWorkspaceConnectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsSetTeamsWorkspaceConnectionResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest = buildBodyParams();
            return setTeamsWorkspaceConnectionWithHttpInfo(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId);
        }

        /**
         * Execute setTeamsWorkspaceConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsSetTeamsWorkspaceConnectionResponse> _callback) throws ApiException {
            AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest = buildBodyParams();
            return setTeamsWorkspaceConnectionAsync(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId, _callback);
        }
    }

    /**
     * 
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param adminconversationsSetTeamsWorkspaceConnectionRequest  (required)
     * @return SetTeamsWorkspaceConnectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setTeams"> Documentation</a>
     */
    public SetTeamsWorkspaceConnectionRequestBuilder setTeamsWorkspaceConnection(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new SetTeamsWorkspaceConnectionRequestBuilder(token, channelId);
    }
    private okhttp3.Call setWorkspaceOwnerCall(String token, String teamId, String userId, AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminusersSetWorkspaceOwnerRequest;

        // create path and map variables
        String localVarPath = "/admin.users.setOwner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setWorkspaceOwnerValidateBeforeCall(String token, String teamId, String userId, AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setWorkspaceOwner(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setWorkspaceOwner(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling setWorkspaceOwner(Async)");
        }

        // verify the required parameter 'adminusersSetWorkspaceOwnerRequest' is set
        if (adminusersSetWorkspaceOwnerRequest == null) {
            throw new ApiException("Missing the required parameter 'adminusersSetWorkspaceOwnerRequest' when calling setWorkspaceOwner(Async)");
        }

        return setWorkspaceOwnerCall(token, teamId, userId, adminusersSetWorkspaceOwnerRequest, _callback);

    }


    private ApiResponse<AdminusersSetWorkspaceOwnerResponse> setWorkspaceOwnerWithHttpInfo(String token, String teamId, String userId, AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest) throws ApiException {
        okhttp3.Call localVarCall = setWorkspaceOwnerValidateBeforeCall(token, teamId, userId, adminusersSetWorkspaceOwnerRequest, null);
        Type localVarReturnType = new TypeToken<AdminusersSetWorkspaceOwnerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setWorkspaceOwnerAsync(String token, String teamId, String userId, AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest, final ApiCallback<AdminusersSetWorkspaceOwnerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setWorkspaceOwnerValidateBeforeCall(token, teamId, userId, adminusersSetWorkspaceOwnerRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminusersSetWorkspaceOwnerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetWorkspaceOwnerRequestBuilder {
        private final String token;
        private final String teamId;
        private final String userId;

        private SetWorkspaceOwnerRequestBuilder(String token, String teamId, String userId) {
            this.token = token;
            this.teamId = teamId;
            this.userId = userId;
        }

        /**
         * Build call for setWorkspaceOwner
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest = buildBodyParams();
            return setWorkspaceOwnerCall(token, teamId, userId, adminusersSetWorkspaceOwnerRequest, _callback);
        }

        private AdminusersSetWorkspaceOwnerRequest buildBodyParams() {
            AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest = new AdminusersSetWorkspaceOwnerRequest();
            adminusersSetWorkspaceOwnerRequest.teamId(this.teamId);
            adminusersSetWorkspaceOwnerRequest.userId(this.userId);
            return adminusersSetWorkspaceOwnerRequest;
        }

        /**
         * Execute setWorkspaceOwner request
         * @return AdminusersSetWorkspaceOwnerResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminusersSetWorkspaceOwnerResponse execute() throws ApiException {
            AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest = buildBodyParams();
            ApiResponse<AdminusersSetWorkspaceOwnerResponse> localVarResp = setWorkspaceOwnerWithHttpInfo(token, teamId, userId, adminusersSetWorkspaceOwnerRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setWorkspaceOwner request with HTTP info returned
         * @return ApiResponse&lt;AdminusersSetWorkspaceOwnerResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminusersSetWorkspaceOwnerResponse> executeWithHttpInfo() throws ApiException {
            AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest = buildBodyParams();
            return setWorkspaceOwnerWithHttpInfo(token, teamId, userId, adminusersSetWorkspaceOwnerRequest);
        }

        /**
         * Execute setWorkspaceOwner request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminusersSetWorkspaceOwnerResponse> _callback) throws ApiException {
            AdminusersSetWorkspaceOwnerRequest adminusersSetWorkspaceOwnerRequest = buildBodyParams();
            return setWorkspaceOwnerAsync(token, teamId, userId, adminusersSetWorkspaceOwnerRequest, _callback);
        }
    }

    /**
     * 
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param userId Id of the user to promote to owner. (required)
     * @param adminusersSetWorkspaceOwnerRequest  (required)
     * @return SetWorkspaceOwnerRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.setOwner"> Documentation</a>
     */
    public SetWorkspaceOwnerRequestBuilder setWorkspaceOwner(String token, String teamId, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new SetWorkspaceOwnerRequestBuilder(token, teamId, userId);
    }
    private okhttp3.Call unarchiveChannelCall(String token, String channelId, AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsUnarchiveChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.unarchive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unarchiveChannelValidateBeforeCall(String token, String channelId, AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling unarchiveChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling unarchiveChannel(Async)");
        }

        // verify the required parameter 'adminconversationsUnarchiveChannelRequest' is set
        if (adminconversationsUnarchiveChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsUnarchiveChannelRequest' when calling unarchiveChannel(Async)");
        }

        return unarchiveChannelCall(token, channelId, adminconversationsUnarchiveChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsUnarchiveChannelResponse> unarchiveChannelWithHttpInfo(String token, String channelId, AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = unarchiveChannelValidateBeforeCall(token, channelId, adminconversationsUnarchiveChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsUnarchiveChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unarchiveChannelAsync(String token, String channelId, AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest, final ApiCallback<AdminconversationsUnarchiveChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unarchiveChannelValidateBeforeCall(token, channelId, adminconversationsUnarchiveChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsUnarchiveChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnarchiveChannelRequestBuilder {
        private final String token;
        private final String channelId;

        private UnarchiveChannelRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Build call for unarchiveChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest = buildBodyParams();
            return unarchiveChannelCall(token, channelId, adminconversationsUnarchiveChannelRequest, _callback);
        }

        private AdminconversationsUnarchiveChannelRequest buildBodyParams() {
            AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest = new AdminconversationsUnarchiveChannelRequest();
            adminconversationsUnarchiveChannelRequest.channelId(this.channelId);
            return adminconversationsUnarchiveChannelRequest;
        }

        /**
         * Execute unarchiveChannel request
         * @return AdminconversationsUnarchiveChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsUnarchiveChannelResponse execute() throws ApiException {
            AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsUnarchiveChannelResponse> localVarResp = unarchiveChannelWithHttpInfo(token, channelId, adminconversationsUnarchiveChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unarchiveChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsUnarchiveChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsUnarchiveChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest = buildBodyParams();
            return unarchiveChannelWithHttpInfo(token, channelId, adminconversationsUnarchiveChannelRequest);
        }

        /**
         * Execute unarchiveChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsUnarchiveChannelResponse> _callback) throws ApiException {
            AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest = buildBodyParams();
            return unarchiveChannelAsync(token, channelId, adminconversationsUnarchiveChannelRequest, _callback);
        }
    }

    /**
     * 
     * Unarchive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to unarchive. (required)
     * @param adminconversationsUnarchiveChannelRequest  (required)
     * @return UnarchiveChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.unarchive"> Documentation</a>
     */
    public UnarchiveChannelRequestBuilder unarchiveChannel(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new UnarchiveChannelRequestBuilder(token, channelId);
    }
}
