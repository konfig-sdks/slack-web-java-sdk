/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.TeamAccessLogsResponse;
import com.konfigthis.client.model.TeamAccessLogsdefaultResponse;
import com.konfigthis.client.model.TeamBillableInfoResponse;
import com.konfigthis.client.model.TeamBillableInfodefaultResponse;
import com.konfigthis.client.model.TeamInfoResponse;
import com.konfigthis.client.model.TeamInfodefaultResponse;
import com.konfigthis.client.model.TeamIntegrationLogsResponse;
import com.konfigthis.client.model.TeamIntegrationLogsdefaultResponse;
import com.konfigthis.client.model.TeamprofileGetProfileResponse;
import com.konfigthis.client.model.TeamprofileGetProfiledefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TeamApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TeamApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call accessLogsCall(String token, String before, String count, String page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team.accessLogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessLogsValidateBeforeCall(String token, String before, String count, String page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling accessLogs(Async)");
        }

        return accessLogsCall(token, before, count, page, _callback);

    }


    private ApiResponse<TeamAccessLogsResponse> accessLogsWithHttpInfo(String token, String before, String count, String page) throws ApiException {
        okhttp3.Call localVarCall = accessLogsValidateBeforeCall(token, before, count, page, null);
        Type localVarReturnType = new TypeToken<TeamAccessLogsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call accessLogsAsync(String token, String before, String count, String page, final ApiCallback<TeamAccessLogsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessLogsValidateBeforeCall(token, before, count, page, _callback);
        Type localVarReturnType = new TypeToken<TeamAccessLogsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AccessLogsRequestBuilder {
        private final String token;
        private String before;
        private String count;
        private String page;

        private AccessLogsRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set before
         * @param before End of time range of logs to include in results (inclusive). (optional)
         * @return AccessLogsRequestBuilder
         */
        public AccessLogsRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set count
         * @param count  (optional)
         * @return AccessLogsRequestBuilder
         */
        public AccessLogsRequestBuilder count(String count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return AccessLogsRequestBuilder
         */
        public AccessLogsRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Build call for accessLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> This response demonstrates pagination and two access log entries. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> A workspace must be on a paid plan to use this method, otherwise the &#x60;paid_only&#x60; error is thrown: </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return accessLogsCall(token, before, count, page, _callback);
        }


        /**
         * Execute accessLogs request
         * @return TeamAccessLogsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> This response demonstrates pagination and two access log entries. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> A workspace must be on a paid plan to use this method, otherwise the &#x60;paid_only&#x60; error is thrown: </td><td>  -  </td></tr>
         </table>
         */
        public TeamAccessLogsResponse execute() throws ApiException {
            ApiResponse<TeamAccessLogsResponse> localVarResp = accessLogsWithHttpInfo(token, before, count, page);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute accessLogs request with HTTP info returned
         * @return ApiResponse&lt;TeamAccessLogsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> This response demonstrates pagination and two access log entries. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> A workspace must be on a paid plan to use this method, otherwise the &#x60;paid_only&#x60; error is thrown: </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamAccessLogsResponse> executeWithHttpInfo() throws ApiException {
            return accessLogsWithHttpInfo(token, before, count, page);
        }

        /**
         * Execute accessLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> This response demonstrates pagination and two access log entries. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> A workspace must be on a paid plan to use this method, otherwise the &#x60;paid_only&#x60; error is thrown: </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamAccessLogsResponse> _callback) throws ApiException {
            return accessLogsAsync(token, before, count, page, _callback);
        }
    }

    /**
     * 
     * Gets the access logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @return AccessLogsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> This response demonstrates pagination and two access log entries. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> A workspace must be on a paid plan to use this method, otherwise the &#x60;paid_only&#x60; error is thrown: </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.accessLogs"> Documentation</a>
     */
    public AccessLogsRequestBuilder accessLogs(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new AccessLogsRequestBuilder(token);
    }
    private okhttp3.Call billableInfoCall(String token, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team.billableInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call billableInfoValidateBeforeCall(String token, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling billableInfo(Async)");
        }

        return billableInfoCall(token, user, _callback);

    }


    private ApiResponse<TeamBillableInfoResponse> billableInfoWithHttpInfo(String token, String user) throws ApiException {
        okhttp3.Call localVarCall = billableInfoValidateBeforeCall(token, user, null);
        Type localVarReturnType = new TypeToken<TeamBillableInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call billableInfoAsync(String token, String user, final ApiCallback<TeamBillableInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = billableInfoValidateBeforeCall(token, user, _callback);
        Type localVarReturnType = new TypeToken<TeamBillableInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BillableInfoRequestBuilder {
        private final String token;
        private String user;

        private BillableInfoRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set user
         * @param user A user to retrieve the billable information for. Defaults to all users. (optional)
         * @return BillableInfoRequestBuilder
         */
        public BillableInfoRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for billableInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return billableInfoCall(token, user, _callback);
        }


        /**
         * Execute billableInfo request
         * @return TeamBillableInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public TeamBillableInfoResponse execute() throws ApiException {
            ApiResponse<TeamBillableInfoResponse> localVarResp = billableInfoWithHttpInfo(token, user);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute billableInfo request with HTTP info returned
         * @return ApiResponse&lt;TeamBillableInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamBillableInfoResponse> executeWithHttpInfo() throws ApiException {
            return billableInfoWithHttpInfo(token, user);
        }

        /**
         * Execute billableInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamBillableInfoResponse> _callback) throws ApiException {
            return billableInfoAsync(token, user, _callback);
        }
    }

    /**
     * 
     * Gets billable users information for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @return BillableInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.billableInfo"> Documentation</a>
     */
    public BillableInfoRequestBuilder billableInfo(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new BillableInfoRequestBuilder(token);
    }
    private okhttp3.Call getProfileCall(String token, String visibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team.profile.get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileValidateBeforeCall(String token, String visibility, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getProfile(Async)");
        }

        return getProfileCall(token, visibility, _callback);

    }


    private ApiResponse<TeamprofileGetProfileResponse> getProfileWithHttpInfo(String token, String visibility) throws ApiException {
        okhttp3.Call localVarCall = getProfileValidateBeforeCall(token, visibility, null);
        Type localVarReturnType = new TypeToken<TeamprofileGetProfileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProfileAsync(String token, String visibility, final ApiCallback<TeamprofileGetProfileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileValidateBeforeCall(token, visibility, _callback);
        Type localVarReturnType = new TypeToken<TeamprofileGetProfileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProfileRequestBuilder {
        private final String token;
        private String visibility;

        private GetProfileRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set visibility
         * @param visibility Filter by visibility. (optional)
         * @return GetProfileRequestBuilder
         */
        public GetProfileRequestBuilder visibility(String visibility) {
            this.visibility = visibility;
            return this;
        }
        
        /**
         * Build call for getProfile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProfileCall(token, visibility, _callback);
        }


        /**
         * Execute getProfile request
         * @return TeamprofileGetProfileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public TeamprofileGetProfileResponse execute() throws ApiException {
            ApiResponse<TeamprofileGetProfileResponse> localVarResp = getProfileWithHttpInfo(token, visibility);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProfile request with HTTP info returned
         * @return ApiResponse&lt;TeamprofileGetProfileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamprofileGetProfileResponse> executeWithHttpInfo() throws ApiException {
            return getProfileWithHttpInfo(token, visibility);
        }

        /**
         * Execute getProfile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamprofileGetProfileResponse> _callback) throws ApiException {
            return getProfileAsync(token, visibility, _callback);
        }
    }

    /**
     * 
     * Retrieve a team&#39;s profile.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @return GetProfileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.profile.get"> Documentation</a>
     */
    public GetProfileRequestBuilder getProfile(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new GetProfileRequestBuilder(token);
    }
    private okhttp3.Call infoCall(String token, String team, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (team != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team", team));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoValidateBeforeCall(String token, String team, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling info(Async)");
        }

        return infoCall(token, team, _callback);

    }


    private ApiResponse<TeamInfoResponse> infoWithHttpInfo(String token, String team) throws ApiException {
        okhttp3.Call localVarCall = infoValidateBeforeCall(token, team, null);
        Type localVarReturnType = new TypeToken<TeamInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call infoAsync(String token, String team, final ApiCallback<TeamInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoValidateBeforeCall(token, team, _callback);
        Type localVarReturnType = new TypeToken<TeamInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InfoRequestBuilder {
        private final String token;
        private String team;

        private InfoRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set team
         * @param team Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder team(String team) {
            this.team = team;
            return this;
        }
        
        /**
         * Build call for info
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return infoCall(token, team, _callback);
        }


        /**
         * Execute info request
         * @return TeamInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public TeamInfoResponse execute() throws ApiException {
            ApiResponse<TeamInfoResponse> localVarResp = infoWithHttpInfo(token, team);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute info request with HTTP info returned
         * @return ApiResponse&lt;TeamInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamInfoResponse> executeWithHttpInfo() throws ApiException {
            return infoWithHttpInfo(token, team);
        }

        /**
         * Execute info request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamInfoResponse> _callback) throws ApiException {
            return infoAsync(token, team, _callback);
        }
    }

    /**
     * 
     * Gets information about the current team.
     * @param token Authentication token. Requires scope: &#x60;team:read&#x60; (required)
     * @return InfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.info"> Documentation</a>
     */
    public InfoRequestBuilder info(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new InfoRequestBuilder(token);
    }
    private okhttp3.Call integrationLogsCall(String token, String appId, String changeType, String count, String page, String serviceId, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/team.integrationLogs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_id", appId));
        }

        if (changeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("change_type", changeType));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (serviceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_id", serviceId));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationLogsValidateBeforeCall(String token, String appId, String changeType, String count, String page, String serviceId, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling integrationLogs(Async)");
        }

        return integrationLogsCall(token, appId, changeType, count, page, serviceId, user, _callback);

    }


    private ApiResponse<TeamIntegrationLogsResponse> integrationLogsWithHttpInfo(String token, String appId, String changeType, String count, String page, String serviceId, String user) throws ApiException {
        okhttp3.Call localVarCall = integrationLogsValidateBeforeCall(token, appId, changeType, count, page, serviceId, user, null);
        Type localVarReturnType = new TypeToken<TeamIntegrationLogsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call integrationLogsAsync(String token, String appId, String changeType, String count, String page, String serviceId, String user, final ApiCallback<TeamIntegrationLogsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationLogsValidateBeforeCall(token, appId, changeType, count, page, serviceId, user, _callback);
        Type localVarReturnType = new TypeToken<TeamIntegrationLogsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class IntegrationLogsRequestBuilder {
        private final String token;
        private String appId;
        private String changeType;
        private String count;
        private String page;
        private String serviceId;
        private String user;

        private IntegrationLogsRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set appId
         * @param appId Filter logs to this Slack app. Defaults to all logs. (optional)
         * @return IntegrationLogsRequestBuilder
         */
        public IntegrationLogsRequestBuilder appId(String appId) {
            this.appId = appId;
            return this;
        }
        
        /**
         * Set changeType
         * @param changeType Filter logs with this change type. Defaults to all logs. (optional)
         * @return IntegrationLogsRequestBuilder
         */
        public IntegrationLogsRequestBuilder changeType(String changeType) {
            this.changeType = changeType;
            return this;
        }
        
        /**
         * Set count
         * @param count  (optional)
         * @return IntegrationLogsRequestBuilder
         */
        public IntegrationLogsRequestBuilder count(String count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return IntegrationLogsRequestBuilder
         */
        public IntegrationLogsRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set serviceId
         * @param serviceId Filter logs to this service. Defaults to all logs. (optional)
         * @return IntegrationLogsRequestBuilder
         */
        public IntegrationLogsRequestBuilder serviceId(String serviceId) {
            this.serviceId = serviceId;
            return this;
        }
        
        /**
         * Set user
         * @param user Filter logs generated by this user’s actions. Defaults to all logs. (optional)
         * @return IntegrationLogsRequestBuilder
         */
        public IntegrationLogsRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for integrationLogs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return integrationLogsCall(token, appId, changeType, count, page, serviceId, user, _callback);
        }


        /**
         * Execute integrationLogs request
         * @return TeamIntegrationLogsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public TeamIntegrationLogsResponse execute() throws ApiException {
            ApiResponse<TeamIntegrationLogsResponse> localVarResp = integrationLogsWithHttpInfo(token, appId, changeType, count, page, serviceId, user);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute integrationLogs request with HTTP info returned
         * @return ApiResponse&lt;TeamIntegrationLogsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeamIntegrationLogsResponse> executeWithHttpInfo() throws ApiException {
            return integrationLogsWithHttpInfo(token, appId, changeType, count, page, serviceId, user);
        }

        /**
         * Execute integrationLogs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeamIntegrationLogsResponse> _callback) throws ApiException {
            return integrationLogsAsync(token, appId, changeType, count, page, serviceId, user, _callback);
        }
    }

    /**
     * 
     * Gets the integration logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60; (required)
     * @return IntegrationLogsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/team.integrationLogs"> Documentation</a>
     */
    public IntegrationLogsRequestBuilder integrationLogs(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new IntegrationLogsRequestBuilder(token);
    }
}
