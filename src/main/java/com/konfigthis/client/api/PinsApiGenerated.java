/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PinsAddRequest;
import com.konfigthis.client.model.PinsAddResponse;
import com.konfigthis.client.model.PinsAdddefaultResponse;
import com.konfigthis.client.model.PinsListResponseInner;
import com.konfigthis.client.model.PinsListdefaultResponse;
import com.konfigthis.client.model.PinsRemoveRequest;
import com.konfigthis.client.model.PinsRemoveResponse;
import com.konfigthis.client.model.PinsRemovedefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PinsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PinsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PinsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCall(String token, String channel, PinsAddRequest pinsAddRequest, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pinsAddRequest;

        // create path and map variables
        String localVarPath = "/pins.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (timestamp != null) {
            localVarFormParams.put("timestamp", timestamp);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addValidateBeforeCall(String token, String channel, PinsAddRequest pinsAddRequest, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling add(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling add(Async)");
        }

        // verify the required parameter 'pinsAddRequest' is set
        if (pinsAddRequest == null) {
            throw new ApiException("Missing the required parameter 'pinsAddRequest' when calling add(Async)");
        }

        return addCall(token, channel, pinsAddRequest, timestamp, _callback);

    }


    private ApiResponse<PinsAddResponse> addWithHttpInfo(String token, String channel, PinsAddRequest pinsAddRequest, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = addValidateBeforeCall(token, channel, pinsAddRequest, timestamp, null);
        Type localVarReturnType = new TypeToken<PinsAddResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAsync(String token, String channel, PinsAddRequest pinsAddRequest, String timestamp, final ApiCallback<PinsAddResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addValidateBeforeCall(token, channel, pinsAddRequest, timestamp, _callback);
        Type localVarReturnType = new TypeToken<PinsAddResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddRequestBuilder {
        private final String token;
        private final String channel;
        private String timestamp;

        private AddRequestBuilder(String token, String channel) {
            this.token = token;
            this.channel = channel;
        }

        /**
         * Set timestamp
         * @param timestamp Timestamp of the message to pin. (optional)
         * @return AddRequestBuilder
         */
        public AddRequestBuilder timestamp(String timestamp) {
            this.timestamp = timestamp;
            return this;
        }
        
        /**
         * Build call for add
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PinsAddRequest pinsAddRequest = buildBodyParams();
            return addCall(token, channel, pinsAddRequest, timestamp, _callback);
        }

        private PinsAddRequest buildBodyParams() {
            PinsAddRequest pinsAddRequest = new PinsAddRequest();
            pinsAddRequest.channel(this.channel);
            pinsAddRequest.timestamp(this.timestamp);
            return pinsAddRequest;
        }

        /**
         * Execute add request
         * @return PinsAddResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public PinsAddResponse execute() throws ApiException {
            PinsAddRequest pinsAddRequest = buildBodyParams();
            ApiResponse<PinsAddResponse> localVarResp = addWithHttpInfo(token, channel, pinsAddRequest, timestamp);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute add request with HTTP info returned
         * @return ApiResponse&lt;PinsAddResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PinsAddResponse> executeWithHttpInfo() throws ApiException {
            PinsAddRequest pinsAddRequest = buildBodyParams();
            return addWithHttpInfo(token, channel, pinsAddRequest, timestamp);
        }

        /**
         * Execute add request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PinsAddResponse> _callback) throws ApiException {
            PinsAddRequest pinsAddRequest = buildBodyParams();
            return addAsync(token, channel, pinsAddRequest, timestamp, _callback);
        }
    }

    /**
     * 
     * Pins an item to a channel.
     * @param token Authentication token. Requires scope: &#x60;pins:write&#x60; (required)
     * @param channel Channel to pin the item in. (required)
     * @param pinsAddRequest  (required)
     * @return AddRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/pins.add"> Documentation</a>
     */
    public AddRequestBuilder add(String token, String channel) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channel == null) throw new IllegalArgumentException("\"channel\" is required but got null");
            

        return new AddRequestBuilder(token, channel);
    }
    private okhttp3.Call listCall(String token, String channel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pins.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String token, String channel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling list(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling list(Async)");
        }

        return listCall(token, channel, _callback);

    }


    private ApiResponse<List<PinsListResponseInner>> listWithHttpInfo(String token, String channel) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(token, channel, null);
        Type localVarReturnType = new TypeToken<List<PinsListResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String token, String channel, final ApiCallback<List<PinsListResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(token, channel, _callback);
        Type localVarReturnType = new TypeToken<List<PinsListResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String token;
        private final String channel;

        private ListRequestBuilder(String token, String channel) {
            this.token = token;
            this.channel = channel;
        }

        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(token, channel, _callback);
        }


        /**
         * Execute list request
         * @return List&lt;PinsListResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public List<PinsListResponseInner> execute() throws ApiException {
            ApiResponse<List<PinsListResponseInner>> localVarResp = listWithHttpInfo(token, channel);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PinsListResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PinsListResponseInner>> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(token, channel);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PinsListResponseInner>> _callback) throws ApiException {
            return listAsync(token, channel, _callback);
        }
    }

    /**
     * 
     * Lists items pinned to a channel.
     * @param token Authentication token. Requires scope: &#x60;pins:read&#x60; (required)
     * @param channel Channel to get pinned items for. (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/pins.list"> Documentation</a>
     */
    public ListRequestBuilder list(String token, String channel) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channel == null) throw new IllegalArgumentException("\"channel\" is required but got null");
            

        return new ListRequestBuilder(token, channel);
    }
    private okhttp3.Call removeCall(String token, String channel, PinsRemoveRequest pinsRemoveRequest, String timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pinsRemoveRequest;

        // create path and map variables
        String localVarPath = "/pins.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channel != null) {
            localVarFormParams.put("channel", channel);
        }

        if (timestamp != null) {
            localVarFormParams.put("timestamp", timestamp);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeValidateBeforeCall(String token, String channel, PinsRemoveRequest pinsRemoveRequest, String timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling remove(Async)");
        }

        // verify the required parameter 'channel' is set
        if (channel == null) {
            throw new ApiException("Missing the required parameter 'channel' when calling remove(Async)");
        }

        // verify the required parameter 'pinsRemoveRequest' is set
        if (pinsRemoveRequest == null) {
            throw new ApiException("Missing the required parameter 'pinsRemoveRequest' when calling remove(Async)");
        }

        return removeCall(token, channel, pinsRemoveRequest, timestamp, _callback);

    }


    private ApiResponse<PinsRemoveResponse> removeWithHttpInfo(String token, String channel, PinsRemoveRequest pinsRemoveRequest, String timestamp) throws ApiException {
        okhttp3.Call localVarCall = removeValidateBeforeCall(token, channel, pinsRemoveRequest, timestamp, null);
        Type localVarReturnType = new TypeToken<PinsRemoveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeAsync(String token, String channel, PinsRemoveRequest pinsRemoveRequest, String timestamp, final ApiCallback<PinsRemoveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeValidateBeforeCall(token, channel, pinsRemoveRequest, timestamp, _callback);
        Type localVarReturnType = new TypeToken<PinsRemoveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveRequestBuilder {
        private final String token;
        private final String channel;
        private String timestamp;

        private RemoveRequestBuilder(String token, String channel) {
            this.token = token;
            this.channel = channel;
        }

        /**
         * Set timestamp
         * @param timestamp Timestamp of the message to un-pin. (optional)
         * @return RemoveRequestBuilder
         */
        public RemoveRequestBuilder timestamp(String timestamp) {
            this.timestamp = timestamp;
            return this;
        }
        
        /**
         * Build call for remove
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PinsRemoveRequest pinsRemoveRequest = buildBodyParams();
            return removeCall(token, channel, pinsRemoveRequest, timestamp, _callback);
        }

        private PinsRemoveRequest buildBodyParams() {
            PinsRemoveRequest pinsRemoveRequest = new PinsRemoveRequest();
            pinsRemoveRequest.channel(this.channel);
            pinsRemoveRequest.timestamp(this.timestamp);
            return pinsRemoveRequest;
        }

        /**
         * Execute remove request
         * @return PinsRemoveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public PinsRemoveResponse execute() throws ApiException {
            PinsRemoveRequest pinsRemoveRequest = buildBodyParams();
            ApiResponse<PinsRemoveResponse> localVarResp = removeWithHttpInfo(token, channel, pinsRemoveRequest, timestamp);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute remove request with HTTP info returned
         * @return ApiResponse&lt;PinsRemoveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PinsRemoveResponse> executeWithHttpInfo() throws ApiException {
            PinsRemoveRequest pinsRemoveRequest = buildBodyParams();
            return removeWithHttpInfo(token, channel, pinsRemoveRequest, timestamp);
        }

        /**
         * Execute remove request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PinsRemoveResponse> _callback) throws ApiException {
            PinsRemoveRequest pinsRemoveRequest = buildBodyParams();
            return removeAsync(token, channel, pinsRemoveRequest, timestamp, _callback);
        }
    }

    /**
     * 
     * Un-pins an item from a channel.
     * @param token Authentication token. Requires scope: &#x60;pins:write&#x60; (required)
     * @param channel Channel where the item is pinned to. (required)
     * @param pinsRemoveRequest  (required)
     * @return RemoveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/pins.remove"> Documentation</a>
     */
    public RemoveRequestBuilder remove(String token, String channel) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channel == null) throw new IllegalArgumentException("\"channel\" is required but got null");
            

        return new RemoveRequestBuilder(token, channel);
    }
}
