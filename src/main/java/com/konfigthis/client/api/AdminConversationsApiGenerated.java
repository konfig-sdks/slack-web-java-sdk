/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminconversationsArchiveChannelRequest;
import com.konfigthis.client.model.AdminconversationsArchiveChannelResponse;
import com.konfigthis.client.model.AdminconversationsArchiveChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsConvertToPrivateChannelRequest;
import com.konfigthis.client.model.AdminconversationsConvertToPrivateChannelResponse;
import com.konfigthis.client.model.AdminconversationsConvertToPrivateChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsCreateChannelBasedConversationRequest;
import com.konfigthis.client.model.AdminconversationsCreateChannelBasedConversationResponse;
import com.konfigthis.client.model.AdminconversationsCreateChannelBasedConversationdefaultResponse;
import com.konfigthis.client.model.AdminconversationsDeleteChannelRequest;
import com.konfigthis.client.model.AdminconversationsDeleteChannelResponse;
import com.konfigthis.client.model.AdminconversationsDeleteChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsDisconnectSharedChannelRequest;
import com.konfigthis.client.model.AdminconversationsDisconnectSharedChannelResponse;
import com.konfigthis.client.model.AdminconversationsDisconnectSharedChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsGetConversationPrefsResponse;
import com.konfigthis.client.model.AdminconversationsGetConversationPrefsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsGetTeamsListResponse;
import com.konfigthis.client.model.AdminconversationsGetTeamsListdefaultResponse;
import com.konfigthis.client.model.AdminconversationsInviteUserToChannelRequest;
import com.konfigthis.client.model.AdminconversationsInviteUserToChannelResponse;
import com.konfigthis.client.model.AdminconversationsInviteUserToChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsRenameChannelRequest;
import com.konfigthis.client.model.AdminconversationsRenameChannelResponse;
import com.konfigthis.client.model.AdminconversationsRenameChanneldefaultResponse;
import com.konfigthis.client.model.AdminconversationsSearchChannelsResponse;
import com.konfigthis.client.model.AdminconversationsSearchChannelsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsSetConversationPrefsRequest;
import com.konfigthis.client.model.AdminconversationsSetConversationPrefsResponse;
import com.konfigthis.client.model.AdminconversationsSetConversationPrefsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsSetTeamsWorkspaceConnectionRequest;
import com.konfigthis.client.model.AdminconversationsSetTeamsWorkspaceConnectionResponse;
import com.konfigthis.client.model.AdminconversationsSetTeamsWorkspaceConnectiondefaultResponse;
import com.konfigthis.client.model.AdminconversationsUnarchiveChannelRequest;
import com.konfigthis.client.model.AdminconversationsUnarchiveChannelResponse;
import com.konfigthis.client.model.AdminconversationsUnarchiveChanneldefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminConversationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminConversationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminConversationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call archiveChannelCall(String token, String channelId, AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsArchiveChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.archive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveChannelValidateBeforeCall(String token, String channelId, AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling archiveChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling archiveChannel(Async)");
        }

        // verify the required parameter 'adminconversationsArchiveChannelRequest' is set
        if (adminconversationsArchiveChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsArchiveChannelRequest' when calling archiveChannel(Async)");
        }

        return archiveChannelCall(token, channelId, adminconversationsArchiveChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsArchiveChannelResponse> archiveChannelWithHttpInfo(String token, String channelId, AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = archiveChannelValidateBeforeCall(token, channelId, adminconversationsArchiveChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsArchiveChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call archiveChannelAsync(String token, String channelId, AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest, final ApiCallback<AdminconversationsArchiveChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveChannelValidateBeforeCall(token, channelId, adminconversationsArchiveChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsArchiveChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ArchiveChannelRequestBuilder {
        private final String token;
        private final String channelId;

        private ArchiveChannelRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Build call for archiveChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest = buildBodyParams();
            return archiveChannelCall(token, channelId, adminconversationsArchiveChannelRequest, _callback);
        }

        private AdminconversationsArchiveChannelRequest buildBodyParams() {
            AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest = new AdminconversationsArchiveChannelRequest();
            adminconversationsArchiveChannelRequest.channelId(this.channelId);
            return adminconversationsArchiveChannelRequest;
        }

        /**
         * Execute archiveChannel request
         * @return AdminconversationsArchiveChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsArchiveChannelResponse execute() throws ApiException {
            AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsArchiveChannelResponse> localVarResp = archiveChannelWithHttpInfo(token, channelId, adminconversationsArchiveChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute archiveChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsArchiveChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsArchiveChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest = buildBodyParams();
            return archiveChannelWithHttpInfo(token, channelId, adminconversationsArchiveChannelRequest);
        }

        /**
         * Execute archiveChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsArchiveChannelResponse> _callback) throws ApiException {
            AdminconversationsArchiveChannelRequest adminconversationsArchiveChannelRequest = buildBodyParams();
            return archiveChannelAsync(token, channelId, adminconversationsArchiveChannelRequest, _callback);
        }
    }

    /**
     * 
     * Archive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to archive. (required)
     * @param adminconversationsArchiveChannelRequest  (required)
     * @return ArchiveChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.archive"> Documentation</a>
     */
    public ArchiveChannelRequestBuilder archiveChannel(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new ArchiveChannelRequestBuilder(token, channelId);
    }
    private okhttp3.Call convertToPrivateChannelCall(String token, String channelId, AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsConvertToPrivateChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.convertToPrivate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertToPrivateChannelValidateBeforeCall(String token, String channelId, AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling convertToPrivateChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling convertToPrivateChannel(Async)");
        }

        // verify the required parameter 'adminconversationsConvertToPrivateChannelRequest' is set
        if (adminconversationsConvertToPrivateChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsConvertToPrivateChannelRequest' when calling convertToPrivateChannel(Async)");
        }

        return convertToPrivateChannelCall(token, channelId, adminconversationsConvertToPrivateChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsConvertToPrivateChannelResponse> convertToPrivateChannelWithHttpInfo(String token, String channelId, AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = convertToPrivateChannelValidateBeforeCall(token, channelId, adminconversationsConvertToPrivateChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsConvertToPrivateChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call convertToPrivateChannelAsync(String token, String channelId, AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest, final ApiCallback<AdminconversationsConvertToPrivateChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertToPrivateChannelValidateBeforeCall(token, channelId, adminconversationsConvertToPrivateChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsConvertToPrivateChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ConvertToPrivateChannelRequestBuilder {
        private final String token;
        private final String channelId;

        private ConvertToPrivateChannelRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Build call for convertToPrivateChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest = buildBodyParams();
            return convertToPrivateChannelCall(token, channelId, adminconversationsConvertToPrivateChannelRequest, _callback);
        }

        private AdminconversationsConvertToPrivateChannelRequest buildBodyParams() {
            AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest = new AdminconversationsConvertToPrivateChannelRequest();
            adminconversationsConvertToPrivateChannelRequest.channelId(this.channelId);
            return adminconversationsConvertToPrivateChannelRequest;
        }

        /**
         * Execute convertToPrivateChannel request
         * @return AdminconversationsConvertToPrivateChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsConvertToPrivateChannelResponse execute() throws ApiException {
            AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsConvertToPrivateChannelResponse> localVarResp = convertToPrivateChannelWithHttpInfo(token, channelId, adminconversationsConvertToPrivateChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute convertToPrivateChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsConvertToPrivateChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsConvertToPrivateChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest = buildBodyParams();
            return convertToPrivateChannelWithHttpInfo(token, channelId, adminconversationsConvertToPrivateChannelRequest);
        }

        /**
         * Execute convertToPrivateChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsConvertToPrivateChannelResponse> _callback) throws ApiException {
            AdminconversationsConvertToPrivateChannelRequest adminconversationsConvertToPrivateChannelRequest = buildBodyParams();
            return convertToPrivateChannelAsync(token, channelId, adminconversationsConvertToPrivateChannelRequest, _callback);
        }
    }

    /**
     * 
     * Convert a public channel to a private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to convert to private. (required)
     * @param adminconversationsConvertToPrivateChannelRequest  (required)
     * @return ConvertToPrivateChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.convertToPrivate"> Documentation</a>
     */
    public ConvertToPrivateChannelRequestBuilder convertToPrivateChannel(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new ConvertToPrivateChannelRequestBuilder(token, channelId);
    }
    private okhttp3.Call createChannelBasedConversationCall(String token, Boolean isPrivate, String name, AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest, String description, Boolean orgWide, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsCreateChannelBasedConversationRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (isPrivate != null) {
            localVarFormParams.put("is_private", isPrivate);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (orgWide != null) {
            localVarFormParams.put("org_wide", orgWide);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelBasedConversationValidateBeforeCall(String token, Boolean isPrivate, String name, AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest, String description, Boolean orgWide, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling createChannelBasedConversation(Async)");
        }

        // verify the required parameter 'isPrivate' is set
        if (isPrivate == null) {
            throw new ApiException("Missing the required parameter 'isPrivate' when calling createChannelBasedConversation(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createChannelBasedConversation(Async)");
        }

        // verify the required parameter 'adminconversationsCreateChannelBasedConversationRequest' is set
        if (adminconversationsCreateChannelBasedConversationRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsCreateChannelBasedConversationRequest' when calling createChannelBasedConversation(Async)");
        }

        return createChannelBasedConversationCall(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId, _callback);

    }


    private ApiResponse<AdminconversationsCreateChannelBasedConversationResponse> createChannelBasedConversationWithHttpInfo(String token, Boolean isPrivate, String name, AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest, String description, Boolean orgWide, String teamId) throws ApiException {
        okhttp3.Call localVarCall = createChannelBasedConversationValidateBeforeCall(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId, null);
        Type localVarReturnType = new TypeToken<AdminconversationsCreateChannelBasedConversationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createChannelBasedConversationAsync(String token, Boolean isPrivate, String name, AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest, String description, Boolean orgWide, String teamId, final ApiCallback<AdminconversationsCreateChannelBasedConversationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelBasedConversationValidateBeforeCall(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsCreateChannelBasedConversationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateChannelBasedConversationRequestBuilder {
        private final String token;
        private final Boolean isPrivate;
        private final String name;
        private String description;
        private Boolean orgWide;
        private String teamId;

        private CreateChannelBasedConversationRequestBuilder(String token, Boolean isPrivate, String name) {
            this.token = token;
            this.isPrivate = isPrivate;
            this.name = name;
        }

        /**
         * Set description
         * @param description Description of the public or private channel to create. (optional)
         * @return CreateChannelBasedConversationRequestBuilder
         */
        public CreateChannelBasedConversationRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set orgWide
         * @param orgWide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
         * @return CreateChannelBasedConversationRequestBuilder
         */
        public CreateChannelBasedConversationRequestBuilder orgWide(Boolean orgWide) {
            this.orgWide = orgWide;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
         * @return CreateChannelBasedConversationRequestBuilder
         */
        public CreateChannelBasedConversationRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for createChannelBasedConversation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest = buildBodyParams();
            return createChannelBasedConversationCall(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId, _callback);
        }

        private AdminconversationsCreateChannelBasedConversationRequest buildBodyParams() {
            AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest = new AdminconversationsCreateChannelBasedConversationRequest();
            adminconversationsCreateChannelBasedConversationRequest.description(this.description);
            adminconversationsCreateChannelBasedConversationRequest.isPrivate(this.isPrivate);
            adminconversationsCreateChannelBasedConversationRequest.name(this.name);
            adminconversationsCreateChannelBasedConversationRequest.orgWide(this.orgWide);
            adminconversationsCreateChannelBasedConversationRequest.teamId(this.teamId);
            return adminconversationsCreateChannelBasedConversationRequest;
        }

        /**
         * Execute createChannelBasedConversation request
         * @return AdminconversationsCreateChannelBasedConversationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsCreateChannelBasedConversationResponse execute() throws ApiException {
            AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest = buildBodyParams();
            ApiResponse<AdminconversationsCreateChannelBasedConversationResponse> localVarResp = createChannelBasedConversationWithHttpInfo(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createChannelBasedConversation request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsCreateChannelBasedConversationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsCreateChannelBasedConversationResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest = buildBodyParams();
            return createChannelBasedConversationWithHttpInfo(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId);
        }

        /**
         * Execute createChannelBasedConversation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsCreateChannelBasedConversationResponse> _callback) throws ApiException {
            AdminconversationsCreateChannelBasedConversationRequest adminconversationsCreateChannelBasedConversationRequest = buildBodyParams();
            return createChannelBasedConversationAsync(token, isPrivate, name, adminconversationsCreateChannelBasedConversationRequest, description, orgWide, teamId, _callback);
        }
    }

    /**
     * 
     * Create a public or private channel-based conversation.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param isPrivate When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param name Name of the public or private channel to create. (required)
     * @param adminconversationsCreateChannelBasedConversationRequest  (required)
     * @return CreateChannelBasedConversationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.create"> Documentation</a>
     */
    public CreateChannelBasedConversationRequestBuilder createChannelBasedConversation(String token, Boolean isPrivate, String name) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (isPrivate == null) throw new IllegalArgumentException("\"isPrivate\" is required but got null");
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateChannelBasedConversationRequestBuilder(token, isPrivate, name);
    }
    private okhttp3.Call deleteChannelCall(String token, String channelId, AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsDeleteChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelValidateBeforeCall(String token, String channelId, AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling deleteChannel(Async)");
        }

        // verify the required parameter 'adminconversationsDeleteChannelRequest' is set
        if (adminconversationsDeleteChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsDeleteChannelRequest' when calling deleteChannel(Async)");
        }

        return deleteChannelCall(token, channelId, adminconversationsDeleteChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsDeleteChannelResponse> deleteChannelWithHttpInfo(String token, String channelId, AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(token, channelId, adminconversationsDeleteChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsDeleteChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteChannelAsync(String token, String channelId, AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest, final ApiCallback<AdminconversationsDeleteChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(token, channelId, adminconversationsDeleteChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsDeleteChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteChannelRequestBuilder {
        private final String token;
        private final String channelId;

        private DeleteChannelRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Build call for deleteChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest = buildBodyParams();
            return deleteChannelCall(token, channelId, adminconversationsDeleteChannelRequest, _callback);
        }

        private AdminconversationsDeleteChannelRequest buildBodyParams() {
            AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest = new AdminconversationsDeleteChannelRequest();
            adminconversationsDeleteChannelRequest.channelId(this.channelId);
            return adminconversationsDeleteChannelRequest;
        }

        /**
         * Execute deleteChannel request
         * @return AdminconversationsDeleteChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsDeleteChannelResponse execute() throws ApiException {
            AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsDeleteChannelResponse> localVarResp = deleteChannelWithHttpInfo(token, channelId, adminconversationsDeleteChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsDeleteChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsDeleteChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest = buildBodyParams();
            return deleteChannelWithHttpInfo(token, channelId, adminconversationsDeleteChannelRequest);
        }

        /**
         * Execute deleteChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsDeleteChannelResponse> _callback) throws ApiException {
            AdminconversationsDeleteChannelRequest adminconversationsDeleteChannelRequest = buildBodyParams();
            return deleteChannelAsync(token, channelId, adminconversationsDeleteChannelRequest, _callback);
        }
    }

    /**
     * 
     * Delete a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to delete. (required)
     * @param adminconversationsDeleteChannelRequest  (required)
     * @return DeleteChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.delete"> Documentation</a>
     */
    public DeleteChannelRequestBuilder deleteChannel(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new DeleteChannelRequestBuilder(token, channelId);
    }
    private okhttp3.Call disconnectSharedChannelCall(String token, String channelId, AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest, String leavingTeamIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsDisconnectSharedChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.disconnectShared";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (leavingTeamIds != null) {
            localVarFormParams.put("leaving_team_ids", leavingTeamIds);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disconnectSharedChannelValidateBeforeCall(String token, String channelId, AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest, String leavingTeamIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling disconnectSharedChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling disconnectSharedChannel(Async)");
        }

        // verify the required parameter 'adminconversationsDisconnectSharedChannelRequest' is set
        if (adminconversationsDisconnectSharedChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsDisconnectSharedChannelRequest' when calling disconnectSharedChannel(Async)");
        }

        return disconnectSharedChannelCall(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds, _callback);

    }


    private ApiResponse<AdminconversationsDisconnectSharedChannelResponse> disconnectSharedChannelWithHttpInfo(String token, String channelId, AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest, String leavingTeamIds) throws ApiException {
        okhttp3.Call localVarCall = disconnectSharedChannelValidateBeforeCall(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds, null);
        Type localVarReturnType = new TypeToken<AdminconversationsDisconnectSharedChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disconnectSharedChannelAsync(String token, String channelId, AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest, String leavingTeamIds, final ApiCallback<AdminconversationsDisconnectSharedChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disconnectSharedChannelValidateBeforeCall(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsDisconnectSharedChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DisconnectSharedChannelRequestBuilder {
        private final String token;
        private final String channelId;
        private String leavingTeamIds;

        private DisconnectSharedChannelRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Set leavingTeamIds
         * @param leavingTeamIds The team to be removed from the channel. Currently only a single team id can be specified. (optional)
         * @return DisconnectSharedChannelRequestBuilder
         */
        public DisconnectSharedChannelRequestBuilder leavingTeamIds(String leavingTeamIds) {
            this.leavingTeamIds = leavingTeamIds;
            return this;
        }
        
        /**
         * Build call for disconnectSharedChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest = buildBodyParams();
            return disconnectSharedChannelCall(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds, _callback);
        }

        private AdminconversationsDisconnectSharedChannelRequest buildBodyParams() {
            AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest = new AdminconversationsDisconnectSharedChannelRequest();
            adminconversationsDisconnectSharedChannelRequest.channelId(this.channelId);
            adminconversationsDisconnectSharedChannelRequest.leavingTeamIds(this.leavingTeamIds);
            return adminconversationsDisconnectSharedChannelRequest;
        }

        /**
         * Execute disconnectSharedChannel request
         * @return AdminconversationsDisconnectSharedChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsDisconnectSharedChannelResponse execute() throws ApiException {
            AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsDisconnectSharedChannelResponse> localVarResp = disconnectSharedChannelWithHttpInfo(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute disconnectSharedChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsDisconnectSharedChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsDisconnectSharedChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest = buildBodyParams();
            return disconnectSharedChannelWithHttpInfo(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds);
        }

        /**
         * Execute disconnectSharedChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsDisconnectSharedChannelResponse> _callback) throws ApiException {
            AdminconversationsDisconnectSharedChannelRequest adminconversationsDisconnectSharedChannelRequest = buildBodyParams();
            return disconnectSharedChannelAsync(token, channelId, adminconversationsDisconnectSharedChannelRequest, leavingTeamIds, _callback);
        }
    }

    /**
     * 
     * Disconnect a connected channel from one or more workspaces.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to be disconnected from some workspaces. (required)
     * @param adminconversationsDisconnectSharedChannelRequest  (required)
     * @return DisconnectSharedChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.disconnectShared"> Documentation</a>
     */
    public DisconnectSharedChannelRequestBuilder disconnectSharedChannel(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new DisconnectSharedChannelRequestBuilder(token, channelId);
    }
    private okhttp3.Call getConversationPrefsCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.getConversationPrefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_id", channelId));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConversationPrefsValidateBeforeCall(String token, String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getConversationPrefs(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getConversationPrefs(Async)");
        }

        return getConversationPrefsCall(token, channelId, _callback);

    }


    private ApiResponse<AdminconversationsGetConversationPrefsResponse> getConversationPrefsWithHttpInfo(String token, String channelId) throws ApiException {
        okhttp3.Call localVarCall = getConversationPrefsValidateBeforeCall(token, channelId, null);
        Type localVarReturnType = new TypeToken<AdminconversationsGetConversationPrefsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConversationPrefsAsync(String token, String channelId, final ApiCallback<AdminconversationsGetConversationPrefsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConversationPrefsValidateBeforeCall(token, channelId, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsGetConversationPrefsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConversationPrefsRequestBuilder {
        private final String token;
        private final String channelId;

        private GetConversationPrefsRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Build call for getConversationPrefs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConversationPrefsCall(token, channelId, _callback);
        }


        /**
         * Execute getConversationPrefs request
         * @return AdminconversationsGetConversationPrefsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsGetConversationPrefsResponse execute() throws ApiException {
            ApiResponse<AdminconversationsGetConversationPrefsResponse> localVarResp = getConversationPrefsWithHttpInfo(token, channelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConversationPrefs request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsGetConversationPrefsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsGetConversationPrefsResponse> executeWithHttpInfo() throws ApiException {
            return getConversationPrefsWithHttpInfo(token, channelId);
        }

        /**
         * Execute getConversationPrefs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsGetConversationPrefsResponse> _callback) throws ApiException {
            return getConversationPrefsAsync(token, channelId, _callback);
        }
    }

    /**
     * 
     * Get conversation preferences for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to get preferences for. (required)
     * @return GetConversationPrefsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getConversationPrefs"> Documentation</a>
     */
    public GetConversationPrefsRequestBuilder getConversationPrefs(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new GetConversationPrefsRequestBuilder(token, channelId);
    }
    private okhttp3.Call getTeamsListCall(String token, String channelId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.getTeams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_id", channelId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamsListValidateBeforeCall(String token, String channelId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getTeamsList(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getTeamsList(Async)");
        }

        return getTeamsListCall(token, channelId, cursor, limit, _callback);

    }


    private ApiResponse<AdminconversationsGetTeamsListResponse> getTeamsListWithHttpInfo(String token, String channelId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getTeamsListValidateBeforeCall(token, channelId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdminconversationsGetTeamsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeamsListAsync(String token, String channelId, String cursor, Integer limit, final ApiCallback<AdminconversationsGetTeamsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamsListValidateBeforeCall(token, channelId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsGetTeamsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTeamsListRequestBuilder {
        private final String token;
        private final String channelId;
        private String cursor;
        private Integer limit;

        private GetTeamsListRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
         * @return GetTeamsListRequestBuilder
         */
        public GetTeamsListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
         * @return GetTeamsListRequestBuilder
         */
        public GetTeamsListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getTeamsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeamsListCall(token, channelId, cursor, limit, _callback);
        }


        /**
         * Execute getTeamsList request
         * @return AdminconversationsGetTeamsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsGetTeamsListResponse execute() throws ApiException {
            ApiResponse<AdminconversationsGetTeamsListResponse> localVarResp = getTeamsListWithHttpInfo(token, channelId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTeamsList request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsGetTeamsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsGetTeamsListResponse> executeWithHttpInfo() throws ApiException {
            return getTeamsListWithHttpInfo(token, channelId, cursor, limit);
        }

        /**
         * Execute getTeamsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsGetTeamsListResponse> _callback) throws ApiException {
            return getTeamsListAsync(token, channelId, cursor, limit, _callback);
        }
    }

    /**
     * 
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId The channel to determine connected workspaces within the organization for. (required)
     * @return GetTeamsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.getTeams"> Documentation</a>
     */
    public GetTeamsListRequestBuilder getTeamsList(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new GetTeamsListRequestBuilder(token, channelId);
    }
    private okhttp3.Call inviteUserToChannelCall(String token, String channelId, String userIds, AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsInviteUserToChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.invite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (userIds != null) {
            localVarFormParams.put("user_ids", userIds);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteUserToChannelValidateBeforeCall(String token, String channelId, String userIds, AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling inviteUserToChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling inviteUserToChannel(Async)");
        }

        // verify the required parameter 'userIds' is set
        if (userIds == null) {
            throw new ApiException("Missing the required parameter 'userIds' when calling inviteUserToChannel(Async)");
        }

        // verify the required parameter 'adminconversationsInviteUserToChannelRequest' is set
        if (adminconversationsInviteUserToChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsInviteUserToChannelRequest' when calling inviteUserToChannel(Async)");
        }

        return inviteUserToChannelCall(token, channelId, userIds, adminconversationsInviteUserToChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsInviteUserToChannelResponse> inviteUserToChannelWithHttpInfo(String token, String channelId, String userIds, AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = inviteUserToChannelValidateBeforeCall(token, channelId, userIds, adminconversationsInviteUserToChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsInviteUserToChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call inviteUserToChannelAsync(String token, String channelId, String userIds, AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest, final ApiCallback<AdminconversationsInviteUserToChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteUserToChannelValidateBeforeCall(token, channelId, userIds, adminconversationsInviteUserToChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsInviteUserToChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InviteUserToChannelRequestBuilder {
        private final String token;
        private final String channelId;
        private final String userIds;

        private InviteUserToChannelRequestBuilder(String token, String channelId, String userIds) {
            this.token = token;
            this.channelId = channelId;
            this.userIds = userIds;
        }

        /**
         * Build call for inviteUserToChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest = buildBodyParams();
            return inviteUserToChannelCall(token, channelId, userIds, adminconversationsInviteUserToChannelRequest, _callback);
        }

        private AdminconversationsInviteUserToChannelRequest buildBodyParams() {
            AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest = new AdminconversationsInviteUserToChannelRequest();
            adminconversationsInviteUserToChannelRequest.channelId(this.channelId);
            adminconversationsInviteUserToChannelRequest.userIds(this.userIds);
            return adminconversationsInviteUserToChannelRequest;
        }

        /**
         * Execute inviteUserToChannel request
         * @return AdminconversationsInviteUserToChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsInviteUserToChannelResponse execute() throws ApiException {
            AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsInviteUserToChannelResponse> localVarResp = inviteUserToChannelWithHttpInfo(token, channelId, userIds, adminconversationsInviteUserToChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute inviteUserToChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsInviteUserToChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsInviteUserToChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest = buildBodyParams();
            return inviteUserToChannelWithHttpInfo(token, channelId, userIds, adminconversationsInviteUserToChannelRequest);
        }

        /**
         * Execute inviteUserToChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsInviteUserToChannelResponse> _callback) throws ApiException {
            AdminconversationsInviteUserToChannelRequest adminconversationsInviteUserToChannelRequest = buildBodyParams();
            return inviteUserToChannelAsync(token, channelId, userIds, adminconversationsInviteUserToChannelRequest, _callback);
        }
    }

    /**
     * 
     * Invite a user to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel that the users will be invited to. (required)
     * @param userIds The users to invite. (required)
     * @param adminconversationsInviteUserToChannelRequest  (required)
     * @return InviteUserToChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.invite"> Documentation</a>
     */
    public InviteUserToChannelRequestBuilder inviteUserToChannel(String token, String channelId, String userIds) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (userIds == null) throw new IllegalArgumentException("\"userIds\" is required but got null");
            

        return new InviteUserToChannelRequestBuilder(token, channelId, userIds);
    }
    private okhttp3.Call renameChannelCall(String token, String channelId, String name, AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsRenameChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.rename";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameChannelValidateBeforeCall(String token, String channelId, String name, AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling renameChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling renameChannel(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling renameChannel(Async)");
        }

        // verify the required parameter 'adminconversationsRenameChannelRequest' is set
        if (adminconversationsRenameChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsRenameChannelRequest' when calling renameChannel(Async)");
        }

        return renameChannelCall(token, channelId, name, adminconversationsRenameChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsRenameChannelResponse> renameChannelWithHttpInfo(String token, String channelId, String name, AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = renameChannelValidateBeforeCall(token, channelId, name, adminconversationsRenameChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsRenameChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call renameChannelAsync(String token, String channelId, String name, AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest, final ApiCallback<AdminconversationsRenameChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameChannelValidateBeforeCall(token, channelId, name, adminconversationsRenameChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsRenameChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RenameChannelRequestBuilder {
        private final String token;
        private final String channelId;
        private final String name;

        private RenameChannelRequestBuilder(String token, String channelId, String name) {
            this.token = token;
            this.channelId = channelId;
            this.name = name;
        }

        /**
         * Build call for renameChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest = buildBodyParams();
            return renameChannelCall(token, channelId, name, adminconversationsRenameChannelRequest, _callback);
        }

        private AdminconversationsRenameChannelRequest buildBodyParams() {
            AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest = new AdminconversationsRenameChannelRequest();
            adminconversationsRenameChannelRequest.channelId(this.channelId);
            adminconversationsRenameChannelRequest.name(this.name);
            return adminconversationsRenameChannelRequest;
        }

        /**
         * Execute renameChannel request
         * @return AdminconversationsRenameChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsRenameChannelResponse execute() throws ApiException {
            AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsRenameChannelResponse> localVarResp = renameChannelWithHttpInfo(token, channelId, name, adminconversationsRenameChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute renameChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsRenameChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsRenameChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest = buildBodyParams();
            return renameChannelWithHttpInfo(token, channelId, name, adminconversationsRenameChannelRequest);
        }

        /**
         * Execute renameChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsRenameChannelResponse> _callback) throws ApiException {
            AdminconversationsRenameChannelRequest adminconversationsRenameChannelRequest = buildBodyParams();
            return renameChannelAsync(token, channelId, name, adminconversationsRenameChannelRequest, _callback);
        }
    }

    /**
     * 
     * Rename a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to rename. (required)
     * @param name  (required)
     * @param adminconversationsRenameChannelRequest  (required)
     * @return RenameChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.rename"> Documentation</a>
     */
    public RenameChannelRequestBuilder renameChannel(String token, String channelId, String name) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new RenameChannelRequestBuilder(token, channelId, name);
    }
    private okhttp3.Call searchChannelsCall(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_ids", teamIds));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (searchChannelTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_channel_types", searchChannelTypes));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchChannelsValidateBeforeCall(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling searchChannels(Async)");
        }

        return searchChannelsCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, _callback);

    }


    private ApiResponse<AdminconversationsSearchChannelsResponse> searchChannelsWithHttpInfo(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir) throws ApiException {
        okhttp3.Call localVarCall = searchChannelsValidateBeforeCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, null);
        Type localVarReturnType = new TypeToken<AdminconversationsSearchChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchChannelsAsync(String token, String teamIds, String query, Integer limit, String cursor, String searchChannelTypes, String sort, String sortDir, final ApiCallback<AdminconversationsSearchChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchChannelsValidateBeforeCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsSearchChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchChannelsRequestBuilder {
        private final String token;
        private String teamIds;
        private String query;
        private Integer limit;
        private String cursor;
        private String searchChannelTypes;
        private String sort;
        private String sortDir;

        private SearchChannelsRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set teamIds
         * @param teamIds Comma separated string of team IDs, signifying the workspaces to search through. (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder teamIds(String teamIds) {
            this.teamIds = teamIds;
            return this;
        }
        
        /**
         * Set query
         * @param query Name of the the channel to query by. (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder query(String query) {
            this.query = query;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set searchChannelTypes
         * @param searchChannelTypes The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](https://slack.dev). (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder searchChannelTypes(String searchChannelTypes) {
            this.searchChannelTypes = searchChannelTypes;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted  (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
         * @return SearchChannelsRequestBuilder
         */
        public SearchChannelsRequestBuilder sortDir(String sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Build call for searchChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchChannelsCall(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, _callback);
        }


        /**
         * Execute searchChannels request
         * @return AdminconversationsSearchChannelsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsSearchChannelsResponse execute() throws ApiException {
            ApiResponse<AdminconversationsSearchChannelsResponse> localVarResp = searchChannelsWithHttpInfo(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchChannels request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsSearchChannelsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsSearchChannelsResponse> executeWithHttpInfo() throws ApiException {
            return searchChannelsWithHttpInfo(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir);
        }

        /**
         * Execute searchChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsSearchChannelsResponse> _callback) throws ApiException {
            return searchChannelsAsync(token, teamIds, query, limit, cursor, searchChannelTypes, sort, sortDir, _callback);
        }
    }

    /**
     * 
     * Search for public or private channels in an Enterprise organization.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @return SearchChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.search"> Documentation</a>
     */
    public SearchChannelsRequestBuilder searchChannels(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SearchChannelsRequestBuilder(token);
    }
    private okhttp3.Call setConversationPrefsCall(String token, String channelId, String prefs, AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsSetConversationPrefsRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.setConversationPrefs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (prefs != null) {
            localVarFormParams.put("prefs", prefs);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setConversationPrefsValidateBeforeCall(String token, String channelId, String prefs, AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setConversationPrefs(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling setConversationPrefs(Async)");
        }

        // verify the required parameter 'prefs' is set
        if (prefs == null) {
            throw new ApiException("Missing the required parameter 'prefs' when calling setConversationPrefs(Async)");
        }

        // verify the required parameter 'adminconversationsSetConversationPrefsRequest' is set
        if (adminconversationsSetConversationPrefsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsSetConversationPrefsRequest' when calling setConversationPrefs(Async)");
        }

        return setConversationPrefsCall(token, channelId, prefs, adminconversationsSetConversationPrefsRequest, _callback);

    }


    private ApiResponse<AdminconversationsSetConversationPrefsResponse> setConversationPrefsWithHttpInfo(String token, String channelId, String prefs, AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest) throws ApiException {
        okhttp3.Call localVarCall = setConversationPrefsValidateBeforeCall(token, channelId, prefs, adminconversationsSetConversationPrefsRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsSetConversationPrefsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setConversationPrefsAsync(String token, String channelId, String prefs, AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest, final ApiCallback<AdminconversationsSetConversationPrefsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setConversationPrefsValidateBeforeCall(token, channelId, prefs, adminconversationsSetConversationPrefsRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsSetConversationPrefsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetConversationPrefsRequestBuilder {
        private final String token;
        private final String channelId;
        private final String prefs;

        private SetConversationPrefsRequestBuilder(String token, String channelId, String prefs) {
            this.token = token;
            this.channelId = channelId;
            this.prefs = prefs;
        }

        /**
         * Build call for setConversationPrefs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest = buildBodyParams();
            return setConversationPrefsCall(token, channelId, prefs, adminconversationsSetConversationPrefsRequest, _callback);
        }

        private AdminconversationsSetConversationPrefsRequest buildBodyParams() {
            AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest = new AdminconversationsSetConversationPrefsRequest();
            adminconversationsSetConversationPrefsRequest.channelId(this.channelId);
            adminconversationsSetConversationPrefsRequest.prefs(this.prefs);
            return adminconversationsSetConversationPrefsRequest;
        }

        /**
         * Execute setConversationPrefs request
         * @return AdminconversationsSetConversationPrefsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsSetConversationPrefsResponse execute() throws ApiException {
            AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest = buildBodyParams();
            ApiResponse<AdminconversationsSetConversationPrefsResponse> localVarResp = setConversationPrefsWithHttpInfo(token, channelId, prefs, adminconversationsSetConversationPrefsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setConversationPrefs request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsSetConversationPrefsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsSetConversationPrefsResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest = buildBodyParams();
            return setConversationPrefsWithHttpInfo(token, channelId, prefs, adminconversationsSetConversationPrefsRequest);
        }

        /**
         * Execute setConversationPrefs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsSetConversationPrefsResponse> _callback) throws ApiException {
            AdminconversationsSetConversationPrefsRequest adminconversationsSetConversationPrefsRequest = buildBodyParams();
            return setConversationPrefsAsync(token, channelId, prefs, adminconversationsSetConversationPrefsRequest, _callback);
        }
    }

    /**
     * 
     * Set the posting permissions for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to set the prefs for (required)
     * @param prefs The prefs for this channel in a stringified JSON format. (required)
     * @param adminconversationsSetConversationPrefsRequest  (required)
     * @return SetConversationPrefsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setConversationPrefs"> Documentation</a>
     */
    public SetConversationPrefsRequestBuilder setConversationPrefs(String token, String channelId, String prefs) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (prefs == null) throw new IllegalArgumentException("\"prefs\" is required but got null");
            

        return new SetConversationPrefsRequestBuilder(token, channelId, prefs);
    }
    private okhttp3.Call setTeamsWorkspaceConnectionCall(String token, String channelId, AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest, Boolean orgChannel, String targetTeamIds, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsSetTeamsWorkspaceConnectionRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.setTeams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (orgChannel != null) {
            localVarFormParams.put("org_channel", orgChannel);
        }

        if (targetTeamIds != null) {
            localVarFormParams.put("target_team_ids", targetTeamIds);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setTeamsWorkspaceConnectionValidateBeforeCall(String token, String channelId, AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest, Boolean orgChannel, String targetTeamIds, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setTeamsWorkspaceConnection(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling setTeamsWorkspaceConnection(Async)");
        }

        // verify the required parameter 'adminconversationsSetTeamsWorkspaceConnectionRequest' is set
        if (adminconversationsSetTeamsWorkspaceConnectionRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsSetTeamsWorkspaceConnectionRequest' when calling setTeamsWorkspaceConnection(Async)");
        }

        return setTeamsWorkspaceConnectionCall(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId, _callback);

    }


    private ApiResponse<AdminconversationsSetTeamsWorkspaceConnectionResponse> setTeamsWorkspaceConnectionWithHttpInfo(String token, String channelId, AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest, Boolean orgChannel, String targetTeamIds, String teamId) throws ApiException {
        okhttp3.Call localVarCall = setTeamsWorkspaceConnectionValidateBeforeCall(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId, null);
        Type localVarReturnType = new TypeToken<AdminconversationsSetTeamsWorkspaceConnectionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setTeamsWorkspaceConnectionAsync(String token, String channelId, AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest, Boolean orgChannel, String targetTeamIds, String teamId, final ApiCallback<AdminconversationsSetTeamsWorkspaceConnectionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setTeamsWorkspaceConnectionValidateBeforeCall(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsSetTeamsWorkspaceConnectionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetTeamsWorkspaceConnectionRequestBuilder {
        private final String token;
        private final String channelId;
        private Boolean orgChannel;
        private String targetTeamIds;
        private String teamId;

        private SetTeamsWorkspaceConnectionRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Set orgChannel
         * @param orgChannel True if channel has to be converted to an org channel (optional)
         * @return SetTeamsWorkspaceConnectionRequestBuilder
         */
        public SetTeamsWorkspaceConnectionRequestBuilder orgChannel(Boolean orgChannel) {
            this.orgChannel = orgChannel;
            return this;
        }
        
        /**
         * Set targetTeamIds
         * @param targetTeamIds A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
         * @return SetTeamsWorkspaceConnectionRequestBuilder
         */
        public SetTeamsWorkspaceConnectionRequestBuilder targetTeamIds(String targetTeamIds) {
            this.targetTeamIds = targetTeamIds;
            return this;
        }
        
        /**
         * Set teamId
         * @param teamId The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
         * @return SetTeamsWorkspaceConnectionRequestBuilder
         */
        public SetTeamsWorkspaceConnectionRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for setTeamsWorkspaceConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest = buildBodyParams();
            return setTeamsWorkspaceConnectionCall(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId, _callback);
        }

        private AdminconversationsSetTeamsWorkspaceConnectionRequest buildBodyParams() {
            AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest = new AdminconversationsSetTeamsWorkspaceConnectionRequest();
            adminconversationsSetTeamsWorkspaceConnectionRequest.channelId(this.channelId);
            adminconversationsSetTeamsWorkspaceConnectionRequest.orgChannel(this.orgChannel);
            adminconversationsSetTeamsWorkspaceConnectionRequest.targetTeamIds(this.targetTeamIds);
            adminconversationsSetTeamsWorkspaceConnectionRequest.teamId(this.teamId);
            return adminconversationsSetTeamsWorkspaceConnectionRequest;
        }

        /**
         * Execute setTeamsWorkspaceConnection request
         * @return AdminconversationsSetTeamsWorkspaceConnectionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsSetTeamsWorkspaceConnectionResponse execute() throws ApiException {
            AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest = buildBodyParams();
            ApiResponse<AdminconversationsSetTeamsWorkspaceConnectionResponse> localVarResp = setTeamsWorkspaceConnectionWithHttpInfo(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setTeamsWorkspaceConnection request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsSetTeamsWorkspaceConnectionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsSetTeamsWorkspaceConnectionResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest = buildBodyParams();
            return setTeamsWorkspaceConnectionWithHttpInfo(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId);
        }

        /**
         * Execute setTeamsWorkspaceConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsSetTeamsWorkspaceConnectionResponse> _callback) throws ApiException {
            AdminconversationsSetTeamsWorkspaceConnectionRequest adminconversationsSetTeamsWorkspaceConnectionRequest = buildBodyParams();
            return setTeamsWorkspaceConnectionAsync(token, channelId, adminconversationsSetTeamsWorkspaceConnectionRequest, orgChannel, targetTeamIds, teamId, _callback);
        }
    }

    /**
     * 
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param adminconversationsSetTeamsWorkspaceConnectionRequest  (required)
     * @return SetTeamsWorkspaceConnectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.setTeams"> Documentation</a>
     */
    public SetTeamsWorkspaceConnectionRequestBuilder setTeamsWorkspaceConnection(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new SetTeamsWorkspaceConnectionRequestBuilder(token, channelId);
    }
    private okhttp3.Call unarchiveChannelCall(String token, String channelId, AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsUnarchiveChannelRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.unarchive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unarchiveChannelValidateBeforeCall(String token, String channelId, AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling unarchiveChannel(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling unarchiveChannel(Async)");
        }

        // verify the required parameter 'adminconversationsUnarchiveChannelRequest' is set
        if (adminconversationsUnarchiveChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsUnarchiveChannelRequest' when calling unarchiveChannel(Async)");
        }

        return unarchiveChannelCall(token, channelId, adminconversationsUnarchiveChannelRequest, _callback);

    }


    private ApiResponse<AdminconversationsUnarchiveChannelResponse> unarchiveChannelWithHttpInfo(String token, String channelId, AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest) throws ApiException {
        okhttp3.Call localVarCall = unarchiveChannelValidateBeforeCall(token, channelId, adminconversationsUnarchiveChannelRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsUnarchiveChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call unarchiveChannelAsync(String token, String channelId, AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest, final ApiCallback<AdminconversationsUnarchiveChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = unarchiveChannelValidateBeforeCall(token, channelId, adminconversationsUnarchiveChannelRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsUnarchiveChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UnarchiveChannelRequestBuilder {
        private final String token;
        private final String channelId;

        private UnarchiveChannelRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Build call for unarchiveChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest = buildBodyParams();
            return unarchiveChannelCall(token, channelId, adminconversationsUnarchiveChannelRequest, _callback);
        }

        private AdminconversationsUnarchiveChannelRequest buildBodyParams() {
            AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest = new AdminconversationsUnarchiveChannelRequest();
            adminconversationsUnarchiveChannelRequest.channelId(this.channelId);
            return adminconversationsUnarchiveChannelRequest;
        }

        /**
         * Execute unarchiveChannel request
         * @return AdminconversationsUnarchiveChannelResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsUnarchiveChannelResponse execute() throws ApiException {
            AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest = buildBodyParams();
            ApiResponse<AdminconversationsUnarchiveChannelResponse> localVarResp = unarchiveChannelWithHttpInfo(token, channelId, adminconversationsUnarchiveChannelRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute unarchiveChannel request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsUnarchiveChannelResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsUnarchiveChannelResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest = buildBodyParams();
            return unarchiveChannelWithHttpInfo(token, channelId, adminconversationsUnarchiveChannelRequest);
        }

        /**
         * Execute unarchiveChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsUnarchiveChannelResponse> _callback) throws ApiException {
            AdminconversationsUnarchiveChannelRequest adminconversationsUnarchiveChannelRequest = buildBodyParams();
            return unarchiveChannelAsync(token, channelId, adminconversationsUnarchiveChannelRequest, _callback);
        }
    }

    /**
     * 
     * Unarchive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param channelId The channel to unarchive. (required)
     * @param adminconversationsUnarchiveChannelRequest  (required)
     * @return UnarchiveChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.unarchive"> Documentation</a>
     */
    public UnarchiveChannelRequestBuilder unarchiveChannel(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new UnarchiveChannelRequestBuilder(token, channelId);
    }
}
