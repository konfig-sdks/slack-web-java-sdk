/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminuserssessionInvalidateSessionRequest;
import com.konfigthis.client.model.AdminuserssessionInvalidateSessionResponse;
import com.konfigthis.client.model.AdminuserssessionInvalidateSessiondefaultResponse;
import com.konfigthis.client.model.AdminuserssessionResetSessionsRequest;
import com.konfigthis.client.model.AdminuserssessionResetSessionsResponse;
import com.konfigthis.client.model.AdminuserssessionResetSessionsdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminUsersSessionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminUsersSessionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminUsersSessionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call invalidateSessionCall(String token, Integer sessionId, String teamId, AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminuserssessionInvalidateSessionRequest;

        // create path and map variables
        String localVarPath = "/admin.users.session.invalidate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sessionId != null) {
            localVarFormParams.put("session_id", sessionId);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invalidateSessionValidateBeforeCall(String token, Integer sessionId, String teamId, AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling invalidateSession(Async)");
        }

        // verify the required parameter 'sessionId' is set
        if (sessionId == null) {
            throw new ApiException("Missing the required parameter 'sessionId' when calling invalidateSession(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling invalidateSession(Async)");
        }

        // verify the required parameter 'adminuserssessionInvalidateSessionRequest' is set
        if (adminuserssessionInvalidateSessionRequest == null) {
            throw new ApiException("Missing the required parameter 'adminuserssessionInvalidateSessionRequest' when calling invalidateSession(Async)");
        }

        return invalidateSessionCall(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest, _callback);

    }


    private ApiResponse<AdminuserssessionInvalidateSessionResponse> invalidateSessionWithHttpInfo(String token, Integer sessionId, String teamId, AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest) throws ApiException {
        okhttp3.Call localVarCall = invalidateSessionValidateBeforeCall(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest, null);
        Type localVarReturnType = new TypeToken<AdminuserssessionInvalidateSessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call invalidateSessionAsync(String token, Integer sessionId, String teamId, AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest, final ApiCallback<AdminuserssessionInvalidateSessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = invalidateSessionValidateBeforeCall(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminuserssessionInvalidateSessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InvalidateSessionRequestBuilder {
        private final String token;
        private final Integer sessionId;
        private final String teamId;

        private InvalidateSessionRequestBuilder(String token, Integer sessionId, String teamId) {
            this.token = token;
            this.sessionId = sessionId;
            this.teamId = teamId;
        }

        /**
         * Build call for invalidateSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest = buildBodyParams();
            return invalidateSessionCall(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest, _callback);
        }

        private AdminuserssessionInvalidateSessionRequest buildBodyParams() {
            AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest = new AdminuserssessionInvalidateSessionRequest();
            adminuserssessionInvalidateSessionRequest.sessionId(this.sessionId);
            adminuserssessionInvalidateSessionRequest.teamId(this.teamId);
            return adminuserssessionInvalidateSessionRequest;
        }

        /**
         * Execute invalidateSession request
         * @return AdminuserssessionInvalidateSessionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminuserssessionInvalidateSessionResponse execute() throws ApiException {
            AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest = buildBodyParams();
            ApiResponse<AdminuserssessionInvalidateSessionResponse> localVarResp = invalidateSessionWithHttpInfo(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute invalidateSession request with HTTP info returned
         * @return ApiResponse&lt;AdminuserssessionInvalidateSessionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminuserssessionInvalidateSessionResponse> executeWithHttpInfo() throws ApiException {
            AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest = buildBodyParams();
            return invalidateSessionWithHttpInfo(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest);
        }

        /**
         * Execute invalidateSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminuserssessionInvalidateSessionResponse> _callback) throws ApiException {
            AdminuserssessionInvalidateSessionRequest adminuserssessionInvalidateSessionRequest = buildBodyParams();
            return invalidateSessionAsync(token, sessionId, teamId, adminuserssessionInvalidateSessionRequest, _callback);
        }
    }

    /**
     * 
     * Invalidate a single session for a user by session_id
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param sessionId  (required)
     * @param teamId ID of the team that the session belongs to (required)
     * @param adminuserssessionInvalidateSessionRequest  (required)
     * @return InvalidateSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.session.invalidate"> Documentation</a>
     */
    public InvalidateSessionRequestBuilder invalidateSession(String token, Integer sessionId, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (sessionId == null) throw new IllegalArgumentException("\"sessionId\" is required but got null");
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new InvalidateSessionRequestBuilder(token, sessionId, teamId);
    }
    private okhttp3.Call resetSessionsCall(String token, String userId, AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest, Boolean mobileOnly, Boolean webOnly, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminuserssessionResetSessionsRequest;

        // create path and map variables
        String localVarPath = "/admin.users.session.reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mobileOnly != null) {
            localVarFormParams.put("mobile_only", mobileOnly);
        }

        if (userId != null) {
            localVarFormParams.put("user_id", userId);
        }

        if (webOnly != null) {
            localVarFormParams.put("web_only", webOnly);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetSessionsValidateBeforeCall(String token, String userId, AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest, Boolean mobileOnly, Boolean webOnly, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling resetSessions(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling resetSessions(Async)");
        }

        // verify the required parameter 'adminuserssessionResetSessionsRequest' is set
        if (adminuserssessionResetSessionsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminuserssessionResetSessionsRequest' when calling resetSessions(Async)");
        }

        return resetSessionsCall(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly, _callback);

    }


    private ApiResponse<AdminuserssessionResetSessionsResponse> resetSessionsWithHttpInfo(String token, String userId, AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest, Boolean mobileOnly, Boolean webOnly) throws ApiException {
        okhttp3.Call localVarCall = resetSessionsValidateBeforeCall(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly, null);
        Type localVarReturnType = new TypeToken<AdminuserssessionResetSessionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call resetSessionsAsync(String token, String userId, AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest, Boolean mobileOnly, Boolean webOnly, final ApiCallback<AdminuserssessionResetSessionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetSessionsValidateBeforeCall(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly, _callback);
        Type localVarReturnType = new TypeToken<AdminuserssessionResetSessionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ResetSessionsRequestBuilder {
        private final String token;
        private final String userId;
        private Boolean mobileOnly;
        private Boolean webOnly;

        private ResetSessionsRequestBuilder(String token, String userId) {
            this.token = token;
            this.userId = userId;
        }

        /**
         * Set mobileOnly
         * @param mobileOnly Only expire mobile sessions (default: false) (optional)
         * @return ResetSessionsRequestBuilder
         */
        public ResetSessionsRequestBuilder mobileOnly(Boolean mobileOnly) {
            this.mobileOnly = mobileOnly;
            return this;
        }
        
        /**
         * Set webOnly
         * @param webOnly Only expire web sessions (default: false) (optional)
         * @return ResetSessionsRequestBuilder
         */
        public ResetSessionsRequestBuilder webOnly(Boolean webOnly) {
            this.webOnly = webOnly;
            return this;
        }
        
        /**
         * Build call for resetSessions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest = buildBodyParams();
            return resetSessionsCall(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly, _callback);
        }

        private AdminuserssessionResetSessionsRequest buildBodyParams() {
            AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest = new AdminuserssessionResetSessionsRequest();
            adminuserssessionResetSessionsRequest.mobileOnly(this.mobileOnly);
            adminuserssessionResetSessionsRequest.userId(this.userId);
            adminuserssessionResetSessionsRequest.webOnly(this.webOnly);
            return adminuserssessionResetSessionsRequest;
        }

        /**
         * Execute resetSessions request
         * @return AdminuserssessionResetSessionsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminuserssessionResetSessionsResponse execute() throws ApiException {
            AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest = buildBodyParams();
            ApiResponse<AdminuserssessionResetSessionsResponse> localVarResp = resetSessionsWithHttpInfo(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute resetSessions request with HTTP info returned
         * @return ApiResponse&lt;AdminuserssessionResetSessionsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminuserssessionResetSessionsResponse> executeWithHttpInfo() throws ApiException {
            AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest = buildBodyParams();
            return resetSessionsWithHttpInfo(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly);
        }

        /**
         * Execute resetSessions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminuserssessionResetSessionsResponse> _callback) throws ApiException {
            AdminuserssessionResetSessionsRequest adminuserssessionResetSessionsRequest = buildBodyParams();
            return resetSessionsAsync(token, userId, adminuserssessionResetSessionsRequest, mobileOnly, webOnly, _callback);
        }
    }

    /**
     * 
     * Wipes all valid sessions on all devices for a given user
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param userId The ID of the user to wipe sessions for (required)
     * @param adminuserssessionResetSessionsRequest  (required)
     * @return ResetSessionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.users.session.reset"> Documentation</a>
     */
    public ResetSessionsRequestBuilder resetSessions(String token, String userId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        return new ResetSessionsRequestBuilder(token, userId);
    }
}
