/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.RemindersAddRequest;
import com.konfigthis.client.model.RemindersAddResponse;
import com.konfigthis.client.model.RemindersAdddefaultResponse;
import com.konfigthis.client.model.RemindersCompleteRequest;
import com.konfigthis.client.model.RemindersCompleteResponse;
import com.konfigthis.client.model.RemindersCompletedefaultResponse;
import com.konfigthis.client.model.RemindersDeleteRequest;
import com.konfigthis.client.model.RemindersDeleteResponse;
import com.konfigthis.client.model.RemindersDeletedefaultResponse;
import com.konfigthis.client.model.RemindersInfoResponse;
import com.konfigthis.client.model.RemindersInfodefaultResponse;
import com.konfigthis.client.model.RemindersListResponse;
import com.konfigthis.client.model.RemindersListdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RemindersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RemindersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RemindersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCall(String token, String text, String time, RemindersAddRequest remindersAddRequest, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remindersAddRequest;

        // create path and map variables
        String localVarPath = "/reminders.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        if (time != null) {
            localVarFormParams.put("time", time);
        }

        if (user != null) {
            localVarFormParams.put("user", user);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addValidateBeforeCall(String token, String text, String time, RemindersAddRequest remindersAddRequest, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling add(Async)");
        }

        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling add(Async)");
        }

        // verify the required parameter 'time' is set
        if (time == null) {
            throw new ApiException("Missing the required parameter 'time' when calling add(Async)");
        }

        // verify the required parameter 'remindersAddRequest' is set
        if (remindersAddRequest == null) {
            throw new ApiException("Missing the required parameter 'remindersAddRequest' when calling add(Async)");
        }

        return addCall(token, text, time, remindersAddRequest, user, _callback);

    }


    private ApiResponse<RemindersAddResponse> addWithHttpInfo(String token, String text, String time, RemindersAddRequest remindersAddRequest, String user) throws ApiException {
        okhttp3.Call localVarCall = addValidateBeforeCall(token, text, time, remindersAddRequest, user, null);
        Type localVarReturnType = new TypeToken<RemindersAddResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addAsync(String token, String text, String time, RemindersAddRequest remindersAddRequest, String user, final ApiCallback<RemindersAddResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addValidateBeforeCall(token, text, time, remindersAddRequest, user, _callback);
        Type localVarReturnType = new TypeToken<RemindersAddResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddRequestBuilder {
        private final String token;
        private final String text;
        private final String time;
        private String user;

        private AddRequestBuilder(String token, String text, String time) {
            this.token = token;
            this.text = text;
            this.time = time;
        }

        /**
         * Set user
         * @param user The user who will receive the reminder. If no user is specified, the reminder will go to user who created it. (optional)
         * @return AddRequestBuilder
         */
        public AddRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for add
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RemindersAddRequest remindersAddRequest = buildBodyParams();
            return addCall(token, text, time, remindersAddRequest, user, _callback);
        }

        private RemindersAddRequest buildBodyParams() {
            RemindersAddRequest remindersAddRequest = new RemindersAddRequest();
            remindersAddRequest.text(this.text);
            remindersAddRequest.time(this.time);
            remindersAddRequest.user(this.user);
            return remindersAddRequest;
        }

        /**
         * Execute add request
         * @return RemindersAddResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public RemindersAddResponse execute() throws ApiException {
            RemindersAddRequest remindersAddRequest = buildBodyParams();
            ApiResponse<RemindersAddResponse> localVarResp = addWithHttpInfo(token, text, time, remindersAddRequest, user);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute add request with HTTP info returned
         * @return ApiResponse&lt;RemindersAddResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemindersAddResponse> executeWithHttpInfo() throws ApiException {
            RemindersAddRequest remindersAddRequest = buildBodyParams();
            return addWithHttpInfo(token, text, time, remindersAddRequest, user);
        }

        /**
         * Execute add request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemindersAddResponse> _callback) throws ApiException {
            RemindersAddRequest remindersAddRequest = buildBodyParams();
            return addAsync(token, text, time, remindersAddRequest, user, _callback);
        }
    }

    /**
     * 
     * Creates a reminder.
     * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (required)
     * @param text The content of the reminder (required)
     * @param time When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\&quot;in 15 minutes,\\\&quot; or \\\&quot;every Thursday\\\&quot;) (required)
     * @param remindersAddRequest  (required)
     * @return AddRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.add"> Documentation</a>
     */
    public AddRequestBuilder add(String token, String text, String time) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            

        if (time == null) throw new IllegalArgumentException("\"time\" is required but got null");
            

        return new AddRequestBuilder(token, text, time);
    }
    private okhttp3.Call completeCall(String token, String reminder, RemindersCompleteRequest remindersCompleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remindersCompleteRequest;

        // create path and map variables
        String localVarPath = "/reminders.complete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reminder != null) {
            localVarFormParams.put("reminder", reminder);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeValidateBeforeCall(String token, String reminder, RemindersCompleteRequest remindersCompleteRequest, final ApiCallback _callback) throws ApiException {
        return completeCall(token, reminder, remindersCompleteRequest, _callback);

    }


    private ApiResponse<RemindersCompleteResponse> completeWithHttpInfo(String token, String reminder, RemindersCompleteRequest remindersCompleteRequest) throws ApiException {
        okhttp3.Call localVarCall = completeValidateBeforeCall(token, reminder, remindersCompleteRequest, null);
        Type localVarReturnType = new TypeToken<RemindersCompleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completeAsync(String token, String reminder, RemindersCompleteRequest remindersCompleteRequest, final ApiCallback<RemindersCompleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeValidateBeforeCall(token, reminder, remindersCompleteRequest, _callback);
        Type localVarReturnType = new TypeToken<RemindersCompleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompleteRequestBuilder {
        private String token;
        private String reminder;

        private CompleteRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (optional)
         * @return CompleteRequestBuilder
         */
        public CompleteRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set reminder
         * @param reminder The ID of the reminder to be marked as complete (optional)
         * @return CompleteRequestBuilder
         */
        public CompleteRequestBuilder reminder(String reminder) {
            this.reminder = reminder;
            return this;
        }
        
        /**
         * Build call for complete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RemindersCompleteRequest remindersCompleteRequest = buildBodyParams();
            return completeCall(token, reminder, remindersCompleteRequest, _callback);
        }

        private RemindersCompleteRequest buildBodyParams() {
            RemindersCompleteRequest remindersCompleteRequest = new RemindersCompleteRequest();
            remindersCompleteRequest.reminder(this.reminder);
            return remindersCompleteRequest;
        }

        /**
         * Execute complete request
         * @return RemindersCompleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public RemindersCompleteResponse execute() throws ApiException {
            RemindersCompleteRequest remindersCompleteRequest = buildBodyParams();
            ApiResponse<RemindersCompleteResponse> localVarResp = completeWithHttpInfo(token, reminder, remindersCompleteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute complete request with HTTP info returned
         * @return ApiResponse&lt;RemindersCompleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemindersCompleteResponse> executeWithHttpInfo() throws ApiException {
            RemindersCompleteRequest remindersCompleteRequest = buildBodyParams();
            return completeWithHttpInfo(token, reminder, remindersCompleteRequest);
        }

        /**
         * Execute complete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemindersCompleteResponse> _callback) throws ApiException {
            RemindersCompleteRequest remindersCompleteRequest = buildBodyParams();
            return completeAsync(token, reminder, remindersCompleteRequest, _callback);
        }
    }

    /**
     * 
     * Marks a reminder as complete.
     * @return CompleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.complete"> Documentation</a>
     */
    public CompleteRequestBuilder complete() throws IllegalArgumentException {
        return new CompleteRequestBuilder();
    }
    private okhttp3.Call deleteCall(String token, String reminder, RemindersDeleteRequest remindersDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = remindersDeleteRequest;

        // create path and map variables
        String localVarPath = "/reminders.delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reminder != null) {
            localVarFormParams.put("reminder", reminder);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String token, String reminder, RemindersDeleteRequest remindersDeleteRequest, final ApiCallback _callback) throws ApiException {
        return deleteCall(token, reminder, remindersDeleteRequest, _callback);

    }


    private ApiResponse<RemindersDeleteResponse> deleteWithHttpInfo(String token, String reminder, RemindersDeleteRequest remindersDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(token, reminder, remindersDeleteRequest, null);
        Type localVarReturnType = new TypeToken<RemindersDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAsync(String token, String reminder, RemindersDeleteRequest remindersDeleteRequest, final ApiCallback<RemindersDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(token, reminder, remindersDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<RemindersDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRequestBuilder {
        private String token;
        private String reminder;

        private DeleteRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;reminders:write&#x60; (optional)
         * @return DeleteRequestBuilder
         */
        public DeleteRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set reminder
         * @param reminder The ID of the reminder (optional)
         * @return DeleteRequestBuilder
         */
        public DeleteRequestBuilder reminder(String reminder) {
            this.reminder = reminder;
            return this;
        }
        
        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RemindersDeleteRequest remindersDeleteRequest = buildBodyParams();
            return deleteCall(token, reminder, remindersDeleteRequest, _callback);
        }

        private RemindersDeleteRequest buildBodyParams() {
            RemindersDeleteRequest remindersDeleteRequest = new RemindersDeleteRequest();
            remindersDeleteRequest.reminder(this.reminder);
            return remindersDeleteRequest;
        }

        /**
         * Execute delete request
         * @return RemindersDeleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public RemindersDeleteResponse execute() throws ApiException {
            RemindersDeleteRequest remindersDeleteRequest = buildBodyParams();
            ApiResponse<RemindersDeleteResponse> localVarResp = deleteWithHttpInfo(token, reminder, remindersDeleteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;RemindersDeleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemindersDeleteResponse> executeWithHttpInfo() throws ApiException {
            RemindersDeleteRequest remindersDeleteRequest = buildBodyParams();
            return deleteWithHttpInfo(token, reminder, remindersDeleteRequest);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemindersDeleteResponse> _callback) throws ApiException {
            RemindersDeleteRequest remindersDeleteRequest = buildBodyParams();
            return deleteAsync(token, reminder, remindersDeleteRequest, _callback);
        }
    }

    /**
     * 
     * Deletes a reminder.
     * @return DeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.delete"> Documentation</a>
     */
    public DeleteRequestBuilder delete() throws IllegalArgumentException {
        return new DeleteRequestBuilder();
    }
    private okhttp3.Call infoCall(String token, String reminder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reminders.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (reminder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reminder", reminder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoValidateBeforeCall(String token, String reminder, final ApiCallback _callback) throws ApiException {
        return infoCall(token, reminder, _callback);

    }


    private ApiResponse<RemindersInfoResponse> infoWithHttpInfo(String token, String reminder) throws ApiException {
        okhttp3.Call localVarCall = infoValidateBeforeCall(token, reminder, null);
        Type localVarReturnType = new TypeToken<RemindersInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call infoAsync(String token, String reminder, final ApiCallback<RemindersInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoValidateBeforeCall(token, reminder, _callback);
        Type localVarReturnType = new TypeToken<RemindersInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InfoRequestBuilder {
        private String token;
        private String reminder;

        private InfoRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;reminders:read&#x60; (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set reminder
         * @param reminder The ID of the reminder (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder reminder(String reminder) {
            this.reminder = reminder;
            return this;
        }
        
        /**
         * Build call for info
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return infoCall(token, reminder, _callback);
        }


        /**
         * Execute info request
         * @return RemindersInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public RemindersInfoResponse execute() throws ApiException {
            ApiResponse<RemindersInfoResponse> localVarResp = infoWithHttpInfo(token, reminder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute info request with HTTP info returned
         * @return ApiResponse&lt;RemindersInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemindersInfoResponse> executeWithHttpInfo() throws ApiException {
            return infoWithHttpInfo(token, reminder);
        }

        /**
         * Execute info request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemindersInfoResponse> _callback) throws ApiException {
            return infoAsync(token, reminder, _callback);
        }
    }

    /**
     * 
     * Gets information about a reminder.
     * @return InfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.info"> Documentation</a>
     */
    public InfoRequestBuilder info() throws IllegalArgumentException {
        return new InfoRequestBuilder();
    }
    private okhttp3.Call listCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/reminders.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        return listCall(token, _callback);

    }


    private ApiResponse<RemindersListResponse> listWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<RemindersListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String token, final ApiCallback<RemindersListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<RemindersListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String token;

        private ListRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;reminders:read&#x60; (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(token, _callback);
        }


        /**
         * Execute list request
         * @return RemindersListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public RemindersListResponse execute() throws ApiException {
            ApiResponse<RemindersListResponse> localVarResp = listWithHttpInfo(token);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;RemindersListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RemindersListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(token);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RemindersListResponse> _callback) throws ApiException {
            return listAsync(token, _callback);
        }
    }

    /**
     * 
     * Lists all reminders created by or for a given user.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/reminders.list"> Documentation</a>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
}
