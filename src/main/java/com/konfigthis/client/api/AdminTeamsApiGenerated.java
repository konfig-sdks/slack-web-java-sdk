/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminteamsCreateEnterpriseTeamRequest;
import com.konfigthis.client.model.AdminteamsCreateEnterpriseTeamResponse;
import com.konfigthis.client.model.AdminteamsCreateEnterpriseTeamdefaultResponse;
import com.konfigthis.client.model.AdminteamsListAllResponse;
import com.konfigthis.client.model.AdminteamsListAlldefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminTeamsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminTeamsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminTeamsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEnterpriseTeamCall(String token, String teamDomain, String teamName, AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest, String teamDescription, String teamDiscoverability, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamsCreateEnterpriseTeamRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamDescription != null) {
            localVarFormParams.put("team_description", teamDescription);
        }

        if (teamDiscoverability != null) {
            localVarFormParams.put("team_discoverability", teamDiscoverability);
        }

        if (teamDomain != null) {
            localVarFormParams.put("team_domain", teamDomain);
        }

        if (teamName != null) {
            localVarFormParams.put("team_name", teamName);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEnterpriseTeamValidateBeforeCall(String token, String teamDomain, String teamName, AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest, String teamDescription, String teamDiscoverability, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling createEnterpriseTeam(Async)");
        }

        // verify the required parameter 'teamDomain' is set
        if (teamDomain == null) {
            throw new ApiException("Missing the required parameter 'teamDomain' when calling createEnterpriseTeam(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling createEnterpriseTeam(Async)");
        }

        // verify the required parameter 'adminteamsCreateEnterpriseTeamRequest' is set
        if (adminteamsCreateEnterpriseTeamRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamsCreateEnterpriseTeamRequest' when calling createEnterpriseTeam(Async)");
        }

        return createEnterpriseTeamCall(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability, _callback);

    }


    private ApiResponse<AdminteamsCreateEnterpriseTeamResponse> createEnterpriseTeamWithHttpInfo(String token, String teamDomain, String teamName, AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest, String teamDescription, String teamDiscoverability) throws ApiException {
        okhttp3.Call localVarCall = createEnterpriseTeamValidateBeforeCall(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability, null);
        Type localVarReturnType = new TypeToken<AdminteamsCreateEnterpriseTeamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEnterpriseTeamAsync(String token, String teamDomain, String teamName, AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest, String teamDescription, String teamDiscoverability, final ApiCallback<AdminteamsCreateEnterpriseTeamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEnterpriseTeamValidateBeforeCall(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability, _callback);
        Type localVarReturnType = new TypeToken<AdminteamsCreateEnterpriseTeamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEnterpriseTeamRequestBuilder {
        private final String token;
        private final String teamDomain;
        private final String teamName;
        private String teamDescription;
        private String teamDiscoverability;

        private CreateEnterpriseTeamRequestBuilder(String token, String teamDomain, String teamName) {
            this.token = token;
            this.teamDomain = teamDomain;
            this.teamName = teamName;
        }

        /**
         * Set teamDescription
         * @param teamDescription Description for the team. (optional)
         * @return CreateEnterpriseTeamRequestBuilder
         */
        public CreateEnterpriseTeamRequestBuilder teamDescription(String teamDescription) {
            this.teamDescription = teamDescription;
            return this;
        }
        
        /**
         * Set teamDiscoverability
         * @param teamDiscoverability Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;. (optional)
         * @return CreateEnterpriseTeamRequestBuilder
         */
        public CreateEnterpriseTeamRequestBuilder teamDiscoverability(String teamDiscoverability) {
            this.teamDiscoverability = teamDiscoverability;
            return this;
        }
        
        /**
         * Build call for createEnterpriseTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest = buildBodyParams();
            return createEnterpriseTeamCall(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability, _callback);
        }

        private AdminteamsCreateEnterpriseTeamRequest buildBodyParams() {
            AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest = new AdminteamsCreateEnterpriseTeamRequest();
            adminteamsCreateEnterpriseTeamRequest.teamDescription(this.teamDescription);
            adminteamsCreateEnterpriseTeamRequest.teamDiscoverability(this.teamDiscoverability);
            adminteamsCreateEnterpriseTeamRequest.teamDomain(this.teamDomain);
            adminteamsCreateEnterpriseTeamRequest.teamName(this.teamName);
            return adminteamsCreateEnterpriseTeamRequest;
        }

        /**
         * Execute createEnterpriseTeam request
         * @return AdminteamsCreateEnterpriseTeamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamsCreateEnterpriseTeamResponse execute() throws ApiException {
            AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest = buildBodyParams();
            ApiResponse<AdminteamsCreateEnterpriseTeamResponse> localVarResp = createEnterpriseTeamWithHttpInfo(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEnterpriseTeam request with HTTP info returned
         * @return ApiResponse&lt;AdminteamsCreateEnterpriseTeamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamsCreateEnterpriseTeamResponse> executeWithHttpInfo() throws ApiException {
            AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest = buildBodyParams();
            return createEnterpriseTeamWithHttpInfo(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability);
        }

        /**
         * Execute createEnterpriseTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamsCreateEnterpriseTeamResponse> _callback) throws ApiException {
            AdminteamsCreateEnterpriseTeamRequest adminteamsCreateEnterpriseTeamRequest = buildBodyParams();
            return createEnterpriseTeamAsync(token, teamDomain, teamName, adminteamsCreateEnterpriseTeamRequest, teamDescription, teamDiscoverability, _callback);
        }
    }

    /**
     * 
     * Create an Enterprise team.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param teamDomain Team domain (for example, slacksoftballteam). (required)
     * @param teamName Team name (for example, Slack Softball Team). (required)
     * @param adminteamsCreateEnterpriseTeamRequest  (required)
     * @return CreateEnterpriseTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.create"> Documentation</a>
     */
    public CreateEnterpriseTeamRequestBuilder createEnterpriseTeam(String token, String teamDomain, String teamName) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamDomain == null) throw new IllegalArgumentException("\"teamDomain\" is required but got null");
            

        if (teamName == null) throw new IllegalArgumentException("\"teamName\" is required but got null");
            

        return new CreateEnterpriseTeamRequestBuilder(token, teamDomain, teamName);
    }
    private okhttp3.Call listAllCall(String token, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.teams.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(String token, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listAll(Async)");
        }

        return listAllCall(token, limit, cursor, _callback);

    }


    private ApiResponse<AdminteamsListAllResponse> listAllWithHttpInfo(String token, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(token, limit, cursor, null);
        Type localVarReturnType = new TypeToken<AdminteamsListAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(String token, Integer limit, String cursor, final ApiCallback<AdminteamsListAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(token, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<AdminteamsListAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private final String token;
        private Integer limit;
        private String cursor;

        private ListAllRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set limit
         * @param limit The maximum number of items to return. Must be between 1 - 100 both inclusive. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(token, limit, cursor, _callback);
        }


        /**
         * Execute listAll request
         * @return AdminteamsListAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamsListAllResponse execute() throws ApiException {
            ApiResponse<AdminteamsListAllResponse> localVarResp = listAllWithHttpInfo(token, limit, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;AdminteamsListAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamsListAllResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(token, limit, cursor);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamsListAllResponse> _callback) throws ApiException {
            return listAllAsync(token, limit, cursor, _callback);
        }
    }

    /**
     * 
     * List all teams on an Enterprise organization
     * @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.list"> Documentation</a>
     */
    public ListAllRequestBuilder listAll(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListAllRequestBuilder(token);
    }
}
