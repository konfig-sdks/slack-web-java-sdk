/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.UsergroupsusersListAllUsersResponse;
import com.konfigthis.client.model.UsergroupsusersListAllUsersdefaultResponse;
import com.konfigthis.client.model.UsergroupsusersUpdateListRequest;
import com.konfigthis.client.model.UsergroupsusersUpdateListResponse;
import com.konfigthis.client.model.UsergroupsusersUpdateListdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsergroupsUsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsergroupsUsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsergroupsUsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listAllUsersCall(String token, String usergroup, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups.users.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includeDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_disabled", includeDisabled));
        }

        if (usergroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usergroup", usergroup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllUsersValidateBeforeCall(String token, String usergroup, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listAllUsers(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling listAllUsers(Async)");
        }

        return listAllUsersCall(token, usergroup, includeDisabled, _callback);

    }


    private ApiResponse<UsergroupsusersListAllUsersResponse> listAllUsersWithHttpInfo(String token, String usergroup, Boolean includeDisabled) throws ApiException {
        okhttp3.Call localVarCall = listAllUsersValidateBeforeCall(token, usergroup, includeDisabled, null);
        Type localVarReturnType = new TypeToken<UsergroupsusersListAllUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllUsersAsync(String token, String usergroup, Boolean includeDisabled, final ApiCallback<UsergroupsusersListAllUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllUsersValidateBeforeCall(token, usergroup, includeDisabled, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsusersListAllUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllUsersRequestBuilder {
        private final String token;
        private final String usergroup;
        private Boolean includeDisabled;

        private ListAllUsersRequestBuilder(String token, String usergroup) {
            this.token = token;
            this.usergroup = usergroup;
        }

        /**
         * Set includeDisabled
         * @param includeDisabled Allow results that involve disabled User Groups. (optional)
         * @return ListAllUsersRequestBuilder
         */
        public ListAllUsersRequestBuilder includeDisabled(Boolean includeDisabled) {
            this.includeDisabled = includeDisabled;
            return this;
        }
        
        /**
         * Build call for listAllUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllUsersCall(token, usergroup, includeDisabled, _callback);
        }


        /**
         * Execute listAllUsers request
         * @return UsergroupsusersListAllUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public UsergroupsusersListAllUsersResponse execute() throws ApiException {
            ApiResponse<UsergroupsusersListAllUsersResponse> localVarResp = listAllUsersWithHttpInfo(token, usergroup, includeDisabled);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllUsers request with HTTP info returned
         * @return ApiResponse&lt;UsergroupsusersListAllUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsergroupsusersListAllUsersResponse> executeWithHttpInfo() throws ApiException {
            return listAllUsersWithHttpInfo(token, usergroup, includeDisabled);
        }

        /**
         * Execute listAllUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsergroupsusersListAllUsersResponse> _callback) throws ApiException {
            return listAllUsersAsync(token, usergroup, includeDisabled, _callback);
        }
    }

    /**
     * 
     * List all users in a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @return ListAllUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.list"> Documentation</a>
     */
    public ListAllUsersRequestBuilder listAllUsers(String token, String usergroup) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (usergroup == null) throw new IllegalArgumentException("\"usergroup\" is required but got null");
            

        return new ListAllUsersRequestBuilder(token, usergroup);
    }
    private okhttp3.Call updateListCall(String token, String usergroup, String users, Boolean includeCount, UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupsusersUpdateListRequest;

        // create path and map variables
        String localVarPath = "/usergroups.users.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (usergroup != null) {
            localVarFormParams.put("usergroup", usergroup);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateListValidateBeforeCall(String token, String usergroup, String users, Boolean includeCount, UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateList(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling updateList(Async)");
        }

        // verify the required parameter 'users' is set
        if (users == null) {
            throw new ApiException("Missing the required parameter 'users' when calling updateList(Async)");
        }

        return updateListCall(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest, _callback);

    }


    private ApiResponse<UsergroupsusersUpdateListResponse> updateListWithHttpInfo(String token, String usergroup, String users, Boolean includeCount, UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest) throws ApiException {
        okhttp3.Call localVarCall = updateListValidateBeforeCall(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest, null);
        Type localVarReturnType = new TypeToken<UsergroupsusersUpdateListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateListAsync(String token, String usergroup, String users, Boolean includeCount, UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest, final ApiCallback<UsergroupsusersUpdateListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateListValidateBeforeCall(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsusersUpdateListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateListRequestBuilder {
        private final String token;
        private final String usergroup;
        private final String users;
        private Boolean includeCount;

        private UpdateListRequestBuilder(String token, String usergroup, String users) {
            this.token = token;
            this.usergroup = usergroup;
            this.users = users;
        }

        /**
         * Set includeCount
         * @param includeCount Include the number of users in the User Group. (optional)
         * @return UpdateListRequestBuilder
         */
        public UpdateListRequestBuilder includeCount(Boolean includeCount) {
            this.includeCount = includeCount;
            return this;
        }
        
        /**
         * Build call for updateList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest = buildBodyParams();
            return updateListCall(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest, _callback);
        }

        private UsergroupsusersUpdateListRequest buildBodyParams() {
            UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest = new UsergroupsusersUpdateListRequest();
            usergroupsusersUpdateListRequest.includeCount(this.includeCount);
            usergroupsusersUpdateListRequest.usergroup(this.usergroup);
            usergroupsusersUpdateListRequest.users(this.users);
            return usergroupsusersUpdateListRequest;
        }

        /**
         * Execute updateList request
         * @return UsergroupsusersUpdateListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsergroupsusersUpdateListResponse execute() throws ApiException {
            UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest = buildBodyParams();
            ApiResponse<UsergroupsusersUpdateListResponse> localVarResp = updateListWithHttpInfo(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateList request with HTTP info returned
         * @return ApiResponse&lt;UsergroupsusersUpdateListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsergroupsusersUpdateListResponse> executeWithHttpInfo() throws ApiException {
            UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest = buildBodyParams();
            return updateListWithHttpInfo(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest);
        }

        /**
         * Execute updateList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsergroupsusersUpdateListResponse> _callback) throws ApiException {
            UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest = buildBodyParams();
            return updateListAsync(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest, _callback);
        }
    }

    /**
     * 
     * Update the list of users for a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @return UpdateListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.update"> Documentation</a>
     */
    public UpdateListRequestBuilder updateList(String token, String usergroup, String users) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (usergroup == null) throw new IllegalArgumentException("\"usergroup\" is required but got null");
            

        if (users == null) throw new IllegalArgumentException("\"users\" is required but got null");
            

        return new UpdateListRequestBuilder(token, usergroup, users);
    }
}
