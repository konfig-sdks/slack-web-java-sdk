/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.UsergroupsCreateRequest;
import com.konfigthis.client.model.UsergroupsCreateResponse;
import com.konfigthis.client.model.UsergroupsCreatedefaultResponse;
import com.konfigthis.client.model.UsergroupsDisableRequest;
import com.konfigthis.client.model.UsergroupsDisableResponse;
import com.konfigthis.client.model.UsergroupsDisabledefaultResponse;
import com.konfigthis.client.model.UsergroupsEnableRequest;
import com.konfigthis.client.model.UsergroupsEnableResponse;
import com.konfigthis.client.model.UsergroupsEnabledefaultResponse;
import com.konfigthis.client.model.UsergroupsListResponse;
import com.konfigthis.client.model.UsergroupsListdefaultResponse;
import com.konfigthis.client.model.UsergroupsUpdateRequest;
import com.konfigthis.client.model.UsergroupsUpdateResponse;
import com.konfigthis.client.model.UsergroupsUpdatedefaultResponse;
import com.konfigthis.client.model.UsergroupsusersListAllUsersResponse;
import com.konfigthis.client.model.UsergroupsusersListAllUsersdefaultResponse;
import com.konfigthis.client.model.UsergroupsusersUpdateListRequest;
import com.konfigthis.client.model.UsergroupsusersUpdateListResponse;
import com.konfigthis.client.model.UsergroupsusersUpdateListdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsergroupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsergroupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsergroupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCall(String token, String name, String description, String channels, String handle, Boolean includeCount, UsergroupsCreateRequest usergroupsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupsCreateRequest;

        // create path and map variables
        String localVarPath = "/usergroups.create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (channels != null) {
            localVarFormParams.put("channels", channels);
        }

        if (handle != null) {
            localVarFormParams.put("handle", handle);
        }

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createValidateBeforeCall(String token, String name, String description, String channels, String handle, Boolean includeCount, UsergroupsCreateRequest usergroupsCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling create(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling create(Async)");
        }

        return createCall(token, name, description, channels, handle, includeCount, usergroupsCreateRequest, _callback);

    }


    private ApiResponse<UsergroupsCreateResponse> createWithHttpInfo(String token, String name, String description, String channels, String handle, Boolean includeCount, UsergroupsCreateRequest usergroupsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createValidateBeforeCall(token, name, description, channels, handle, includeCount, usergroupsCreateRequest, null);
        Type localVarReturnType = new TypeToken<UsergroupsCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAsync(String token, String name, String description, String channels, String handle, Boolean includeCount, UsergroupsCreateRequest usergroupsCreateRequest, final ApiCallback<UsergroupsCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createValidateBeforeCall(token, name, description, channels, handle, includeCount, usergroupsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRequestBuilder {
        private final String token;
        private final String name;
        private String description;
        private String channels;
        private String handle;
        private Boolean includeCount;

        private CreateRequestBuilder(String token, String name) {
            this.token = token;
            this.name = name;
        }

        /**
         * Set description
         * @param description A short description of the User Group. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set channels
         * @param channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder channels(String channels) {
            this.channels = channels;
            return this;
        }
        
        /**
         * Set handle
         * @param handle A mention handle. Must be unique among channels, users and User Groups. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder handle(String handle) {
            this.handle = handle;
            return this;
        }
        
        /**
         * Set includeCount
         * @param includeCount Include the number of users in each User Group. (optional)
         * @return CreateRequestBuilder
         */
        public CreateRequestBuilder includeCount(Boolean includeCount) {
            this.includeCount = includeCount;
            return this;
        }
        
        /**
         * Build call for create
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsergroupsCreateRequest usergroupsCreateRequest = buildBodyParams();
            return createCall(token, name, description, channels, handle, includeCount, usergroupsCreateRequest, _callback);
        }

        private UsergroupsCreateRequest buildBodyParams() {
            UsergroupsCreateRequest usergroupsCreateRequest = new UsergroupsCreateRequest();
            usergroupsCreateRequest.description(this.description);
            usergroupsCreateRequest.channels(this.channels);
            usergroupsCreateRequest.handle(this.handle);
            usergroupsCreateRequest.includeCount(this.includeCount);
            usergroupsCreateRequest.name(this.name);
            return usergroupsCreateRequest;
        }

        /**
         * Execute create request
         * @return UsergroupsCreateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsergroupsCreateResponse execute() throws ApiException {
            UsergroupsCreateRequest usergroupsCreateRequest = buildBodyParams();
            ApiResponse<UsergroupsCreateResponse> localVarResp = createWithHttpInfo(token, name, description, channels, handle, includeCount, usergroupsCreateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute create request with HTTP info returned
         * @return ApiResponse&lt;UsergroupsCreateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsergroupsCreateResponse> executeWithHttpInfo() throws ApiException {
            UsergroupsCreateRequest usergroupsCreateRequest = buildBodyParams();
            return createWithHttpInfo(token, name, description, channels, handle, includeCount, usergroupsCreateRequest);
        }

        /**
         * Execute create request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsergroupsCreateResponse> _callback) throws ApiException {
            UsergroupsCreateRequest usergroupsCreateRequest = buildBodyParams();
            return createAsync(token, name, description, channels, handle, includeCount, usergroupsCreateRequest, _callback);
        }
    }

    /**
     * 
     * Create a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param name A name for the User Group. Must be unique among User Groups. (required)
     * @return CreateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.create"> Documentation</a>
     */
    public CreateRequestBuilder create(String token, String name) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateRequestBuilder(token, name);
    }
    private okhttp3.Call disableCall(String token, String usergroup, Boolean includeCount, UsergroupsDisableRequest usergroupsDisableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupsDisableRequest;

        // create path and map variables
        String localVarPath = "/usergroups.disable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (usergroup != null) {
            localVarFormParams.put("usergroup", usergroup);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disableValidateBeforeCall(String token, String usergroup, Boolean includeCount, UsergroupsDisableRequest usergroupsDisableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling disable(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling disable(Async)");
        }

        return disableCall(token, usergroup, includeCount, usergroupsDisableRequest, _callback);

    }


    private ApiResponse<UsergroupsDisableResponse> disableWithHttpInfo(String token, String usergroup, Boolean includeCount, UsergroupsDisableRequest usergroupsDisableRequest) throws ApiException {
        okhttp3.Call localVarCall = disableValidateBeforeCall(token, usergroup, includeCount, usergroupsDisableRequest, null);
        Type localVarReturnType = new TypeToken<UsergroupsDisableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disableAsync(String token, String usergroup, Boolean includeCount, UsergroupsDisableRequest usergroupsDisableRequest, final ApiCallback<UsergroupsDisableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disableValidateBeforeCall(token, usergroup, includeCount, usergroupsDisableRequest, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsDisableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DisableRequestBuilder {
        private final String token;
        private final String usergroup;
        private Boolean includeCount;

        private DisableRequestBuilder(String token, String usergroup) {
            this.token = token;
            this.usergroup = usergroup;
        }

        /**
         * Set includeCount
         * @param includeCount Include the number of users in the User Group. (optional)
         * @return DisableRequestBuilder
         */
        public DisableRequestBuilder includeCount(Boolean includeCount) {
            this.includeCount = includeCount;
            return this;
        }
        
        /**
         * Build call for disable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsergroupsDisableRequest usergroupsDisableRequest = buildBodyParams();
            return disableCall(token, usergroup, includeCount, usergroupsDisableRequest, _callback);
        }

        private UsergroupsDisableRequest buildBodyParams() {
            UsergroupsDisableRequest usergroupsDisableRequest = new UsergroupsDisableRequest();
            usergroupsDisableRequest.includeCount(this.includeCount);
            usergroupsDisableRequest.usergroup(this.usergroup);
            return usergroupsDisableRequest;
        }

        /**
         * Execute disable request
         * @return UsergroupsDisableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsergroupsDisableResponse execute() throws ApiException {
            UsergroupsDisableRequest usergroupsDisableRequest = buildBodyParams();
            ApiResponse<UsergroupsDisableResponse> localVarResp = disableWithHttpInfo(token, usergroup, includeCount, usergroupsDisableRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute disable request with HTTP info returned
         * @return ApiResponse&lt;UsergroupsDisableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsergroupsDisableResponse> executeWithHttpInfo() throws ApiException {
            UsergroupsDisableRequest usergroupsDisableRequest = buildBodyParams();
            return disableWithHttpInfo(token, usergroup, includeCount, usergroupsDisableRequest);
        }

        /**
         * Execute disable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsergroupsDisableResponse> _callback) throws ApiException {
            UsergroupsDisableRequest usergroupsDisableRequest = buildBodyParams();
            return disableAsync(token, usergroup, includeCount, usergroupsDisableRequest, _callback);
        }
    }

    /**
     * 
     * Disable an existing User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to disable. (required)
     * @return DisableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.disable"> Documentation</a>
     */
    public DisableRequestBuilder disable(String token, String usergroup) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (usergroup == null) throw new IllegalArgumentException("\"usergroup\" is required but got null");
            

        return new DisableRequestBuilder(token, usergroup);
    }
    private okhttp3.Call enableCall(String token, String usergroup, Boolean includeCount, UsergroupsEnableRequest usergroupsEnableRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupsEnableRequest;

        // create path and map variables
        String localVarPath = "/usergroups.enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (usergroup != null) {
            localVarFormParams.put("usergroup", usergroup);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableValidateBeforeCall(String token, String usergroup, Boolean includeCount, UsergroupsEnableRequest usergroupsEnableRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling enable(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling enable(Async)");
        }

        return enableCall(token, usergroup, includeCount, usergroupsEnableRequest, _callback);

    }


    private ApiResponse<UsergroupsEnableResponse> enableWithHttpInfo(String token, String usergroup, Boolean includeCount, UsergroupsEnableRequest usergroupsEnableRequest) throws ApiException {
        okhttp3.Call localVarCall = enableValidateBeforeCall(token, usergroup, includeCount, usergroupsEnableRequest, null);
        Type localVarReturnType = new TypeToken<UsergroupsEnableResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call enableAsync(String token, String usergroup, Boolean includeCount, UsergroupsEnableRequest usergroupsEnableRequest, final ApiCallback<UsergroupsEnableResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableValidateBeforeCall(token, usergroup, includeCount, usergroupsEnableRequest, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsEnableResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EnableRequestBuilder {
        private final String token;
        private final String usergroup;
        private Boolean includeCount;

        private EnableRequestBuilder(String token, String usergroup) {
            this.token = token;
            this.usergroup = usergroup;
        }

        /**
         * Set includeCount
         * @param includeCount Include the number of users in the User Group. (optional)
         * @return EnableRequestBuilder
         */
        public EnableRequestBuilder includeCount(Boolean includeCount) {
            this.includeCount = includeCount;
            return this;
        }
        
        /**
         * Build call for enable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsergroupsEnableRequest usergroupsEnableRequest = buildBodyParams();
            return enableCall(token, usergroup, includeCount, usergroupsEnableRequest, _callback);
        }

        private UsergroupsEnableRequest buildBodyParams() {
            UsergroupsEnableRequest usergroupsEnableRequest = new UsergroupsEnableRequest();
            usergroupsEnableRequest.includeCount(this.includeCount);
            usergroupsEnableRequest.usergroup(this.usergroup);
            return usergroupsEnableRequest;
        }

        /**
         * Execute enable request
         * @return UsergroupsEnableResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsergroupsEnableResponse execute() throws ApiException {
            UsergroupsEnableRequest usergroupsEnableRequest = buildBodyParams();
            ApiResponse<UsergroupsEnableResponse> localVarResp = enableWithHttpInfo(token, usergroup, includeCount, usergroupsEnableRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute enable request with HTTP info returned
         * @return ApiResponse&lt;UsergroupsEnableResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsergroupsEnableResponse> executeWithHttpInfo() throws ApiException {
            UsergroupsEnableRequest usergroupsEnableRequest = buildBodyParams();
            return enableWithHttpInfo(token, usergroup, includeCount, usergroupsEnableRequest);
        }

        /**
         * Execute enable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsergroupsEnableResponse> _callback) throws ApiException {
            UsergroupsEnableRequest usergroupsEnableRequest = buildBodyParams();
            return enableAsync(token, usergroup, includeCount, usergroupsEnableRequest, _callback);
        }
    }

    /**
     * 
     * Enable a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to enable. (required)
     * @return EnableRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.enable"> Documentation</a>
     */
    public EnableRequestBuilder enable(String token, String usergroup) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (usergroup == null) throw new IllegalArgumentException("\"usergroup\" is required but got null");
            

        return new EnableRequestBuilder(token, usergroup);
    }
    private okhttp3.Call listCall(String token, Boolean includeUsers, Boolean includeCount, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeUsers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_users", includeUsers));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includeCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_count", includeCount));
        }

        if (includeDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_disabled", includeDisabled));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String token, Boolean includeUsers, Boolean includeCount, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling list(Async)");
        }

        return listCall(token, includeUsers, includeCount, includeDisabled, _callback);

    }


    private ApiResponse<UsergroupsListResponse> listWithHttpInfo(String token, Boolean includeUsers, Boolean includeCount, Boolean includeDisabled) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(token, includeUsers, includeCount, includeDisabled, null);
        Type localVarReturnType = new TypeToken<UsergroupsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String token, Boolean includeUsers, Boolean includeCount, Boolean includeDisabled, final ApiCallback<UsergroupsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(token, includeUsers, includeCount, includeDisabled, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String token;
        private Boolean includeUsers;
        private Boolean includeCount;
        private Boolean includeDisabled;

        private ListRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set includeUsers
         * @param includeUsers Include the list of users for each User Group. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder includeUsers(Boolean includeUsers) {
            this.includeUsers = includeUsers;
            return this;
        }
        
        /**
         * Set includeCount
         * @param includeCount Include the number of users in each User Group. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder includeCount(Boolean includeCount) {
            this.includeCount = includeCount;
            return this;
        }
        
        /**
         * Set includeDisabled
         * @param includeDisabled Include disabled User Groups. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder includeDisabled(Boolean includeDisabled) {
            this.includeDisabled = includeDisabled;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(token, includeUsers, includeCount, includeDisabled, _callback);
        }


        /**
         * Execute list request
         * @return UsergroupsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsergroupsListResponse execute() throws ApiException {
            ApiResponse<UsergroupsListResponse> localVarResp = listWithHttpInfo(token, includeUsers, includeCount, includeDisabled);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;UsergroupsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsergroupsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(token, includeUsers, includeCount, includeDisabled);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsergroupsListResponse> _callback) throws ApiException {
            return listAsync(token, includeUsers, includeCount, includeDisabled, _callback);
        }
    }

    /**
     * 
     * List all User Groups for a team
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.list"> Documentation</a>
     */
    public ListRequestBuilder list(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListRequestBuilder(token);
    }
    private okhttp3.Call listAllUsersCall(String token, String usergroup, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usergroups.users.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includeDisabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_disabled", includeDisabled));
        }

        if (usergroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("usergroup", usergroup));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllUsersValidateBeforeCall(String token, String usergroup, Boolean includeDisabled, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listAllUsers(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling listAllUsers(Async)");
        }

        return listAllUsersCall(token, usergroup, includeDisabled, _callback);

    }


    private ApiResponse<UsergroupsusersListAllUsersResponse> listAllUsersWithHttpInfo(String token, String usergroup, Boolean includeDisabled) throws ApiException {
        okhttp3.Call localVarCall = listAllUsersValidateBeforeCall(token, usergroup, includeDisabled, null);
        Type localVarReturnType = new TypeToken<UsergroupsusersListAllUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllUsersAsync(String token, String usergroup, Boolean includeDisabled, final ApiCallback<UsergroupsusersListAllUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllUsersValidateBeforeCall(token, usergroup, includeDisabled, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsusersListAllUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllUsersRequestBuilder {
        private final String token;
        private final String usergroup;
        private Boolean includeDisabled;

        private ListAllUsersRequestBuilder(String token, String usergroup) {
            this.token = token;
            this.usergroup = usergroup;
        }

        /**
         * Set includeDisabled
         * @param includeDisabled Allow results that involve disabled User Groups. (optional)
         * @return ListAllUsersRequestBuilder
         */
        public ListAllUsersRequestBuilder includeDisabled(Boolean includeDisabled) {
            this.includeDisabled = includeDisabled;
            return this;
        }
        
        /**
         * Build call for listAllUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllUsersCall(token, usergroup, includeDisabled, _callback);
        }


        /**
         * Execute listAllUsers request
         * @return UsergroupsusersListAllUsersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public UsergroupsusersListAllUsersResponse execute() throws ApiException {
            ApiResponse<UsergroupsusersListAllUsersResponse> localVarResp = listAllUsersWithHttpInfo(token, usergroup, includeDisabled);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllUsers request with HTTP info returned
         * @return ApiResponse&lt;UsergroupsusersListAllUsersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsergroupsusersListAllUsersResponse> executeWithHttpInfo() throws ApiException {
            return listAllUsersWithHttpInfo(token, usergroup, includeDisabled);
        }

        /**
         * Execute listAllUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsergroupsusersListAllUsersResponse> _callback) throws ApiException {
            return listAllUsersAsync(token, usergroup, includeDisabled, _callback);
        }
    }

    /**
     * 
     * List all users in a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @return ListAllUsersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.list"> Documentation</a>
     */
    public ListAllUsersRequestBuilder listAllUsers(String token, String usergroup) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (usergroup == null) throw new IllegalArgumentException("\"usergroup\" is required but got null");
            

        return new ListAllUsersRequestBuilder(token, usergroup);
    }
    private okhttp3.Call updateCall(String token, String usergroup, String description, String channels, String handle, Boolean includeCount, String name, UsergroupsUpdateRequest usergroupsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupsUpdateRequest;

        // create path and map variables
        String localVarPath = "/usergroups.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (channels != null) {
            localVarFormParams.put("channels", channels);
        }

        if (handle != null) {
            localVarFormParams.put("handle", handle);
        }

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (usergroup != null) {
            localVarFormParams.put("usergroup", usergroup);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateValidateBeforeCall(String token, String usergroup, String description, String channels, String handle, Boolean includeCount, String name, UsergroupsUpdateRequest usergroupsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling update(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling update(Async)");
        }

        return updateCall(token, usergroup, description, channels, handle, includeCount, name, usergroupsUpdateRequest, _callback);

    }


    private ApiResponse<UsergroupsUpdateResponse> updateWithHttpInfo(String token, String usergroup, String description, String channels, String handle, Boolean includeCount, String name, UsergroupsUpdateRequest usergroupsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = updateValidateBeforeCall(token, usergroup, description, channels, handle, includeCount, name, usergroupsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<UsergroupsUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAsync(String token, String usergroup, String description, String channels, String handle, Boolean includeCount, String name, UsergroupsUpdateRequest usergroupsUpdateRequest, final ApiCallback<UsergroupsUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateValidateBeforeCall(token, usergroup, description, channels, handle, includeCount, name, usergroupsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRequestBuilder {
        private final String token;
        private final String usergroup;
        private String description;
        private String channels;
        private String handle;
        private Boolean includeCount;
        private String name;

        private UpdateRequestBuilder(String token, String usergroup) {
            this.token = token;
            this.usergroup = usergroup;
        }

        /**
         * Set description
         * @param description A short description of the User Group. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set channels
         * @param channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder channels(String channels) {
            this.channels = channels;
            return this;
        }
        
        /**
         * Set handle
         * @param handle A mention handle. Must be unique among channels, users and User Groups. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder handle(String handle) {
            this.handle = handle;
            return this;
        }
        
        /**
         * Set includeCount
         * @param includeCount Include the number of users in the User Group. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder includeCount(Boolean includeCount) {
            this.includeCount = includeCount;
            return this;
        }
        
        /**
         * Set name
         * @param name A name for the User Group. Must be unique among User Groups. (optional)
         * @return UpdateRequestBuilder
         */
        public UpdateRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for update
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsergroupsUpdateRequest usergroupsUpdateRequest = buildBodyParams();
            return updateCall(token, usergroup, description, channels, handle, includeCount, name, usergroupsUpdateRequest, _callback);
        }

        private UsergroupsUpdateRequest buildBodyParams() {
            UsergroupsUpdateRequest usergroupsUpdateRequest = new UsergroupsUpdateRequest();
            usergroupsUpdateRequest.description(this.description);
            usergroupsUpdateRequest.channels(this.channels);
            usergroupsUpdateRequest.handle(this.handle);
            usergroupsUpdateRequest.includeCount(this.includeCount);
            usergroupsUpdateRequest.name(this.name);
            usergroupsUpdateRequest.usergroup(this.usergroup);
            return usergroupsUpdateRequest;
        }

        /**
         * Execute update request
         * @return UsergroupsUpdateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsergroupsUpdateResponse execute() throws ApiException {
            UsergroupsUpdateRequest usergroupsUpdateRequest = buildBodyParams();
            ApiResponse<UsergroupsUpdateResponse> localVarResp = updateWithHttpInfo(token, usergroup, description, channels, handle, includeCount, name, usergroupsUpdateRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute update request with HTTP info returned
         * @return ApiResponse&lt;UsergroupsUpdateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsergroupsUpdateResponse> executeWithHttpInfo() throws ApiException {
            UsergroupsUpdateRequest usergroupsUpdateRequest = buildBodyParams();
            return updateWithHttpInfo(token, usergroup, description, channels, handle, includeCount, name, usergroupsUpdateRequest);
        }

        /**
         * Execute update request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsergroupsUpdateResponse> _callback) throws ApiException {
            UsergroupsUpdateRequest usergroupsUpdateRequest = buildBodyParams();
            return updateAsync(token, usergroup, description, channels, handle, includeCount, name, usergroupsUpdateRequest, _callback);
        }
    }

    /**
     * 
     * Update an existing User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @return UpdateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.update"> Documentation</a>
     */
    public UpdateRequestBuilder update(String token, String usergroup) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (usergroup == null) throw new IllegalArgumentException("\"usergroup\" is required but got null");
            

        return new UpdateRequestBuilder(token, usergroup);
    }
    private okhttp3.Call updateListCall(String token, String usergroup, String users, Boolean includeCount, UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usergroupsusersUpdateListRequest;

        // create path and map variables
        String localVarPath = "/usergroups.users.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeCount != null) {
            localVarFormParams.put("include_count", includeCount);
        }

        if (usergroup != null) {
            localVarFormParams.put("usergroup", usergroup);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateListValidateBeforeCall(String token, String usergroup, String users, Boolean includeCount, UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateList(Async)");
        }

        // verify the required parameter 'usergroup' is set
        if (usergroup == null) {
            throw new ApiException("Missing the required parameter 'usergroup' when calling updateList(Async)");
        }

        // verify the required parameter 'users' is set
        if (users == null) {
            throw new ApiException("Missing the required parameter 'users' when calling updateList(Async)");
        }

        return updateListCall(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest, _callback);

    }


    private ApiResponse<UsergroupsusersUpdateListResponse> updateListWithHttpInfo(String token, String usergroup, String users, Boolean includeCount, UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest) throws ApiException {
        okhttp3.Call localVarCall = updateListValidateBeforeCall(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest, null);
        Type localVarReturnType = new TypeToken<UsergroupsusersUpdateListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateListAsync(String token, String usergroup, String users, Boolean includeCount, UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest, final ApiCallback<UsergroupsusersUpdateListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateListValidateBeforeCall(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest, _callback);
        Type localVarReturnType = new TypeToken<UsergroupsusersUpdateListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateListRequestBuilder {
        private final String token;
        private final String usergroup;
        private final String users;
        private Boolean includeCount;

        private UpdateListRequestBuilder(String token, String usergroup, String users) {
            this.token = token;
            this.usergroup = usergroup;
            this.users = users;
        }

        /**
         * Set includeCount
         * @param includeCount Include the number of users in the User Group. (optional)
         * @return UpdateListRequestBuilder
         */
        public UpdateListRequestBuilder includeCount(Boolean includeCount) {
            this.includeCount = includeCount;
            return this;
        }
        
        /**
         * Build call for updateList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest = buildBodyParams();
            return updateListCall(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest, _callback);
        }

        private UsergroupsusersUpdateListRequest buildBodyParams() {
            UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest = new UsergroupsusersUpdateListRequest();
            usergroupsusersUpdateListRequest.includeCount(this.includeCount);
            usergroupsusersUpdateListRequest.usergroup(this.usergroup);
            usergroupsusersUpdateListRequest.users(this.users);
            return usergroupsusersUpdateListRequest;
        }

        /**
         * Execute updateList request
         * @return UsergroupsusersUpdateListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsergroupsusersUpdateListResponse execute() throws ApiException {
            UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest = buildBodyParams();
            ApiResponse<UsergroupsusersUpdateListResponse> localVarResp = updateListWithHttpInfo(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateList request with HTTP info returned
         * @return ApiResponse&lt;UsergroupsusersUpdateListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsergroupsusersUpdateListResponse> executeWithHttpInfo() throws ApiException {
            UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest = buildBodyParams();
            return updateListWithHttpInfo(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest);
        }

        /**
         * Execute updateList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsergroupsusersUpdateListResponse> _callback) throws ApiException {
            UsergroupsusersUpdateListRequest usergroupsusersUpdateListRequest = buildBodyParams();
            return updateListAsync(token, usergroup, users, includeCount, usergroupsusersUpdateListRequest, _callback);
        }
    }

    /**
     * 
     * Update the list of users for a User Group
     * @param token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param usergroup The encoded ID of the User Group to update. (required)
     * @param users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @return UpdateListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/usergroups.users.update"> Documentation</a>
     */
    public UpdateListRequestBuilder updateList(String token, String usergroup, String users) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (usergroup == null) throw new IllegalArgumentException("\"usergroup\" is required but got null");
            

        if (users == null) throw new IllegalArgumentException("\"users\" is required but got null");
            

        return new UpdateListRequestBuilder(token, usergroup, users);
    }
}
