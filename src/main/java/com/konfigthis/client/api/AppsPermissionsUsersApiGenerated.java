/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AppspermissionsusersListUserGrantsResponse;
import com.konfigthis.client.model.AppspermissionsusersListUserGrantsdefaultResponse;
import com.konfigthis.client.model.AppspermissionsusersRequestModalResponse;
import com.konfigthis.client.model.AppspermissionsusersRequestModaldefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AppsPermissionsUsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AppsPermissionsUsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AppsPermissionsUsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listUserGrantsCall(String token, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps.permissions.users.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUserGrantsValidateBeforeCall(String token, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listUserGrants(Async)");
        }

        return listUserGrantsCall(token, cursor, limit, _callback);

    }


    private ApiResponse<AppspermissionsusersListUserGrantsResponse> listUserGrantsWithHttpInfo(String token, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listUserGrantsValidateBeforeCall(token, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AppspermissionsusersListUserGrantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listUserGrantsAsync(String token, String cursor, Integer limit, final ApiCallback<AppspermissionsusersListUserGrantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUserGrantsValidateBeforeCall(token, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AppspermissionsusersListUserGrantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListUserGrantsRequestBuilder {
        private final String token;
        private String cursor;
        private Integer limit;

        private ListUserGrantsRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set cursor
         * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](https://slack.dev) for more detail. (optional)
         * @return ListUserGrantsRequestBuilder
         */
        public ListUserGrantsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. (optional)
         * @return ListUserGrantsRequestBuilder
         */
        public ListUserGrantsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listUserGrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical successful paginated response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listUserGrantsCall(token, cursor, limit, _callback);
        }


        /**
         * Execute listUserGrants request
         * @return AppspermissionsusersListUserGrantsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical successful paginated response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AppspermissionsusersListUserGrantsResponse execute() throws ApiException {
            ApiResponse<AppspermissionsusersListUserGrantsResponse> localVarResp = listUserGrantsWithHttpInfo(token, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listUserGrants request with HTTP info returned
         * @return ApiResponse&lt;AppspermissionsusersListUserGrantsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical successful paginated response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppspermissionsusersListUserGrantsResponse> executeWithHttpInfo() throws ApiException {
            return listUserGrantsWithHttpInfo(token, cursor, limit);
        }

        /**
         * Execute listUserGrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical successful paginated response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppspermissionsusersListUserGrantsResponse> _callback) throws ApiException {
            return listUserGrantsAsync(token, cursor, limit, _callback);
        }
    }

    /**
     * 
     * Returns list of user grants and corresponding scopes this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @return ListUserGrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical successful paginated response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/apps.permissions.users.list"> Documentation</a>
     */
    public ListUserGrantsRequestBuilder listUserGrants(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListUserGrantsRequestBuilder(token);
    }
    private okhttp3.Call requestModalCall(String token, String scopes, String triggerId, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apps.permissions.users.request";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (scopes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scopes", scopes));
        }

        if (triggerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trigger_id", triggerId));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestModalValidateBeforeCall(String token, String scopes, String triggerId, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling requestModal(Async)");
        }

        // verify the required parameter 'scopes' is set
        if (scopes == null) {
            throw new ApiException("Missing the required parameter 'scopes' when calling requestModal(Async)");
        }

        // verify the required parameter 'triggerId' is set
        if (triggerId == null) {
            throw new ApiException("Missing the required parameter 'triggerId' when calling requestModal(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling requestModal(Async)");
        }

        return requestModalCall(token, scopes, triggerId, user, _callback);

    }


    private ApiResponse<AppspermissionsusersRequestModalResponse> requestModalWithHttpInfo(String token, String scopes, String triggerId, String user) throws ApiException {
        okhttp3.Call localVarCall = requestModalValidateBeforeCall(token, scopes, triggerId, user, null);
        Type localVarReturnType = new TypeToken<AppspermissionsusersRequestModalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call requestModalAsync(String token, String scopes, String triggerId, String user, final ApiCallback<AppspermissionsusersRequestModalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestModalValidateBeforeCall(token, scopes, triggerId, user, _callback);
        Type localVarReturnType = new TypeToken<AppspermissionsusersRequestModalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RequestModalRequestBuilder {
        private final String token;
        private final String scopes;
        private final String triggerId;
        private final String user;

        private RequestModalRequestBuilder(String token, String scopes, String triggerId, String user) {
            this.token = token;
            this.scopes = scopes;
            this.triggerId = triggerId;
            this.user = user;
        }

        /**
         * Build call for requestModal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when trigger_id is invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return requestModalCall(token, scopes, triggerId, user, _callback);
        }


        /**
         * Execute requestModal request
         * @return AppspermissionsusersRequestModalResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when trigger_id is invalid </td><td>  -  </td></tr>
         </table>
         */
        public AppspermissionsusersRequestModalResponse execute() throws ApiException {
            ApiResponse<AppspermissionsusersRequestModalResponse> localVarResp = requestModalWithHttpInfo(token, scopes, triggerId, user);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute requestModal request with HTTP info returned
         * @return ApiResponse&lt;AppspermissionsusersRequestModalResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when trigger_id is invalid </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AppspermissionsusersRequestModalResponse> executeWithHttpInfo() throws ApiException {
            return requestModalWithHttpInfo(token, scopes, triggerId, user);
        }

        /**
         * Execute requestModal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when trigger_id is invalid </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AppspermissionsusersRequestModalResponse> _callback) throws ApiException {
            return requestModalAsync(token, scopes, triggerId, user, _callback);
        }
    }

    /**
     * 
     * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param scopes A comma separated list of user scopes to request for (required)
     * @param triggerId Token used to trigger the request (required)
     * @param user The user this scope is being requested for (required)
     * @return RequestModalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response when used with a user token </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when trigger_id is invalid </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/apps.permissions.users.request"> Documentation</a>
     */
    public RequestModalRequestBuilder requestModal(String token, String scopes, String triggerId, String user) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (scopes == null) throw new IllegalArgumentException("\"scopes\" is required but got null");
            

        if (triggerId == null) throw new IllegalArgumentException("\"triggerId\" is required but got null");
            

        if (user == null) throw new IllegalArgumentException("\"user\" is required but got null");
            

        return new RequestModalRequestBuilder(token, scopes, triggerId, user);
    }
}
