/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.UsersConversationsResponse;
import com.konfigthis.client.model.UsersConversationsdefaultResponse;
import com.konfigthis.client.model.UsersDeletePhotoRequest;
import com.konfigthis.client.model.UsersDeletePhotoResponse;
import com.konfigthis.client.model.UsersDeletePhotodefaultResponse;
import com.konfigthis.client.model.UsersGetPresenceResponse;
import com.konfigthis.client.model.UsersGetPresencedefaultResponse;
import com.konfigthis.client.model.UsersIdentityResponseInner;
import com.konfigthis.client.model.UsersIdentitydefaultResponse;
import com.konfigthis.client.model.UsersInfoResponse;
import com.konfigthis.client.model.UsersInfodefaultResponse;
import com.konfigthis.client.model.UsersListResponse;
import com.konfigthis.client.model.UsersListdefaultResponse;
import com.konfigthis.client.model.UsersLookupByEmailResponse;
import com.konfigthis.client.model.UsersLookupByEmaildefaultResponse;
import com.konfigthis.client.model.UsersSetActiveResponse;
import com.konfigthis.client.model.UsersSetActivedefaultResponse;
import com.konfigthis.client.model.UsersSetPhotoRequest;
import com.konfigthis.client.model.UsersSetPhotoResponse;
import com.konfigthis.client.model.UsersSetPhotodefaultResponse;
import com.konfigthis.client.model.UsersSetPresenceRequest;
import com.konfigthis.client.model.UsersSetPresenceResponse;
import com.konfigthis.client.model.UsersSetPresencedefaultResponse;
import com.konfigthis.client.model.UsersprofileGetProfileInfoResponse;
import com.konfigthis.client.model.UsersprofileGetProfileInfodefaultResponse;
import com.konfigthis.client.model.UsersprofileSetProfileInfoRequest;
import com.konfigthis.client.model.UsersprofileSetProfileInfoResponse;
import com.konfigthis.client.model.UsersprofileSetProfileInfodefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call conversationsCall(String token, String user, String types, Boolean excludeArchived, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (excludeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude_archived", excludeArchived));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call conversationsValidateBeforeCall(String token, String user, String types, Boolean excludeArchived, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return conversationsCall(token, user, types, excludeArchived, limit, cursor, _callback);

    }


    private ApiResponse<UsersConversationsResponse> conversationsWithHttpInfo(String token, String user, String types, Boolean excludeArchived, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = conversationsValidateBeforeCall(token, user, types, excludeArchived, limit, cursor, null);
        Type localVarReturnType = new TypeToken<UsersConversationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call conversationsAsync(String token, String user, String types, Boolean excludeArchived, Integer limit, String cursor, final ApiCallback<UsersConversationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = conversationsValidateBeforeCall(token, user, types, excludeArchived, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<UsersConversationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ConversationsRequestBuilder {
        private String token;
        private String user;
        private String types;
        private Boolean excludeArchived;
        private Integer limit;
        private String cursor;

        private ConversationsRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;conversations:read&#x60; (optional)
         * @return ConversationsRequestBuilder
         */
        public ConversationsRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set user
         * @param user Browse conversations by a specific user ID&#39;s membership. Non-public channels are restricted to those where the calling user shares membership. (optional)
         * @return ConversationsRequestBuilder
         */
        public ConversationsRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set types
         * @param types Mix and match channel types by providing a comma-separated list of any combination of &#x60;public_channel&#x60;, &#x60;private_channel&#x60;, &#x60;mpim&#x60;, &#x60;im&#x60; (optional)
         * @return ConversationsRequestBuilder
         */
        public ConversationsRequestBuilder types(String types) {
            this.types = types;
            return this;
        }
        
        /**
         * Set excludeArchived
         * @param excludeArchived Set to &#x60;true&#x60; to exclude archived channels from the list (optional)
         * @return ConversationsRequestBuilder
         */
        public ConversationsRequestBuilder excludeArchived(Boolean excludeArchived) {
            this.excludeArchived = excludeArchived;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. Must be an integer no larger than 1000. (optional)
         * @return ConversationsRequestBuilder
         */
        public ConversationsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](https://slack.dev) for more detail. (optional)
         * @return ConversationsRequestBuilder
         */
        public ConversationsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for conversations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response with only public channels. Note how &#x60;num_members&#x60; and &#x60;is_member&#x60; are not returned like typical &#x60;conversations&#x60; objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return conversationsCall(token, user, types, excludeArchived, limit, cursor, _callback);
        }


        /**
         * Execute conversations request
         * @return UsersConversationsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response with only public channels. Note how &#x60;num_members&#x60; and &#x60;is_member&#x60; are not returned like typical &#x60;conversations&#x60; objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersConversationsResponse execute() throws ApiException {
            ApiResponse<UsersConversationsResponse> localVarResp = conversationsWithHttpInfo(token, user, types, excludeArchived, limit, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute conversations request with HTTP info returned
         * @return ApiResponse&lt;UsersConversationsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response with only public channels. Note how &#x60;num_members&#x60; and &#x60;is_member&#x60; are not returned like typical &#x60;conversations&#x60; objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersConversationsResponse> executeWithHttpInfo() throws ApiException {
            return conversationsWithHttpInfo(token, user, types, excludeArchived, limit, cursor);
        }

        /**
         * Execute conversations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response with only public channels. Note how &#x60;num_members&#x60; and &#x60;is_member&#x60; are not returned like typical &#x60;conversations&#x60; objects. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersConversationsResponse> _callback) throws ApiException {
            return conversationsAsync(token, user, types, excludeArchived, limit, cursor, _callback);
        }
    }

    /**
     * 
     * List conversations the calling user may access.
     * @return ConversationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response with only public channels. Note how &#x60;num_members&#x60; and &#x60;is_member&#x60; are not returned like typical &#x60;conversations&#x60; objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.conversations"> Documentation</a>
     */
    public ConversationsRequestBuilder conversations() throws IllegalArgumentException {
        return new ConversationsRequestBuilder();
    }
    private okhttp3.Call deletePhotoCall(String token, UsersDeletePhotoRequest usersDeletePhotoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersDeletePhotoRequest;

        // create path and map variables
        String localVarPath = "/users.deletePhoto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePhotoValidateBeforeCall(String token, UsersDeletePhotoRequest usersDeletePhotoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deletePhoto(Async)");
        }

        // verify the required parameter 'usersDeletePhotoRequest' is set
        if (usersDeletePhotoRequest == null) {
            throw new ApiException("Missing the required parameter 'usersDeletePhotoRequest' when calling deletePhoto(Async)");
        }

        return deletePhotoCall(token, usersDeletePhotoRequest, _callback);

    }


    private ApiResponse<UsersDeletePhotoResponse> deletePhotoWithHttpInfo(String token, UsersDeletePhotoRequest usersDeletePhotoRequest) throws ApiException {
        okhttp3.Call localVarCall = deletePhotoValidateBeforeCall(token, usersDeletePhotoRequest, null);
        Type localVarReturnType = new TypeToken<UsersDeletePhotoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deletePhotoAsync(String token, UsersDeletePhotoRequest usersDeletePhotoRequest, final ApiCallback<UsersDeletePhotoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePhotoValidateBeforeCall(token, usersDeletePhotoRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersDeletePhotoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeletePhotoRequestBuilder {
        private final String token;

        private DeletePhotoRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Build call for deletePhoto
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersDeletePhotoRequest usersDeletePhotoRequest = buildBodyParams();
            return deletePhotoCall(token, usersDeletePhotoRequest, _callback);
        }

        private UsersDeletePhotoRequest buildBodyParams() {
            UsersDeletePhotoRequest usersDeletePhotoRequest = new UsersDeletePhotoRequest();
            usersDeletePhotoRequest.token(this.token);
            return usersDeletePhotoRequest;
        }

        /**
         * Execute deletePhoto request
         * @return UsersDeletePhotoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersDeletePhotoResponse execute() throws ApiException {
            UsersDeletePhotoRequest usersDeletePhotoRequest = buildBodyParams();
            ApiResponse<UsersDeletePhotoResponse> localVarResp = deletePhotoWithHttpInfo(token, usersDeletePhotoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deletePhoto request with HTTP info returned
         * @return ApiResponse&lt;UsersDeletePhotoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersDeletePhotoResponse> executeWithHttpInfo() throws ApiException {
            UsersDeletePhotoRequest usersDeletePhotoRequest = buildBodyParams();
            return deletePhotoWithHttpInfo(token, usersDeletePhotoRequest);
        }

        /**
         * Execute deletePhoto request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersDeletePhotoResponse> _callback) throws ApiException {
            UsersDeletePhotoRequest usersDeletePhotoRequest = buildBodyParams();
            return deletePhotoAsync(token, usersDeletePhotoRequest, _callback);
        }
    }

    /**
     * 
     * Delete the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param usersDeletePhotoRequest  (required)
     * @return DeletePhotoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.deletePhoto"> Documentation</a>
     */
    public DeletePhotoRequestBuilder deletePhoto(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new DeletePhotoRequestBuilder(token);
    }
    private okhttp3.Call getPresenceCall(String token, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.getPresence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPresenceValidateBeforeCall(String token, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getPresence(Async)");
        }

        return getPresenceCall(token, user, _callback);

    }


    private ApiResponse<UsersGetPresenceResponse> getPresenceWithHttpInfo(String token, String user) throws ApiException {
        okhttp3.Call localVarCall = getPresenceValidateBeforeCall(token, user, null);
        Type localVarReturnType = new TypeToken<UsersGetPresenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPresenceAsync(String token, String user, final ApiCallback<UsersGetPresenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPresenceValidateBeforeCall(token, user, _callback);
        Type localVarReturnType = new TypeToken<UsersGetPresenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPresenceRequestBuilder {
        private final String token;
        private String user;

        private GetPresenceRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set user
         * @param user User to get presence info on. Defaults to the authed user. (optional)
         * @return GetPresenceRequestBuilder
         */
        public GetPresenceRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for getPresence
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When requesting information for a different user, this method just returns the current presence (either &#x60;active&#x60; or &#x60;away&#x60;). </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPresenceCall(token, user, _callback);
        }


        /**
         * Execute getPresence request
         * @return UsersGetPresenceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When requesting information for a different user, this method just returns the current presence (either &#x60;active&#x60; or &#x60;away&#x60;). </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersGetPresenceResponse execute() throws ApiException {
            ApiResponse<UsersGetPresenceResponse> localVarResp = getPresenceWithHttpInfo(token, user);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPresence request with HTTP info returned
         * @return ApiResponse&lt;UsersGetPresenceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When requesting information for a different user, this method just returns the current presence (either &#x60;active&#x60; or &#x60;away&#x60;). </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersGetPresenceResponse> executeWithHttpInfo() throws ApiException {
            return getPresenceWithHttpInfo(token, user);
        }

        /**
         * Execute getPresence request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> When requesting information for a different user, this method just returns the current presence (either &#x60;active&#x60; or &#x60;away&#x60;). </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersGetPresenceResponse> _callback) throws ApiException {
            return getPresenceAsync(token, user, _callback);
        }
    }

    /**
     * 
     * Gets user presence information.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (required)
     * @return GetPresenceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> When requesting information for a different user, this method just returns the current presence (either &#x60;active&#x60; or &#x60;away&#x60;). </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.getPresence"> Documentation</a>
     */
    public GetPresenceRequestBuilder getPresence(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new GetPresenceRequestBuilder(token);
    }
    private okhttp3.Call getProfileInfoCall(String token, Boolean includeLabels, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.profile.get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_labels", includeLabels));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileInfoValidateBeforeCall(String token, Boolean includeLabels, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getProfileInfo(Async)");
        }

        return getProfileInfoCall(token, includeLabels, user, _callback);

    }


    private ApiResponse<UsersprofileGetProfileInfoResponse> getProfileInfoWithHttpInfo(String token, Boolean includeLabels, String user) throws ApiException {
        okhttp3.Call localVarCall = getProfileInfoValidateBeforeCall(token, includeLabels, user, null);
        Type localVarReturnType = new TypeToken<UsersprofileGetProfileInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProfileInfoAsync(String token, Boolean includeLabels, String user, final ApiCallback<UsersprofileGetProfileInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileInfoValidateBeforeCall(token, includeLabels, user, _callback);
        Type localVarReturnType = new TypeToken<UsersprofileGetProfileInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProfileInfoRequestBuilder {
        private final String token;
        private Boolean includeLabels;
        private String user;

        private GetProfileInfoRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set includeLabels
         * @param includeLabels Include labels for each ID in custom profile fields (optional)
         * @return GetProfileInfoRequestBuilder
         */
        public GetProfileInfoRequestBuilder includeLabels(Boolean includeLabels) {
            this.includeLabels = includeLabels;
            return this;
        }
        
        /**
         * Set user
         * @param user User to retrieve profile info for (optional)
         * @return GetProfileInfoRequestBuilder
         */
        public GetProfileInfoRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for getProfileInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProfileInfoCall(token, includeLabels, user, _callback);
        }


        /**
         * Execute getProfileInfo request
         * @return UsersprofileGetProfileInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersprofileGetProfileInfoResponse execute() throws ApiException {
            ApiResponse<UsersprofileGetProfileInfoResponse> localVarResp = getProfileInfoWithHttpInfo(token, includeLabels, user);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProfileInfo request with HTTP info returned
         * @return ApiResponse&lt;UsersprofileGetProfileInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersprofileGetProfileInfoResponse> executeWithHttpInfo() throws ApiException {
            return getProfileInfoWithHttpInfo(token, includeLabels, user);
        }

        /**
         * Execute getProfileInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersprofileGetProfileInfoResponse> _callback) throws ApiException {
            return getProfileInfoAsync(token, includeLabels, user, _callback);
        }
    }

    /**
     * 
     * Retrieves a user&#39;s profile information.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @return GetProfileInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.get"> Documentation</a>
     */
    public GetProfileInfoRequestBuilder getProfileInfo(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new GetProfileInfoRequestBuilder(token);
    }
    private okhttp3.Call identityCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.identity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identityValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        return identityCall(token, _callback);

    }


    private ApiResponse<List<UsersIdentityResponseInner>> identityWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = identityValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<List<UsersIdentityResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call identityAsync(String token, final ApiCallback<List<UsersIdentityResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = identityValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<List<UsersIdentityResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class IdentityRequestBuilder {
        private String token;

        private IdentityRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;identity.basic&#x60; (optional)
         * @return IdentityRequestBuilder
         */
        public IdentityRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Build call for identity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> You will receive at a minimum the following information: </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return identityCall(token, _callback);
        }


        /**
         * Execute identity request
         * @return List&lt;UsersIdentityResponseInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> You will receive at a minimum the following information: </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public List<UsersIdentityResponseInner> execute() throws ApiException {
            ApiResponse<List<UsersIdentityResponseInner>> localVarResp = identityWithHttpInfo(token);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute identity request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UsersIdentityResponseInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> You will receive at a minimum the following information: </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UsersIdentityResponseInner>> executeWithHttpInfo() throws ApiException {
            return identityWithHttpInfo(token);
        }

        /**
         * Execute identity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> You will receive at a minimum the following information: </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UsersIdentityResponseInner>> _callback) throws ApiException {
            return identityAsync(token, _callback);
        }
    }

    /**
     * 
     * Get a user&#39;s identity.
     * @return IdentityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> You will receive at a minimum the following information: </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.identity"> Documentation</a>
     */
    public IdentityRequestBuilder identity() throws IllegalArgumentException {
        return new IdentityRequestBuilder();
    }
    private okhttp3.Call infoCall(String token, Boolean includeLocale, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includeLocale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_locale", includeLocale));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoValidateBeforeCall(String token, Boolean includeLocale, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling info(Async)");
        }

        return infoCall(token, includeLocale, user, _callback);

    }


    private ApiResponse<UsersInfoResponse> infoWithHttpInfo(String token, Boolean includeLocale, String user) throws ApiException {
        okhttp3.Call localVarCall = infoValidateBeforeCall(token, includeLocale, user, null);
        Type localVarReturnType = new TypeToken<UsersInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call infoAsync(String token, Boolean includeLocale, String user, final ApiCallback<UsersInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoValidateBeforeCall(token, includeLocale, user, _callback);
        Type localVarReturnType = new TypeToken<UsersInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InfoRequestBuilder {
        private final String token;
        private Boolean includeLocale;
        private String user;

        private InfoRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set includeLocale
         * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for this user. Defaults to &#x60;false&#x60; (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder includeLocale(Boolean includeLocale) {
            this.includeLocale = includeLocale;
            return this;
        }
        
        /**
         * Set user
         * @param user User to get info on (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for info
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return infoCall(token, includeLocale, user, _callback);
        }


        /**
         * Execute info request
         * @return UsersInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersInfoResponse execute() throws ApiException {
            ApiResponse<UsersInfoResponse> localVarResp = infoWithHttpInfo(token, includeLocale, user);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute info request with HTTP info returned
         * @return ApiResponse&lt;UsersInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersInfoResponse> executeWithHttpInfo() throws ApiException {
            return infoWithHttpInfo(token, includeLocale, user);
        }

        /**
         * Execute info request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersInfoResponse> _callback) throws ApiException {
            return infoAsync(token, includeLocale, user, _callback);
        }
    }

    /**
     * 
     * Gets information about a user.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (required)
     * @return InfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.info"> Documentation</a>
     */
    public InfoRequestBuilder info(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new InfoRequestBuilder(token);
    }
    private okhttp3.Call listCall(String token, Integer limit, String cursor, Boolean includeLocale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (includeLocale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_locale", includeLocale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String token, Integer limit, String cursor, Boolean includeLocale, final ApiCallback _callback) throws ApiException {
        return listCall(token, limit, cursor, includeLocale, _callback);

    }


    private ApiResponse<UsersListResponse> listWithHttpInfo(String token, Integer limit, String cursor, Boolean includeLocale) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(token, limit, cursor, includeLocale, null);
        Type localVarReturnType = new TypeToken<UsersListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String token, Integer limit, String cursor, Boolean includeLocale, final ApiCallback<UsersListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(token, limit, cursor, includeLocale, _callback);
        Type localVarReturnType = new TypeToken<UsersListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String token;
        private Integer limit;
        private String cursor;
        private Boolean includeLocale;

        private ListRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&#39;t been reached. Providing no &#x60;limit&#x60; value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience &#x60;limit_required&#x60; or HTTP 500 errors. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](https://slack.dev) for more detail. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set includeLocale
         * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for users. Defaults to &#x60;false&#x60; (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder includeLocale(Boolean includeLocale) {
            this.includeLocale = includeLocale;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(token, limit, cursor, includeLocale, _callback);
        }


        /**
         * Execute list request
         * @return UsersListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersListResponse execute() throws ApiException {
            ApiResponse<UsersListResponse> localVarResp = listWithHttpInfo(token, limit, cursor, includeLocale);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;UsersListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(token, limit, cursor, includeLocale);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersListResponse> _callback) throws ApiException {
            return listAsync(token, limit, cursor, includeLocale, _callback);
        }
    }

    /**
     * 
     * Lists all users in a Slack team.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.list"> Documentation</a>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call lookupByEmailCall(String token, String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.lookupByEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupByEmailValidateBeforeCall(String token, String email, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling lookupByEmail(Async)");
        }

        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling lookupByEmail(Async)");
        }

        return lookupByEmailCall(token, email, _callback);

    }


    private ApiResponse<UsersLookupByEmailResponse> lookupByEmailWithHttpInfo(String token, String email) throws ApiException {
        okhttp3.Call localVarCall = lookupByEmailValidateBeforeCall(token, email, null);
        Type localVarReturnType = new TypeToken<UsersLookupByEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupByEmailAsync(String token, String email, final ApiCallback<UsersLookupByEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupByEmailValidateBeforeCall(token, email, _callback);
        Type localVarReturnType = new TypeToken<UsersLookupByEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LookupByEmailRequestBuilder {
        private final String token;
        private final String email;

        private LookupByEmailRequestBuilder(String token, String email) {
            this.token = token;
            this.email = email;
        }

        /**
         * Build call for lookupByEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupByEmailCall(token, email, _callback);
        }


        /**
         * Execute lookupByEmail request
         * @return UsersLookupByEmailResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersLookupByEmailResponse execute() throws ApiException {
            ApiResponse<UsersLookupByEmailResponse> localVarResp = lookupByEmailWithHttpInfo(token, email);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute lookupByEmail request with HTTP info returned
         * @return ApiResponse&lt;UsersLookupByEmailResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersLookupByEmailResponse> executeWithHttpInfo() throws ApiException {
            return lookupByEmailWithHttpInfo(token, email);
        }

        /**
         * Execute lookupByEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersLookupByEmailResponse> _callback) throws ApiException {
            return lookupByEmailAsync(token, email, _callback);
        }
    }

    /**
     * 
     * Find a user with an email address.
     * @param token Authentication token. Requires scope: &#x60;users:read.email&#x60; (required)
     * @param email An email address belonging to a user in the workspace (required)
     * @return LookupByEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.lookupByEmail"> Documentation</a>
     */
    public LookupByEmailRequestBuilder lookupByEmail(String token, String email) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        return new LookupByEmailRequestBuilder(token, email);
    }
    private okhttp3.Call setActiveCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.setActive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setActiveValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setActive(Async)");
        }

        return setActiveCall(token, _callback);

    }


    private ApiResponse<UsersSetActiveResponse> setActiveWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = setActiveValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<UsersSetActiveResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setActiveAsync(String token, final ApiCallback<UsersSetActiveResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setActiveValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<UsersSetActiveResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetActiveRequestBuilder {
        private final String token;

        private SetActiveRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Build call for setActive
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setActiveCall(token, _callback);
        }


        /**
         * Execute setActive request
         * @return UsersSetActiveResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersSetActiveResponse execute() throws ApiException {
            ApiResponse<UsersSetActiveResponse> localVarResp = setActiveWithHttpInfo(token);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setActive request with HTTP info returned
         * @return ApiResponse&lt;UsersSetActiveResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersSetActiveResponse> executeWithHttpInfo() throws ApiException {
            return setActiveWithHttpInfo(token);
        }

        /**
         * Execute setActive request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersSetActiveResponse> _callback) throws ApiException {
            return setActiveAsync(token, _callback);
        }
    }

    /**
     * 
     * Marked a user as active. Deprecated and non-functional.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60; (required)
     * @return SetActiveRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setActive"> Documentation</a>
     */
    public SetActiveRequestBuilder setActive(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SetActiveRequestBuilder(token);
    }
    private okhttp3.Call setPhotoCall(String token, UsersSetPhotoRequest usersSetPhotoRequest, String cropW, String cropX, String cropY, String image, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSetPhotoRequest;

        // create path and map variables
        String localVarPath = "/users.setPhoto";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cropW != null) {
            localVarFormParams.put("crop_w", cropW);
        }

        if (cropX != null) {
            localVarFormParams.put("crop_x", cropX);
        }

        if (cropY != null) {
            localVarFormParams.put("crop_y", cropY);
        }

        if (image != null) {
            localVarFormParams.put("image", image);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPhotoValidateBeforeCall(String token, UsersSetPhotoRequest usersSetPhotoRequest, String cropW, String cropX, String cropY, String image, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setPhoto(Async)");
        }

        // verify the required parameter 'usersSetPhotoRequest' is set
        if (usersSetPhotoRequest == null) {
            throw new ApiException("Missing the required parameter 'usersSetPhotoRequest' when calling setPhoto(Async)");
        }

        return setPhotoCall(token, usersSetPhotoRequest, cropW, cropX, cropY, image, _callback);

    }


    private ApiResponse<UsersSetPhotoResponse> setPhotoWithHttpInfo(String token, UsersSetPhotoRequest usersSetPhotoRequest, String cropW, String cropX, String cropY, String image) throws ApiException {
        okhttp3.Call localVarCall = setPhotoValidateBeforeCall(token, usersSetPhotoRequest, cropW, cropX, cropY, image, null);
        Type localVarReturnType = new TypeToken<UsersSetPhotoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setPhotoAsync(String token, UsersSetPhotoRequest usersSetPhotoRequest, String cropW, String cropX, String cropY, String image, final ApiCallback<UsersSetPhotoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPhotoValidateBeforeCall(token, usersSetPhotoRequest, cropW, cropX, cropY, image, _callback);
        Type localVarReturnType = new TypeToken<UsersSetPhotoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetPhotoRequestBuilder {
        private final String token;
        private String cropW;
        private String cropX;
        private String cropY;
        private String image;

        private SetPhotoRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set cropW
         * @param cropW Width/height of crop box (always square) (optional)
         * @return SetPhotoRequestBuilder
         */
        public SetPhotoRequestBuilder cropW(String cropW) {
            this.cropW = cropW;
            return this;
        }
        
        /**
         * Set cropX
         * @param cropX X coordinate of top-left corner of crop box (optional)
         * @return SetPhotoRequestBuilder
         */
        public SetPhotoRequestBuilder cropX(String cropX) {
            this.cropX = cropX;
            return this;
        }
        
        /**
         * Set cropY
         * @param cropY Y coordinate of top-left corner of crop box (optional)
         * @return SetPhotoRequestBuilder
         */
        public SetPhotoRequestBuilder cropY(String cropY) {
            this.cropY = cropY;
            return this;
        }
        
        /**
         * Set image
         * @param image File contents via &#x60;multipart/form-data&#x60;. (optional)
         * @return SetPhotoRequestBuilder
         */
        public SetPhotoRequestBuilder image(String image) {
            this.image = image;
            return this;
        }
        
        /**
         * Build call for setPhoto
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersSetPhotoRequest usersSetPhotoRequest = buildBodyParams();
            return setPhotoCall(token, usersSetPhotoRequest, cropW, cropX, cropY, image, _callback);
        }

        private UsersSetPhotoRequest buildBodyParams() {
            UsersSetPhotoRequest usersSetPhotoRequest = new UsersSetPhotoRequest();
            usersSetPhotoRequest.cropW(this.cropW);
            usersSetPhotoRequest.cropX(this.cropX);
            usersSetPhotoRequest.cropY(this.cropY);
            usersSetPhotoRequest.image(this.image);
            usersSetPhotoRequest.token(this.token);
            return usersSetPhotoRequest;
        }

        /**
         * Execute setPhoto request
         * @return UsersSetPhotoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersSetPhotoResponse execute() throws ApiException {
            UsersSetPhotoRequest usersSetPhotoRequest = buildBodyParams();
            ApiResponse<UsersSetPhotoResponse> localVarResp = setPhotoWithHttpInfo(token, usersSetPhotoRequest, cropW, cropX, cropY, image);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setPhoto request with HTTP info returned
         * @return ApiResponse&lt;UsersSetPhotoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersSetPhotoResponse> executeWithHttpInfo() throws ApiException {
            UsersSetPhotoRequest usersSetPhotoRequest = buildBodyParams();
            return setPhotoWithHttpInfo(token, usersSetPhotoRequest, cropW, cropX, cropY, image);
        }

        /**
         * Execute setPhoto request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersSetPhotoResponse> _callback) throws ApiException {
            UsersSetPhotoRequest usersSetPhotoRequest = buildBodyParams();
            return setPhotoAsync(token, usersSetPhotoRequest, cropW, cropX, cropY, image, _callback);
        }
    }

    /**
     * 
     * Set the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @param usersSetPhotoRequest  (required)
     * @return SetPhotoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setPhoto"> Documentation</a>
     */
    public SetPhotoRequestBuilder setPhoto(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SetPhotoRequestBuilder(token);
    }
    private okhttp3.Call setPresenceCall(String token, String presence, UsersSetPresenceRequest usersSetPresenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersSetPresenceRequest;

        // create path and map variables
        String localVarPath = "/users.setPresence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (presence != null) {
            localVarFormParams.put("presence", presence);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPresenceValidateBeforeCall(String token, String presence, UsersSetPresenceRequest usersSetPresenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setPresence(Async)");
        }

        // verify the required parameter 'presence' is set
        if (presence == null) {
            throw new ApiException("Missing the required parameter 'presence' when calling setPresence(Async)");
        }

        // verify the required parameter 'usersSetPresenceRequest' is set
        if (usersSetPresenceRequest == null) {
            throw new ApiException("Missing the required parameter 'usersSetPresenceRequest' when calling setPresence(Async)");
        }

        return setPresenceCall(token, presence, usersSetPresenceRequest, _callback);

    }


    private ApiResponse<UsersSetPresenceResponse> setPresenceWithHttpInfo(String token, String presence, UsersSetPresenceRequest usersSetPresenceRequest) throws ApiException {
        okhttp3.Call localVarCall = setPresenceValidateBeforeCall(token, presence, usersSetPresenceRequest, null);
        Type localVarReturnType = new TypeToken<UsersSetPresenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setPresenceAsync(String token, String presence, UsersSetPresenceRequest usersSetPresenceRequest, final ApiCallback<UsersSetPresenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPresenceValidateBeforeCall(token, presence, usersSetPresenceRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersSetPresenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetPresenceRequestBuilder {
        private final String token;
        private final String presence;

        private SetPresenceRequestBuilder(String token, String presence) {
            this.token = token;
            this.presence = presence;
        }

        /**
         * Build call for setPresence
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersSetPresenceRequest usersSetPresenceRequest = buildBodyParams();
            return setPresenceCall(token, presence, usersSetPresenceRequest, _callback);
        }

        private UsersSetPresenceRequest buildBodyParams() {
            UsersSetPresenceRequest usersSetPresenceRequest = new UsersSetPresenceRequest();
            usersSetPresenceRequest.presence(this.presence);
            return usersSetPresenceRequest;
        }

        /**
         * Execute setPresence request
         * @return UsersSetPresenceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersSetPresenceResponse execute() throws ApiException {
            UsersSetPresenceRequest usersSetPresenceRequest = buildBodyParams();
            ApiResponse<UsersSetPresenceResponse> localVarResp = setPresenceWithHttpInfo(token, presence, usersSetPresenceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setPresence request with HTTP info returned
         * @return ApiResponse&lt;UsersSetPresenceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersSetPresenceResponse> executeWithHttpInfo() throws ApiException {
            UsersSetPresenceRequest usersSetPresenceRequest = buildBodyParams();
            return setPresenceWithHttpInfo(token, presence, usersSetPresenceRequest);
        }

        /**
         * Execute setPresence request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersSetPresenceResponse> _callback) throws ApiException {
            UsersSetPresenceRequest usersSetPresenceRequest = buildBodyParams();
            return setPresenceAsync(token, presence, usersSetPresenceRequest, _callback);
        }
    }

    /**
     * 
     * Manually sets user presence.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60; (required)
     * @param presence Either &#x60;auto&#x60; or &#x60;away&#x60; (required)
     * @param usersSetPresenceRequest  (required)
     * @return SetPresenceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.setPresence"> Documentation</a>
     */
    public SetPresenceRequestBuilder setPresence(String token, String presence) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (presence == null) throw new IllegalArgumentException("\"presence\" is required but got null");
            

        return new SetPresenceRequestBuilder(token, presence);
    }
    private okhttp3.Call setProfileInfoCall(String token, String name, String profile, String user, String value, UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersprofileSetProfileInfoRequest;

        // create path and map variables
        String localVarPath = "/users.profile.set";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (profile != null) {
            localVarFormParams.put("profile", profile);
        }

        if (user != null) {
            localVarFormParams.put("user", user);
        }

        if (value != null) {
            localVarFormParams.put("value", value);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setProfileInfoValidateBeforeCall(String token, String name, String profile, String user, String value, UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setProfileInfo(Async)");
        }

        return setProfileInfoCall(token, name, profile, user, value, usersprofileSetProfileInfoRequest, _callback);

    }


    private ApiResponse<UsersprofileSetProfileInfoResponse> setProfileInfoWithHttpInfo(String token, String name, String profile, String user, String value, UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = setProfileInfoValidateBeforeCall(token, name, profile, user, value, usersprofileSetProfileInfoRequest, null);
        Type localVarReturnType = new TypeToken<UsersprofileSetProfileInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setProfileInfoAsync(String token, String name, String profile, String user, String value, UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest, final ApiCallback<UsersprofileSetProfileInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setProfileInfoValidateBeforeCall(token, name, profile, user, value, usersprofileSetProfileInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersprofileSetProfileInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetProfileInfoRequestBuilder {
        private final String token;
        private String name;
        private String profile;
        private String user;
        private String value;

        private SetProfileInfoRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set name
         * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
         * @return SetProfileInfoRequestBuilder
         */
        public SetProfileInfoRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set profile
         * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
         * @return SetProfileInfoRequestBuilder
         */
        public SetProfileInfoRequestBuilder profile(String profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set user
         * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
         * @return SetProfileInfoRequestBuilder
         */
        public SetProfileInfoRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set value
         * @param value Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
         * @return SetProfileInfoRequestBuilder
         */
        public SetProfileInfoRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for setProfileInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest = buildBodyParams();
            return setProfileInfoCall(token, name, profile, user, value, usersprofileSetProfileInfoRequest, _callback);
        }

        private UsersprofileSetProfileInfoRequest buildBodyParams() {
            UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest = new UsersprofileSetProfileInfoRequest();
            usersprofileSetProfileInfoRequest.name(this.name);
            usersprofileSetProfileInfoRequest.profile(this.profile);
            usersprofileSetProfileInfoRequest.user(this.user);
            usersprofileSetProfileInfoRequest.value(this.value);
            return usersprofileSetProfileInfoRequest;
        }

        /**
         * Execute setProfileInfo request
         * @return UsersprofileSetProfileInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersprofileSetProfileInfoResponse execute() throws ApiException {
            UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest = buildBodyParams();
            ApiResponse<UsersprofileSetProfileInfoResponse> localVarResp = setProfileInfoWithHttpInfo(token, name, profile, user, value, usersprofileSetProfileInfoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setProfileInfo request with HTTP info returned
         * @return ApiResponse&lt;UsersprofileSetProfileInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersprofileSetProfileInfoResponse> executeWithHttpInfo() throws ApiException {
            UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest = buildBodyParams();
            return setProfileInfoWithHttpInfo(token, name, profile, user, value, usersprofileSetProfileInfoRequest);
        }

        /**
         * Execute setProfileInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersprofileSetProfileInfoResponse> _callback) throws ApiException {
            UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest = buildBodyParams();
            return setProfileInfoAsync(token, name, profile, user, value, usersprofileSetProfileInfoRequest, _callback);
        }
    }

    /**
     * 
     * Set the profile information for a user.
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @return SetProfileInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.set"> Documentation</a>
     */
    public SetProfileInfoRequestBuilder setProfileInfo(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SetProfileInfoRequestBuilder(token);
    }
}
