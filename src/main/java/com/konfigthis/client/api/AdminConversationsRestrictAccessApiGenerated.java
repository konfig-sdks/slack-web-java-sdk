/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminconversationsrestrictAccessAddGroupIdpGroupsRequest;
import com.konfigthis.client.model.AdminconversationsrestrictAccessAddGroupIdpGroupsResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessAddGroupIdpGroupsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessListGroupsResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessListGroupsdefaultResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessRemoveIdpGroupRequest;
import com.konfigthis.client.model.AdminconversationsrestrictAccessRemoveIdpGroupResponse;
import com.konfigthis.client.model.AdminconversationsrestrictAccessRemoveIdpGroupdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminConversationsRestrictAccessApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminConversationsRestrictAccessApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminConversationsRestrictAccessApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addGroupIdpGroupsCall(String channelId, String groupId, String token, AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsrestrictAccessAddGroupIdpGroupsRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.restrictAccess.addGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (groupId != null) {
            localVarFormParams.put("group_id", groupId);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGroupIdpGroupsValidateBeforeCall(String channelId, String groupId, String token, AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling addGroupIdpGroups(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addGroupIdpGroups(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addGroupIdpGroups(Async)");
        }

        // verify the required parameter 'adminconversationsrestrictAccessAddGroupIdpGroupsRequest' is set
        if (adminconversationsrestrictAccessAddGroupIdpGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsrestrictAccessAddGroupIdpGroupsRequest' when calling addGroupIdpGroups(Async)");
        }

        return addGroupIdpGroupsCall(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId, _callback);

    }


    private ApiResponse<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> addGroupIdpGroupsWithHttpInfo(String channelId, String groupId, String token, AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest, String teamId) throws ApiException {
        okhttp3.Call localVarCall = addGroupIdpGroupsValidateBeforeCall(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId, null);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addGroupIdpGroupsAsync(String channelId, String groupId, String token, AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest, String teamId, final ApiCallback<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGroupIdpGroupsValidateBeforeCall(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddGroupIdpGroupsRequestBuilder {
        private final String channelId;
        private final String groupId;
        private final String token;
        private String teamId;

        private AddGroupIdpGroupsRequestBuilder(String channelId, String groupId, String token) {
            this.channelId = channelId;
            this.groupId = groupId;
            this.token = token;
        }

        /**
         * Set teamId
         * @param teamId The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
         * @return AddGroupIdpGroupsRequestBuilder
         */
        public AddGroupIdpGroupsRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for addGroupIdpGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest = buildBodyParams();
            return addGroupIdpGroupsCall(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId, _callback);
        }

        private AdminconversationsrestrictAccessAddGroupIdpGroupsRequest buildBodyParams() {
            AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest = new AdminconversationsrestrictAccessAddGroupIdpGroupsRequest();
            adminconversationsrestrictAccessAddGroupIdpGroupsRequest.channelId(this.channelId);
            adminconversationsrestrictAccessAddGroupIdpGroupsRequest.groupId(this.groupId);
            adminconversationsrestrictAccessAddGroupIdpGroupsRequest.teamId(this.teamId);
            adminconversationsrestrictAccessAddGroupIdpGroupsRequest.token(this.token);
            return adminconversationsrestrictAccessAddGroupIdpGroupsRequest;
        }

        /**
         * Execute addGroupIdpGroups request
         * @return AdminconversationsrestrictAccessAddGroupIdpGroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsrestrictAccessAddGroupIdpGroupsResponse execute() throws ApiException {
            AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest = buildBodyParams();
            ApiResponse<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> localVarResp = addGroupIdpGroupsWithHttpInfo(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addGroupIdpGroups request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsrestrictAccessAddGroupIdpGroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest = buildBodyParams();
            return addGroupIdpGroupsWithHttpInfo(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId);
        }

        /**
         * Execute addGroupIdpGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsrestrictAccessAddGroupIdpGroupsResponse> _callback) throws ApiException {
            AdminconversationsrestrictAccessAddGroupIdpGroupsRequest adminconversationsrestrictAccessAddGroupIdpGroupsRequest = buildBodyParams();
            return addGroupIdpGroupsAsync(channelId, groupId, token, adminconversationsrestrictAccessAddGroupIdpGroupsRequest, teamId, _callback);
        }
    }

    /**
     * 
     * Add an allowlist of IDP groups for accessing a channel
     * @param channelId The channel to link this group to. (required)
     * @param groupId The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param adminconversationsrestrictAccessAddGroupIdpGroupsRequest  (required)
     * @return AddGroupIdpGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.restrictAccess.addGroup"> Documentation</a>
     */
    public AddGroupIdpGroupsRequestBuilder addGroupIdpGroups(String channelId, String groupId, String token) throws IllegalArgumentException {
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new AddGroupIdpGroupsRequestBuilder(channelId, groupId, token);
    }
    private okhttp3.Call listGroupsCall(String token, String channelId, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.conversations.restrictAccess.listGroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (channelId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel_id", channelId));
        }

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupsValidateBeforeCall(String token, String channelId, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listGroups(Async)");
        }

        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling listGroups(Async)");
        }

        return listGroupsCall(token, channelId, teamId, _callback);

    }


    private ApiResponse<AdminconversationsrestrictAccessListGroupsResponse> listGroupsWithHttpInfo(String token, String channelId, String teamId) throws ApiException {
        okhttp3.Call localVarCall = listGroupsValidateBeforeCall(token, channelId, teamId, null);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessListGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGroupsAsync(String token, String channelId, String teamId, final ApiCallback<AdminconversationsrestrictAccessListGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupsValidateBeforeCall(token, channelId, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessListGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGroupsRequestBuilder {
        private final String token;
        private final String channelId;
        private String teamId;

        private ListGroupsRequestBuilder(String token, String channelId) {
            this.token = token;
            this.channelId = channelId;
        }

        /**
         * Set teamId
         * @param teamId The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
         * @return ListGroupsRequestBuilder
         */
        public ListGroupsRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for listGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGroupsCall(token, channelId, teamId, _callback);
        }


        /**
         * Execute listGroups request
         * @return AdminconversationsrestrictAccessListGroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsrestrictAccessListGroupsResponse execute() throws ApiException {
            ApiResponse<AdminconversationsrestrictAccessListGroupsResponse> localVarResp = listGroupsWithHttpInfo(token, channelId, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGroups request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsrestrictAccessListGroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsrestrictAccessListGroupsResponse> executeWithHttpInfo() throws ApiException {
            return listGroupsWithHttpInfo(token, channelId, teamId);
        }

        /**
         * Execute listGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsrestrictAccessListGroupsResponse> _callback) throws ApiException {
            return listGroupsAsync(token, channelId, teamId, _callback);
        }
    }

    /**
     * 
     * List all IDP Groups linked to a channel
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param channelId  (required)
     * @return ListGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.restrictAccess.listGroups"> Documentation</a>
     */
    public ListGroupsRequestBuilder listGroups(String token, String channelId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new ListGroupsRequestBuilder(token, channelId);
    }
    private okhttp3.Call removeIdpGroupCall(String channelId, String groupId, String teamId, String token, AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminconversationsrestrictAccessRemoveIdpGroupRequest;

        // create path and map variables
        String localVarPath = "/admin.conversations.restrictAccess.removeGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelId != null) {
            localVarFormParams.put("channel_id", channelId);
        }

        if (groupId != null) {
            localVarFormParams.put("group_id", groupId);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeIdpGroupValidateBeforeCall(String channelId, String groupId, String teamId, String token, AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling removeIdpGroup(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling removeIdpGroup(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling removeIdpGroup(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling removeIdpGroup(Async)");
        }

        // verify the required parameter 'adminconversationsrestrictAccessRemoveIdpGroupRequest' is set
        if (adminconversationsrestrictAccessRemoveIdpGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'adminconversationsrestrictAccessRemoveIdpGroupRequest' when calling removeIdpGroup(Async)");
        }

        return removeIdpGroupCall(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest, _callback);

    }


    private ApiResponse<AdminconversationsrestrictAccessRemoveIdpGroupResponse> removeIdpGroupWithHttpInfo(String channelId, String groupId, String teamId, String token, AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = removeIdpGroupValidateBeforeCall(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest, null);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessRemoveIdpGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeIdpGroupAsync(String channelId, String groupId, String teamId, String token, AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest, final ApiCallback<AdminconversationsrestrictAccessRemoveIdpGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeIdpGroupValidateBeforeCall(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminconversationsrestrictAccessRemoveIdpGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveIdpGroupRequestBuilder {
        private final String channelId;
        private final String groupId;
        private final String teamId;
        private final String token;

        private RemoveIdpGroupRequestBuilder(String channelId, String groupId, String teamId, String token) {
            this.channelId = channelId;
            this.groupId = groupId;
            this.teamId = teamId;
            this.token = token;
        }

        /**
         * Build call for removeIdpGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest = buildBodyParams();
            return removeIdpGroupCall(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest, _callback);
        }

        private AdminconversationsrestrictAccessRemoveIdpGroupRequest buildBodyParams() {
            AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest = new AdminconversationsrestrictAccessRemoveIdpGroupRequest();
            adminconversationsrestrictAccessRemoveIdpGroupRequest.channelId(this.channelId);
            adminconversationsrestrictAccessRemoveIdpGroupRequest.groupId(this.groupId);
            adminconversationsrestrictAccessRemoveIdpGroupRequest.teamId(this.teamId);
            adminconversationsrestrictAccessRemoveIdpGroupRequest.token(this.token);
            return adminconversationsrestrictAccessRemoveIdpGroupRequest;
        }

        /**
         * Execute removeIdpGroup request
         * @return AdminconversationsrestrictAccessRemoveIdpGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminconversationsrestrictAccessRemoveIdpGroupResponse execute() throws ApiException {
            AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest = buildBodyParams();
            ApiResponse<AdminconversationsrestrictAccessRemoveIdpGroupResponse> localVarResp = removeIdpGroupWithHttpInfo(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeIdpGroup request with HTTP info returned
         * @return ApiResponse&lt;AdminconversationsrestrictAccessRemoveIdpGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminconversationsrestrictAccessRemoveIdpGroupResponse> executeWithHttpInfo() throws ApiException {
            AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest = buildBodyParams();
            return removeIdpGroupWithHttpInfo(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest);
        }

        /**
         * Execute removeIdpGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminconversationsrestrictAccessRemoveIdpGroupResponse> _callback) throws ApiException {
            AdminconversationsrestrictAccessRemoveIdpGroupRequest adminconversationsrestrictAccessRemoveIdpGroupRequest = buildBodyParams();
            return removeIdpGroupAsync(channelId, groupId, teamId, token, adminconversationsrestrictAccessRemoveIdpGroupRequest, _callback);
        }
    }

    /**
     * 
     * Remove a linked IDP group linked from a private channel
     * @param channelId The channel to remove the linked group from. (required)
     * @param groupId The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. (required)
     * @param teamId The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param adminconversationsrestrictAccessRemoveIdpGroupRequest  (required)
     * @return RemoveIdpGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.conversations.restrictAccess.removeGroup"> Documentation</a>
     */
    public RemoveIdpGroupRequestBuilder removeIdpGroup(String channelId, String groupId, String teamId, String token) throws IllegalArgumentException {
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (groupId == null) throw new IllegalArgumentException("\"groupId\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new RemoveIdpGroupRequestBuilder(channelId, groupId, teamId, token);
    }
}
