/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DialogOpenResponse;
import com.konfigthis.client.model.DialogOpendefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DialogApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DialogApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DialogApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call openCall(String token, String dialog, String triggerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dialog.open";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dialog != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dialog", dialog));
        }

        if (triggerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trigger_id", triggerId));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openValidateBeforeCall(String token, String dialog, String triggerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling open(Async)");
        }

        // verify the required parameter 'dialog' is set
        if (dialog == null) {
            throw new ApiException("Missing the required parameter 'dialog' when calling open(Async)");
        }

        // verify the required parameter 'triggerId' is set
        if (triggerId == null) {
            throw new ApiException("Missing the required parameter 'triggerId' when calling open(Async)");
        }

        return openCall(token, dialog, triggerId, _callback);

    }


    private ApiResponse<DialogOpenResponse> openWithHttpInfo(String token, String dialog, String triggerId) throws ApiException {
        okhttp3.Call localVarCall = openValidateBeforeCall(token, dialog, triggerId, null);
        Type localVarReturnType = new TypeToken<DialogOpenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call openAsync(String token, String dialog, String triggerId, final ApiCallback<DialogOpenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = openValidateBeforeCall(token, dialog, triggerId, _callback);
        Type localVarReturnType = new TypeToken<DialogOpenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OpenRequestBuilder {
        private final String token;
        private final String dialog;
        private final String triggerId;

        private OpenRequestBuilder(String token, String dialog, String triggerId) {
            this.token = token;
            this.dialog = dialog;
            this.triggerId = triggerId;
        }

        /**
         * Build call for open
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response is quite minimal. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return openCall(token, dialog, triggerId, _callback);
        }


        /**
         * Execute open request
         * @return DialogOpenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response is quite minimal. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public DialogOpenResponse execute() throws ApiException {
            ApiResponse<DialogOpenResponse> localVarResp = openWithHttpInfo(token, dialog, triggerId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute open request with HTTP info returned
         * @return ApiResponse&lt;DialogOpenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response is quite minimal. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DialogOpenResponse> executeWithHttpInfo() throws ApiException {
            return openWithHttpInfo(token, dialog, triggerId);
        }

        /**
         * Execute open request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response is quite minimal. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DialogOpenResponse> _callback) throws ApiException {
            return openAsync(token, dialog, triggerId, _callback);
        }
    }

    /**
     * 
     * Open a dialog with a user
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param dialog The dialog definition. This must be a JSON-encoded string. (required)
     * @param triggerId Exchange a trigger to post to the user. (required)
     * @return OpenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response is quite minimal. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response, before getting to any possible validation errors. </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dialog.open"> Documentation</a>
     */
    public OpenRequestBuilder open(String token, String dialog, String triggerId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (dialog == null) throw new IllegalArgumentException("\"dialog\" is required but got null");
            

        if (triggerId == null) throw new IllegalArgumentException("\"triggerId\" is required but got null");
            

        return new OpenRequestBuilder(token, dialog, triggerId);
    }
}
