/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdminteamssettingsGetInfoResponse;
import com.konfigthis.client.model.AdminteamssettingsGetInfodefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDefaultChannelsRequest;
import com.konfigthis.client.model.AdminteamssettingsSetDefaultChannelsResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDefaultChannelsdefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDescriptionRequest;
import com.konfigthis.client.model.AdminteamssettingsSetDescriptionResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDescriptiondefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest;
import com.konfigthis.client.model.AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse;
import com.konfigthis.client.model.AdminteamssettingsSetDiscoverabilityOfWorkspacedefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetIconRequest;
import com.konfigthis.client.model.AdminteamssettingsSetIconResponse;
import com.konfigthis.client.model.AdminteamssettingsSetIcondefaultResponse;
import com.konfigthis.client.model.AdminteamssettingsSetNameRequest;
import com.konfigthis.client.model.AdminteamssettingsSetNameResponse;
import com.konfigthis.client.model.AdminteamssettingsSetNamedefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminTeamsSettingsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminTeamsSettingsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminTeamsSettingsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getInfoCall(String token, String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String token, String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getInfo(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling getInfo(Async)");
        }

        return getInfoCall(token, teamId, _callback);

    }


    private ApiResponse<AdminteamssettingsGetInfoResponse> getInfoWithHttpInfo(String token, String teamId) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(token, teamId, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsGetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String token, String teamId, final ApiCallback<AdminteamssettingsGetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(token, teamId, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsGetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private final String token;
        private final String teamId;

        private GetInfoRequestBuilder(String token, String teamId) {
            this.token = token;
            this.teamId = teamId;
        }

        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(token, teamId, _callback);
        }


        /**
         * Execute getInfo request
         * @return AdminteamssettingsGetInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsGetInfoResponse execute() throws ApiException {
            ApiResponse<AdminteamssettingsGetInfoResponse> localVarResp = getInfoWithHttpInfo(token, teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsGetInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsGetInfoResponse> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(token, teamId);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsGetInfoResponse> _callback) throws ApiException {
            return getInfoAsync(token, teamId, _callback);
        }
    }

    /**
     * 
     * Fetch information about settings in a workspace
     * @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param teamId  (required)
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.info"> Documentation</a>
     */
    public GetInfoRequestBuilder getInfo(String token, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new GetInfoRequestBuilder(token, teamId);
    }
    private okhttp3.Call setDefaultChannelsCall(String channelIds, String teamId, String token, AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamssettingsSetDefaultChannelsRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.setDefaultChannels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelIds != null) {
            localVarFormParams.put("channel_ids", channelIds);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDefaultChannelsValidateBeforeCall(String channelIds, String teamId, String token, AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelIds' is set
        if (channelIds == null) {
            throw new ApiException("Missing the required parameter 'channelIds' when calling setDefaultChannels(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setDefaultChannels(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setDefaultChannels(Async)");
        }

        // verify the required parameter 'adminteamssettingsSetDefaultChannelsRequest' is set
        if (adminteamssettingsSetDefaultChannelsRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamssettingsSetDefaultChannelsRequest' when calling setDefaultChannels(Async)");
        }

        return setDefaultChannelsCall(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest, _callback);

    }


    private ApiResponse<AdminteamssettingsSetDefaultChannelsResponse> setDefaultChannelsWithHttpInfo(String channelIds, String teamId, String token, AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest) throws ApiException {
        okhttp3.Call localVarCall = setDefaultChannelsValidateBeforeCall(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDefaultChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDefaultChannelsAsync(String channelIds, String teamId, String token, AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest, final ApiCallback<AdminteamssettingsSetDefaultChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDefaultChannelsValidateBeforeCall(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDefaultChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDefaultChannelsRequestBuilder {
        private final String channelIds;
        private final String teamId;
        private final String token;

        private SetDefaultChannelsRequestBuilder(String channelIds, String teamId, String token) {
            this.channelIds = channelIds;
            this.teamId = teamId;
            this.token = token;
        }

        /**
         * Build call for setDefaultChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest = buildBodyParams();
            return setDefaultChannelsCall(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest, _callback);
        }

        private AdminteamssettingsSetDefaultChannelsRequest buildBodyParams() {
            AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest = new AdminteamssettingsSetDefaultChannelsRequest();
            adminteamssettingsSetDefaultChannelsRequest.channelIds(this.channelIds);
            adminteamssettingsSetDefaultChannelsRequest.teamId(this.teamId);
            adminteamssettingsSetDefaultChannelsRequest.token(this.token);
            return adminteamssettingsSetDefaultChannelsRequest;
        }

        /**
         * Execute setDefaultChannels request
         * @return AdminteamssettingsSetDefaultChannelsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsSetDefaultChannelsResponse execute() throws ApiException {
            AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest = buildBodyParams();
            ApiResponse<AdminteamssettingsSetDefaultChannelsResponse> localVarResp = setDefaultChannelsWithHttpInfo(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDefaultChannels request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsSetDefaultChannelsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsSetDefaultChannelsResponse> executeWithHttpInfo() throws ApiException {
            AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest = buildBodyParams();
            return setDefaultChannelsWithHttpInfo(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest);
        }

        /**
         * Execute setDefaultChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsSetDefaultChannelsResponse> _callback) throws ApiException {
            AdminteamssettingsSetDefaultChannelsRequest adminteamssettingsSetDefaultChannelsRequest = buildBodyParams();
            return setDefaultChannelsAsync(channelIds, teamId, token, adminteamssettingsSetDefaultChannelsRequest, _callback);
        }
    }

    /**
     * 
     * Set the default channels of a workspace.
     * @param channelIds An array of channel IDs. (required)
     * @param teamId ID for the workspace to set the default channel for. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param adminteamssettingsSetDefaultChannelsRequest  (required)
     * @return SetDefaultChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.setDefaultChannels"> Documentation</a>
     */
    public SetDefaultChannelsRequestBuilder setDefaultChannels(String channelIds, String teamId, String token) throws IllegalArgumentException {
        if (channelIds == null) throw new IllegalArgumentException("\"channelIds\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SetDefaultChannelsRequestBuilder(channelIds, teamId, token);
    }
    private okhttp3.Call setDescriptionCall(String token, String description, String teamId, AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamssettingsSetDescriptionRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.setDescription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDescriptionValidateBeforeCall(String token, String description, String teamId, AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setDescription(Async)");
        }

        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling setDescription(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setDescription(Async)");
        }

        // verify the required parameter 'adminteamssettingsSetDescriptionRequest' is set
        if (adminteamssettingsSetDescriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamssettingsSetDescriptionRequest' when calling setDescription(Async)");
        }

        return setDescriptionCall(token, description, teamId, adminteamssettingsSetDescriptionRequest, _callback);

    }


    private ApiResponse<AdminteamssettingsSetDescriptionResponse> setDescriptionWithHttpInfo(String token, String description, String teamId, AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = setDescriptionValidateBeforeCall(token, description, teamId, adminteamssettingsSetDescriptionRequest, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDescriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDescriptionAsync(String token, String description, String teamId, AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest, final ApiCallback<AdminteamssettingsSetDescriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDescriptionValidateBeforeCall(token, description, teamId, adminteamssettingsSetDescriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDescriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDescriptionRequestBuilder {
        private final String token;
        private final String description;
        private final String teamId;

        private SetDescriptionRequestBuilder(String token, String description, String teamId) {
            this.token = token;
            this.description = description;
            this.teamId = teamId;
        }

        /**
         * Build call for setDescription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest = buildBodyParams();
            return setDescriptionCall(token, description, teamId, adminteamssettingsSetDescriptionRequest, _callback);
        }

        private AdminteamssettingsSetDescriptionRequest buildBodyParams() {
            AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest = new AdminteamssettingsSetDescriptionRequest();
            adminteamssettingsSetDescriptionRequest.description(this.description);
            adminteamssettingsSetDescriptionRequest.teamId(this.teamId);
            return adminteamssettingsSetDescriptionRequest;
        }

        /**
         * Execute setDescription request
         * @return AdminteamssettingsSetDescriptionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsSetDescriptionResponse execute() throws ApiException {
            AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest = buildBodyParams();
            ApiResponse<AdminteamssettingsSetDescriptionResponse> localVarResp = setDescriptionWithHttpInfo(token, description, teamId, adminteamssettingsSetDescriptionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDescription request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsSetDescriptionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsSetDescriptionResponse> executeWithHttpInfo() throws ApiException {
            AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest = buildBodyParams();
            return setDescriptionWithHttpInfo(token, description, teamId, adminteamssettingsSetDescriptionRequest);
        }

        /**
         * Execute setDescription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsSetDescriptionResponse> _callback) throws ApiException {
            AdminteamssettingsSetDescriptionRequest adminteamssettingsSetDescriptionRequest = buildBodyParams();
            return setDescriptionAsync(token, description, teamId, adminteamssettingsSetDescriptionRequest, _callback);
        }
    }

    /**
     * 
     * Set the description of a given workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param description The new description for the workspace. (required)
     * @param teamId ID for the workspace to set the description for. (required)
     * @param adminteamssettingsSetDescriptionRequest  (required)
     * @return SetDescriptionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.setDescription"> Documentation</a>
     */
    public SetDescriptionRequestBuilder setDescription(String token, String description, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new SetDescriptionRequestBuilder(token, description, teamId);
    }
    private okhttp3.Call setDiscoverabilityOfWorkspaceCall(String token, String discoverability, String teamId, AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamssettingsSetDiscoverabilityOfWorkspaceRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.setDiscoverability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (discoverability != null) {
            localVarFormParams.put("discoverability", discoverability);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setDiscoverabilityOfWorkspaceValidateBeforeCall(String token, String discoverability, String teamId, AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setDiscoverabilityOfWorkspace(Async)");
        }

        // verify the required parameter 'discoverability' is set
        if (discoverability == null) {
            throw new ApiException("Missing the required parameter 'discoverability' when calling setDiscoverabilityOfWorkspace(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setDiscoverabilityOfWorkspace(Async)");
        }

        // verify the required parameter 'adminteamssettingsSetDiscoverabilityOfWorkspaceRequest' is set
        if (adminteamssettingsSetDiscoverabilityOfWorkspaceRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamssettingsSetDiscoverabilityOfWorkspaceRequest' when calling setDiscoverabilityOfWorkspace(Async)");
        }

        return setDiscoverabilityOfWorkspaceCall(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, _callback);

    }


    private ApiResponse<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> setDiscoverabilityOfWorkspaceWithHttpInfo(String token, String discoverability, String teamId, AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest) throws ApiException {
        okhttp3.Call localVarCall = setDiscoverabilityOfWorkspaceValidateBeforeCall(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setDiscoverabilityOfWorkspaceAsync(String token, String discoverability, String teamId, AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, final ApiCallback<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setDiscoverabilityOfWorkspaceValidateBeforeCall(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetDiscoverabilityOfWorkspaceRequestBuilder {
        private final String token;
        private final String discoverability;
        private final String teamId;

        private SetDiscoverabilityOfWorkspaceRequestBuilder(String token, String discoverability, String teamId) {
            this.token = token;
            this.discoverability = discoverability;
            this.teamId = teamId;
        }

        /**
         * Build call for setDiscoverabilityOfWorkspace
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest = buildBodyParams();
            return setDiscoverabilityOfWorkspaceCall(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, _callback);
        }

        private AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest buildBodyParams() {
            AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest = new AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest();
            adminteamssettingsSetDiscoverabilityOfWorkspaceRequest.discoverability(this.discoverability);
            adminteamssettingsSetDiscoverabilityOfWorkspaceRequest.teamId(this.teamId);
            return adminteamssettingsSetDiscoverabilityOfWorkspaceRequest;
        }

        /**
         * Execute setDiscoverabilityOfWorkspace request
         * @return AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse execute() throws ApiException {
            AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest = buildBodyParams();
            ApiResponse<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> localVarResp = setDiscoverabilityOfWorkspaceWithHttpInfo(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setDiscoverabilityOfWorkspace request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> executeWithHttpInfo() throws ApiException {
            AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest = buildBodyParams();
            return setDiscoverabilityOfWorkspaceWithHttpInfo(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest);
        }

        /**
         * Execute setDiscoverabilityOfWorkspace request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsSetDiscoverabilityOfWorkspaceResponse> _callback) throws ApiException {
            AdminteamssettingsSetDiscoverabilityOfWorkspaceRequest adminteamssettingsSetDiscoverabilityOfWorkspaceRequest = buildBodyParams();
            return setDiscoverabilityOfWorkspaceAsync(token, discoverability, teamId, adminteamssettingsSetDiscoverabilityOfWorkspaceRequest, _callback);
        }
    }

    /**
     * 
     * An API method that allows admins to set the discoverability of a given workspace
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param discoverability This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;. (required)
     * @param teamId The ID of the workspace to set discoverability on. (required)
     * @param adminteamssettingsSetDiscoverabilityOfWorkspaceRequest  (required)
     * @return SetDiscoverabilityOfWorkspaceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.setDiscoverability"> Documentation</a>
     */
    public SetDiscoverabilityOfWorkspaceRequestBuilder setDiscoverabilityOfWorkspace(String token, String discoverability, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (discoverability == null) throw new IllegalArgumentException("\"discoverability\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new SetDiscoverabilityOfWorkspaceRequestBuilder(token, discoverability, teamId);
    }
    private okhttp3.Call setIconCall(String imageUrl, String teamId, String token, AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamssettingsSetIconRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.setIcon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageUrl != null) {
            localVarFormParams.put("image_url", imageUrl);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setIconValidateBeforeCall(String imageUrl, String teamId, String token, AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageUrl' is set
        if (imageUrl == null) {
            throw new ApiException("Missing the required parameter 'imageUrl' when calling setIcon(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setIcon(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setIcon(Async)");
        }

        // verify the required parameter 'adminteamssettingsSetIconRequest' is set
        if (adminteamssettingsSetIconRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamssettingsSetIconRequest' when calling setIcon(Async)");
        }

        return setIconCall(imageUrl, teamId, token, adminteamssettingsSetIconRequest, _callback);

    }


    private ApiResponse<AdminteamssettingsSetIconResponse> setIconWithHttpInfo(String imageUrl, String teamId, String token, AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest) throws ApiException {
        okhttp3.Call localVarCall = setIconValidateBeforeCall(imageUrl, teamId, token, adminteamssettingsSetIconRequest, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetIconResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setIconAsync(String imageUrl, String teamId, String token, AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest, final ApiCallback<AdminteamssettingsSetIconResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setIconValidateBeforeCall(imageUrl, teamId, token, adminteamssettingsSetIconRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetIconResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetIconRequestBuilder {
        private final String imageUrl;
        private final String teamId;
        private final String token;

        private SetIconRequestBuilder(String imageUrl, String teamId, String token) {
            this.imageUrl = imageUrl;
            this.teamId = teamId;
            this.token = token;
        }

        /**
         * Build call for setIcon
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest = buildBodyParams();
            return setIconCall(imageUrl, teamId, token, adminteamssettingsSetIconRequest, _callback);
        }

        private AdminteamssettingsSetIconRequest buildBodyParams() {
            AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest = new AdminteamssettingsSetIconRequest();
            adminteamssettingsSetIconRequest.imageUrl(this.imageUrl);
            adminteamssettingsSetIconRequest.teamId(this.teamId);
            adminteamssettingsSetIconRequest.token(this.token);
            return adminteamssettingsSetIconRequest;
        }

        /**
         * Execute setIcon request
         * @return AdminteamssettingsSetIconResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsSetIconResponse execute() throws ApiException {
            AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest = buildBodyParams();
            ApiResponse<AdminteamssettingsSetIconResponse> localVarResp = setIconWithHttpInfo(imageUrl, teamId, token, adminteamssettingsSetIconRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setIcon request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsSetIconResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsSetIconResponse> executeWithHttpInfo() throws ApiException {
            AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest = buildBodyParams();
            return setIconWithHttpInfo(imageUrl, teamId, token, adminteamssettingsSetIconRequest);
        }

        /**
         * Execute setIcon request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsSetIconResponse> _callback) throws ApiException {
            AdminteamssettingsSetIconRequest adminteamssettingsSetIconRequest = buildBodyParams();
            return setIconAsync(imageUrl, teamId, token, adminteamssettingsSetIconRequest, _callback);
        }
    }

    /**
     * 
     * Sets the icon of a workspace.
     * @param imageUrl Image URL for the icon (required)
     * @param teamId ID for the workspace to set the icon for. (required)
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param adminteamssettingsSetIconRequest  (required)
     * @return SetIconRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.setIcon"> Documentation</a>
     */
    public SetIconRequestBuilder setIcon(String imageUrl, String teamId, String token) throws IllegalArgumentException {
        if (imageUrl == null) throw new IllegalArgumentException("\"imageUrl\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SetIconRequestBuilder(imageUrl, teamId, token);
    }
    private okhttp3.Call setNameCall(String token, String name, String teamId, AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminteamssettingsSetNameRequest;

        // create path and map variables
        String localVarPath = "/admin.teams.settings.setName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (teamId != null) {
            localVarFormParams.put("team_id", teamId);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setNameValidateBeforeCall(String token, String name, String teamId, AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setName(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling setName(Async)");
        }

        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling setName(Async)");
        }

        // verify the required parameter 'adminteamssettingsSetNameRequest' is set
        if (adminteamssettingsSetNameRequest == null) {
            throw new ApiException("Missing the required parameter 'adminteamssettingsSetNameRequest' when calling setName(Async)");
        }

        return setNameCall(token, name, teamId, adminteamssettingsSetNameRequest, _callback);

    }


    private ApiResponse<AdminteamssettingsSetNameResponse> setNameWithHttpInfo(String token, String name, String teamId, AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest) throws ApiException {
        okhttp3.Call localVarCall = setNameValidateBeforeCall(token, name, teamId, adminteamssettingsSetNameRequest, null);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setNameAsync(String token, String name, String teamId, AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest, final ApiCallback<AdminteamssettingsSetNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setNameValidateBeforeCall(token, name, teamId, adminteamssettingsSetNameRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminteamssettingsSetNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetNameRequestBuilder {
        private final String token;
        private final String name;
        private final String teamId;

        private SetNameRequestBuilder(String token, String name, String teamId) {
            this.token = token;
            this.name = name;
            this.teamId = teamId;
        }

        /**
         * Build call for setName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest = buildBodyParams();
            return setNameCall(token, name, teamId, adminteamssettingsSetNameRequest, _callback);
        }

        private AdminteamssettingsSetNameRequest buildBodyParams() {
            AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest = new AdminteamssettingsSetNameRequest();
            adminteamssettingsSetNameRequest.name(this.name);
            adminteamssettingsSetNameRequest.teamId(this.teamId);
            return adminteamssettingsSetNameRequest;
        }

        /**
         * Execute setName request
         * @return AdminteamssettingsSetNameResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdminteamssettingsSetNameResponse execute() throws ApiException {
            AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest = buildBodyParams();
            ApiResponse<AdminteamssettingsSetNameResponse> localVarResp = setNameWithHttpInfo(token, name, teamId, adminteamssettingsSetNameRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setName request with HTTP info returned
         * @return ApiResponse&lt;AdminteamssettingsSetNameResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdminteamssettingsSetNameResponse> executeWithHttpInfo() throws ApiException {
            AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest = buildBodyParams();
            return setNameWithHttpInfo(token, name, teamId, adminteamssettingsSetNameRequest);
        }

        /**
         * Execute setName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdminteamssettingsSetNameResponse> _callback) throws ApiException {
            AdminteamssettingsSetNameRequest adminteamssettingsSetNameRequest = buildBodyParams();
            return setNameAsync(token, name, teamId, adminteamssettingsSetNameRequest, _callback);
        }
    }

    /**
     * 
     * Set the name of a given workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param name The new name of the workspace. (required)
     * @param teamId ID for the workspace to set the name for. (required)
     * @param adminteamssettingsSetNameRequest  (required)
     * @return SetNameRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.teams.settings.setName"> Documentation</a>
     */
    public SetNameRequestBuilder setName(String token, String name, String teamId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new SetNameRequestBuilder(token, name, teamId);
    }
}
