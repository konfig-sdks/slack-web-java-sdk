/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DndEndDndResponse;
import com.konfigthis.client.model.DndEndDnddefaultResponse;
import com.konfigthis.client.model.DndEndSnoozeResponse;
import com.konfigthis.client.model.DndEndSnoozedefaultResponse;
import com.konfigthis.client.model.DndInfoResponse;
import com.konfigthis.client.model.DndInfodefaultResponse;
import com.konfigthis.client.model.DndSetSnoozeRequest;
import com.konfigthis.client.model.DndSetSnoozeResponse;
import com.konfigthis.client.model.DndSetSnoozedefaultResponse;
import com.konfigthis.client.model.DndTeamInfoResponse;
import com.konfigthis.client.model.DndTeamInfodefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DndApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DndApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DndApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call endDndCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dnd.endDnd";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endDndValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling endDnd(Async)");
        }

        return endDndCall(token, _callback);

    }


    private ApiResponse<DndEndDndResponse> endDndWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = endDndValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<DndEndDndResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call endDndAsync(String token, final ApiCallback<DndEndDndResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = endDndValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<DndEndDndResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EndDndRequestBuilder {
        private final String token;

        private EndDndRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Build call for endDnd
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return endDndCall(token, _callback);
        }


        /**
         * Execute endDnd request
         * @return DndEndDndResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public DndEndDndResponse execute() throws ApiException {
            ApiResponse<DndEndDndResponse> localVarResp = endDndWithHttpInfo(token);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute endDnd request with HTTP info returned
         * @return ApiResponse&lt;DndEndDndResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DndEndDndResponse> executeWithHttpInfo() throws ApiException {
            return endDndWithHttpInfo(token);
        }

        /**
         * Execute endDnd request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DndEndDndResponse> _callback) throws ApiException {
            return endDndAsync(token, _callback);
        }
    }

    /**
     * 
     * Ends the current user&#39;s Do Not Disturb session immediately.
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @return EndDndRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.endDnd"> Documentation</a>
     */
    public EndDndRequestBuilder endDnd(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new EndDndRequestBuilder(token);
    }
    private okhttp3.Call endSnoozeCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dnd.endSnooze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call endSnoozeValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling endSnooze(Async)");
        }

        return endSnoozeCall(token, _callback);

    }


    private ApiResponse<DndEndSnoozeResponse> endSnoozeWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = endSnoozeValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<DndEndSnoozeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call endSnoozeAsync(String token, final ApiCallback<DndEndSnoozeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = endSnoozeValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<DndEndSnoozeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EndSnoozeRequestBuilder {
        private final String token;

        private EndSnoozeRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Build call for endSnooze
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return endSnoozeCall(token, _callback);
        }


        /**
         * Execute endSnooze request
         * @return DndEndSnoozeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public DndEndSnoozeResponse execute() throws ApiException {
            ApiResponse<DndEndSnoozeResponse> localVarResp = endSnoozeWithHttpInfo(token);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute endSnooze request with HTTP info returned
         * @return ApiResponse&lt;DndEndSnoozeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DndEndSnoozeResponse> executeWithHttpInfo() throws ApiException {
            return endSnoozeWithHttpInfo(token);
        }

        /**
         * Execute endSnooze request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DndEndSnoozeResponse> _callback) throws ApiException {
            return endSnoozeAsync(token, _callback);
        }
    }

    /**
     * 
     * Ends the current user&#39;s snooze mode immediately.
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @return EndSnoozeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.endSnooze"> Documentation</a>
     */
    public EndSnoozeRequestBuilder endSnooze(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new EndSnoozeRequestBuilder(token);
    }
    private okhttp3.Call infoCall(String token, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dnd.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoValidateBeforeCall(String token, String user, final ApiCallback _callback) throws ApiException {
        return infoCall(token, user, _callback);

    }


    private ApiResponse<DndInfoResponse> infoWithHttpInfo(String token, String user) throws ApiException {
        okhttp3.Call localVarCall = infoValidateBeforeCall(token, user, null);
        Type localVarReturnType = new TypeToken<DndInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call infoAsync(String token, String user, final ApiCallback<DndInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoValidateBeforeCall(token, user, _callback);
        Type localVarReturnType = new TypeToken<DndInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InfoRequestBuilder {
        private String token;
        private String user;

        private InfoRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;dnd:read&#x60; (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set user
         * @param user User to fetch status for (defaults to current user) (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for info
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return infoCall(token, user, _callback);
        }


        /**
         * Execute info request
         * @return DndInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public DndInfoResponse execute() throws ApiException {
            ApiResponse<DndInfoResponse> localVarResp = infoWithHttpInfo(token, user);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute info request with HTTP info returned
         * @return ApiResponse&lt;DndInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DndInfoResponse> executeWithHttpInfo() throws ApiException {
            return infoWithHttpInfo(token, user);
        }

        /**
         * Execute info request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DndInfoResponse> _callback) throws ApiException {
            return infoAsync(token, user, _callback);
        }
    }

    /**
     * 
     * Retrieves a user&#39;s current Do Not Disturb status.
     * @return InfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.info"> Documentation</a>
     */
    public InfoRequestBuilder info() throws IllegalArgumentException {
        return new InfoRequestBuilder();
    }
    private okhttp3.Call setSnoozeCall(String numMinutes, String token, DndSetSnoozeRequest dndSetSnoozeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dndSetSnoozeRequest;

        // create path and map variables
        String localVarPath = "/dnd.setSnooze";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (numMinutes != null) {
            localVarFormParams.put("num_minutes", numMinutes);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setSnoozeValidateBeforeCall(String numMinutes, String token, DndSetSnoozeRequest dndSetSnoozeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'numMinutes' is set
        if (numMinutes == null) {
            throw new ApiException("Missing the required parameter 'numMinutes' when calling setSnooze(Async)");
        }

        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setSnooze(Async)");
        }

        // verify the required parameter 'dndSetSnoozeRequest' is set
        if (dndSetSnoozeRequest == null) {
            throw new ApiException("Missing the required parameter 'dndSetSnoozeRequest' when calling setSnooze(Async)");
        }

        return setSnoozeCall(numMinutes, token, dndSetSnoozeRequest, _callback);

    }


    private ApiResponse<DndSetSnoozeResponse> setSnoozeWithHttpInfo(String numMinutes, String token, DndSetSnoozeRequest dndSetSnoozeRequest) throws ApiException {
        okhttp3.Call localVarCall = setSnoozeValidateBeforeCall(numMinutes, token, dndSetSnoozeRequest, null);
        Type localVarReturnType = new TypeToken<DndSetSnoozeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setSnoozeAsync(String numMinutes, String token, DndSetSnoozeRequest dndSetSnoozeRequest, final ApiCallback<DndSetSnoozeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setSnoozeValidateBeforeCall(numMinutes, token, dndSetSnoozeRequest, _callback);
        Type localVarReturnType = new TypeToken<DndSetSnoozeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetSnoozeRequestBuilder {
        private final String numMinutes;
        private final String token;

        private SetSnoozeRequestBuilder(String numMinutes, String token) {
            this.numMinutes = numMinutes;
            this.token = token;
        }

        /**
         * Build call for setSnooze
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DndSetSnoozeRequest dndSetSnoozeRequest = buildBodyParams();
            return setSnoozeCall(numMinutes, token, dndSetSnoozeRequest, _callback);
        }

        private DndSetSnoozeRequest buildBodyParams() {
            DndSetSnoozeRequest dndSetSnoozeRequest = new DndSetSnoozeRequest();
            dndSetSnoozeRequest.numMinutes(this.numMinutes);
            dndSetSnoozeRequest.token(this.token);
            return dndSetSnoozeRequest;
        }

        /**
         * Execute setSnooze request
         * @return DndSetSnoozeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public DndSetSnoozeResponse execute() throws ApiException {
            DndSetSnoozeRequest dndSetSnoozeRequest = buildBodyParams();
            ApiResponse<DndSetSnoozeResponse> localVarResp = setSnoozeWithHttpInfo(numMinutes, token, dndSetSnoozeRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setSnooze request with HTTP info returned
         * @return ApiResponse&lt;DndSetSnoozeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DndSetSnoozeResponse> executeWithHttpInfo() throws ApiException {
            DndSetSnoozeRequest dndSetSnoozeRequest = buildBodyParams();
            return setSnoozeWithHttpInfo(numMinutes, token, dndSetSnoozeRequest);
        }

        /**
         * Execute setSnooze request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DndSetSnoozeResponse> _callback) throws ApiException {
            DndSetSnoozeRequest dndSetSnoozeRequest = buildBodyParams();
            return setSnoozeAsync(numMinutes, token, dndSetSnoozeRequest, _callback);
        }
    }

    /**
     * 
     * Turns on Do Not Disturb mode for the current user, or changes its duration.
     * @param numMinutes Number of minutes, from now, to snooze until. (required)
     * @param token Authentication token. Requires scope: &#x60;dnd:write&#x60; (required)
     * @param dndSetSnoozeRequest  (required)
     * @return SetSnoozeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.setSnooze"> Documentation</a>
     */
    public SetSnoozeRequestBuilder setSnooze(String numMinutes, String token) throws IllegalArgumentException {
        if (numMinutes == null) throw new IllegalArgumentException("\"numMinutes\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SetSnoozeRequestBuilder(numMinutes, token);
    }
    private okhttp3.Call teamInfoCall(String token, String users, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dnd.teamInfo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (users != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("users", users));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamInfoValidateBeforeCall(String token, String users, final ApiCallback _callback) throws ApiException {
        return teamInfoCall(token, users, _callback);

    }


    private ApiResponse<DndTeamInfoResponse> teamInfoWithHttpInfo(String token, String users) throws ApiException {
        okhttp3.Call localVarCall = teamInfoValidateBeforeCall(token, users, null);
        Type localVarReturnType = new TypeToken<DndTeamInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call teamInfoAsync(String token, String users, final ApiCallback<DndTeamInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamInfoValidateBeforeCall(token, users, _callback);
        Type localVarReturnType = new TypeToken<DndTeamInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TeamInfoRequestBuilder {
        private String token;
        private String users;

        private TeamInfoRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;dnd:read&#x60; (optional)
         * @return TeamInfoRequestBuilder
         */
        public TeamInfoRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set users
         * @param users Comma-separated list of users to fetch Do Not Disturb status for (optional)
         * @return TeamInfoRequestBuilder
         */
        public TeamInfoRequestBuilder users(String users) {
            this.users = users;
            return this;
        }
        
        /**
         * Build call for teamInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return teamInfoCall(token, users, _callback);
        }


        /**
         * Execute teamInfo request
         * @return DndTeamInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public DndTeamInfoResponse execute() throws ApiException {
            ApiResponse<DndTeamInfoResponse> localVarResp = teamInfoWithHttpInfo(token, users);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute teamInfo request with HTTP info returned
         * @return ApiResponse&lt;DndTeamInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DndTeamInfoResponse> executeWithHttpInfo() throws ApiException {
            return teamInfoWithHttpInfo(token, users);
        }

        /**
         * Execute teamInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DndTeamInfoResponse> _callback) throws ApiException {
            return teamInfoAsync(token, users, _callback);
        }
    }

    /**
     * 
     * Retrieves the Do Not Disturb status for up to 50 users on a team.
     * @return TeamInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/dnd.teamInfo"> Documentation</a>
     */
    public TeamInfoRequestBuilder teamInfo() throws IllegalArgumentException {
        return new TeamInfoRequestBuilder();
    }
}
