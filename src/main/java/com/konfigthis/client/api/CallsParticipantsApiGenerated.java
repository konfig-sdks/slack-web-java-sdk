/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CallsparticipantsAddNewParticipantRequest;
import com.konfigthis.client.model.CallsparticipantsAddNewParticipantResponse;
import com.konfigthis.client.model.CallsparticipantsAddNewParticipantdefaultResponse;
import com.konfigthis.client.model.CallsparticipantsRegisterRemovedRequest;
import com.konfigthis.client.model.CallsparticipantsRegisterRemovedResponse;
import com.konfigthis.client.model.CallsparticipantsRegisterRemoveddefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CallsParticipantsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallsParticipantsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CallsParticipantsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewParticipantCall(String token, String id, String users, CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callsparticipantsAddNewParticipantRequest;

        // create path and map variables
        String localVarPath = "/calls.participants.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewParticipantValidateBeforeCall(String token, String id, String users, CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addNewParticipant(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addNewParticipant(Async)");
        }

        // verify the required parameter 'users' is set
        if (users == null) {
            throw new ApiException("Missing the required parameter 'users' when calling addNewParticipant(Async)");
        }

        // verify the required parameter 'callsparticipantsAddNewParticipantRequest' is set
        if (callsparticipantsAddNewParticipantRequest == null) {
            throw new ApiException("Missing the required parameter 'callsparticipantsAddNewParticipantRequest' when calling addNewParticipant(Async)");
        }

        return addNewParticipantCall(token, id, users, callsparticipantsAddNewParticipantRequest, _callback);

    }


    private ApiResponse<CallsparticipantsAddNewParticipantResponse> addNewParticipantWithHttpInfo(String token, String id, String users, CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest) throws ApiException {
        okhttp3.Call localVarCall = addNewParticipantValidateBeforeCall(token, id, users, callsparticipantsAddNewParticipantRequest, null);
        Type localVarReturnType = new TypeToken<CallsparticipantsAddNewParticipantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewParticipantAsync(String token, String id, String users, CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest, final ApiCallback<CallsparticipantsAddNewParticipantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewParticipantValidateBeforeCall(token, id, users, callsparticipantsAddNewParticipantRequest, _callback);
        Type localVarReturnType = new TypeToken<CallsparticipantsAddNewParticipantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewParticipantRequestBuilder {
        private final String token;
        private final String id;
        private final String users;

        private AddNewParticipantRequestBuilder(String token, String id, String users) {
            this.token = token;
            this.id = id;
            this.users = users;
        }

        /**
         * Build call for addNewParticipant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest = buildBodyParams();
            return addNewParticipantCall(token, id, users, callsparticipantsAddNewParticipantRequest, _callback);
        }

        private CallsparticipantsAddNewParticipantRequest buildBodyParams() {
            CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest = new CallsparticipantsAddNewParticipantRequest();
            callsparticipantsAddNewParticipantRequest.id(this.id);
            callsparticipantsAddNewParticipantRequest.users(this.users);
            return callsparticipantsAddNewParticipantRequest;
        }

        /**
         * Execute addNewParticipant request
         * @return CallsparticipantsAddNewParticipantResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public CallsparticipantsAddNewParticipantResponse execute() throws ApiException {
            CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest = buildBodyParams();
            ApiResponse<CallsparticipantsAddNewParticipantResponse> localVarResp = addNewParticipantWithHttpInfo(token, id, users, callsparticipantsAddNewParticipantRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewParticipant request with HTTP info returned
         * @return ApiResponse&lt;CallsparticipantsAddNewParticipantResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallsparticipantsAddNewParticipantResponse> executeWithHttpInfo() throws ApiException {
            CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest = buildBodyParams();
            return addNewParticipantWithHttpInfo(token, id, users, callsparticipantsAddNewParticipantRequest);
        }

        /**
         * Execute addNewParticipant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallsparticipantsAddNewParticipantResponse> _callback) throws ApiException {
            CallsparticipantsAddNewParticipantRequest callsparticipantsAddNewParticipantRequest = buildBodyParams();
            return addNewParticipantAsync(token, id, users, callsparticipantsAddNewParticipantRequest, _callback);
        }
    }

    /**
     * 
     * Registers new participants added to a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](https://slack.dev) method. (required)
     * @param users The list of users to add as participants in the Call. [Read more on how to specify users here](https://slack.dev). (required)
     * @param callsparticipantsAddNewParticipantRequest  (required)
     * @return AddNewParticipantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.add"> Documentation</a>
     */
    public AddNewParticipantRequestBuilder addNewParticipant(String token, String id, String users) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (users == null) throw new IllegalArgumentException("\"users\" is required but got null");
            

        return new AddNewParticipantRequestBuilder(token, id, users);
    }
    private okhttp3.Call registerRemovedCall(String token, String id, String users, CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callsparticipantsRegisterRemovedRequest;

        // create path and map variables
        String localVarPath = "/calls.participants.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (users != null) {
            localVarFormParams.put("users", users);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerRemovedValidateBeforeCall(String token, String id, String users, CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling registerRemoved(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling registerRemoved(Async)");
        }

        // verify the required parameter 'users' is set
        if (users == null) {
            throw new ApiException("Missing the required parameter 'users' when calling registerRemoved(Async)");
        }

        // verify the required parameter 'callsparticipantsRegisterRemovedRequest' is set
        if (callsparticipantsRegisterRemovedRequest == null) {
            throw new ApiException("Missing the required parameter 'callsparticipantsRegisterRemovedRequest' when calling registerRemoved(Async)");
        }

        return registerRemovedCall(token, id, users, callsparticipantsRegisterRemovedRequest, _callback);

    }


    private ApiResponse<CallsparticipantsRegisterRemovedResponse> registerRemovedWithHttpInfo(String token, String id, String users, CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest) throws ApiException {
        okhttp3.Call localVarCall = registerRemovedValidateBeforeCall(token, id, users, callsparticipantsRegisterRemovedRequest, null);
        Type localVarReturnType = new TypeToken<CallsparticipantsRegisterRemovedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registerRemovedAsync(String token, String id, String users, CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest, final ApiCallback<CallsparticipantsRegisterRemovedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerRemovedValidateBeforeCall(token, id, users, callsparticipantsRegisterRemovedRequest, _callback);
        Type localVarReturnType = new TypeToken<CallsparticipantsRegisterRemovedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegisterRemovedRequestBuilder {
        private final String token;
        private final String id;
        private final String users;

        private RegisterRemovedRequestBuilder(String token, String id, String users) {
            this.token = token;
            this.id = id;
            this.users = users;
        }

        /**
         * Build call for registerRemoved
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest = buildBodyParams();
            return registerRemovedCall(token, id, users, callsparticipantsRegisterRemovedRequest, _callback);
        }

        private CallsparticipantsRegisterRemovedRequest buildBodyParams() {
            CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest = new CallsparticipantsRegisterRemovedRequest();
            callsparticipantsRegisterRemovedRequest.id(this.id);
            callsparticipantsRegisterRemovedRequest.users(this.users);
            return callsparticipantsRegisterRemovedRequest;
        }

        /**
         * Execute registerRemoved request
         * @return CallsparticipantsRegisterRemovedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public CallsparticipantsRegisterRemovedResponse execute() throws ApiException {
            CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest = buildBodyParams();
            ApiResponse<CallsparticipantsRegisterRemovedResponse> localVarResp = registerRemovedWithHttpInfo(token, id, users, callsparticipantsRegisterRemovedRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registerRemoved request with HTTP info returned
         * @return ApiResponse&lt;CallsparticipantsRegisterRemovedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallsparticipantsRegisterRemovedResponse> executeWithHttpInfo() throws ApiException {
            CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest = buildBodyParams();
            return registerRemovedWithHttpInfo(token, id, users, callsparticipantsRegisterRemovedRequest);
        }

        /**
         * Execute registerRemoved request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallsparticipantsRegisterRemovedResponse> _callback) throws ApiException {
            CallsparticipantsRegisterRemovedRequest callsparticipantsRegisterRemovedRequest = buildBodyParams();
            return registerRemovedAsync(token, id, users, callsparticipantsRegisterRemovedRequest, _callback);
        }
    }

    /**
     * 
     * Registers participants removed from a Call.
     * @param token Authentication token. Requires scope: &#x60;calls:write&#x60; (required)
     * @param id &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](https://slack.dev) method. (required)
     * @param users The list of users to remove as participants in the Call. [Read more on how to specify users here](https://slack.dev). (required)
     * @param callsparticipantsRegisterRemovedRequest  (required)
     * @return RegisterRemovedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/calls.participants.remove"> Documentation</a>
     */
    public RegisterRemovedRequestBuilder registerRemoved(String token, String id, String users) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (users == null) throw new IllegalArgumentException("\"users\" is required but got null");
            

        return new RegisterRemovedRequestBuilder(token, id, users);
    }
}
