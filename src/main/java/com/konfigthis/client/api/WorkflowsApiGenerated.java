/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.WorkflowsStepCompletedResponse;
import com.konfigthis.client.model.WorkflowsStepCompleteddefaultResponse;
import com.konfigthis.client.model.WorkflowsStepFailedResponse;
import com.konfigthis.client.model.WorkflowsStepFaileddefaultResponse;
import com.konfigthis.client.model.WorkflowsUpdateStepResponse;
import com.konfigthis.client.model.WorkflowsUpdateStepdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WorkflowsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call stepCompletedCall(String token, String workflowStepExecuteId, String outputs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows.stepCompleted";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowStepExecuteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow_step_execute_id", workflowStepExecuteId));
        }

        if (outputs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputs", outputs));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stepCompletedValidateBeforeCall(String token, String workflowStepExecuteId, String outputs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling stepCompleted(Async)");
        }

        // verify the required parameter 'workflowStepExecuteId' is set
        if (workflowStepExecuteId == null) {
            throw new ApiException("Missing the required parameter 'workflowStepExecuteId' when calling stepCompleted(Async)");
        }

        return stepCompletedCall(token, workflowStepExecuteId, outputs, _callback);

    }


    private ApiResponse<WorkflowsStepCompletedResponse> stepCompletedWithHttpInfo(String token, String workflowStepExecuteId, String outputs) throws ApiException {
        okhttp3.Call localVarCall = stepCompletedValidateBeforeCall(token, workflowStepExecuteId, outputs, null);
        Type localVarReturnType = new TypeToken<WorkflowsStepCompletedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call stepCompletedAsync(String token, String workflowStepExecuteId, String outputs, final ApiCallback<WorkflowsStepCompletedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stepCompletedValidateBeforeCall(token, workflowStepExecuteId, outputs, _callback);
        Type localVarReturnType = new TypeToken<WorkflowsStepCompletedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StepCompletedRequestBuilder {
        private final String token;
        private final String workflowStepExecuteId;
        private String outputs;

        private StepCompletedRequestBuilder(String token, String workflowStepExecuteId) {
            this.token = token;
            this.workflowStepExecuteId = workflowStepExecuteId;
        }

        /**
         * Set outputs
         * @param outputs Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](https://slack.dev) array from your &#x60;workflow_step&#x60; object. (optional)
         * @return StepCompletedRequestBuilder
         */
        public StepCompletedRequestBuilder outputs(String outputs) {
            this.outputs = outputs;
            return this;
        }
        
        /**
         * Build call for stepCompleted
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return stepCompletedCall(token, workflowStepExecuteId, outputs, _callback);
        }


        /**
         * Execute stepCompleted request
         * @return WorkflowsStepCompletedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowsStepCompletedResponse execute() throws ApiException {
            ApiResponse<WorkflowsStepCompletedResponse> localVarResp = stepCompletedWithHttpInfo(token, workflowStepExecuteId, outputs);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute stepCompleted request with HTTP info returned
         * @return ApiResponse&lt;WorkflowsStepCompletedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowsStepCompletedResponse> executeWithHttpInfo() throws ApiException {
            return stepCompletedWithHttpInfo(token, workflowStepExecuteId, outputs);
        }

        /**
         * Execute stepCompleted request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowsStepCompletedResponse> _callback) throws ApiException {
            return stepCompletedAsync(token, workflowStepExecuteId, outputs, _callback);
        }
    }

    /**
     * 
     * Indicate that an app&#39;s step in a workflow completed execution.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution. (required)
     * @return StepCompletedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.stepCompleted"> Documentation</a>
     */
    public StepCompletedRequestBuilder stepCompleted(String token, String workflowStepExecuteId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (workflowStepExecuteId == null) throw new IllegalArgumentException("\"workflowStepExecuteId\" is required but got null");
            

        return new StepCompletedRequestBuilder(token, workflowStepExecuteId);
    }
    private okhttp3.Call stepFailedCall(String token, String workflowStepExecuteId, String error, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows.stepFailed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowStepExecuteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow_step_execute_id", workflowStepExecuteId));
        }

        if (error != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("error", error));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call stepFailedValidateBeforeCall(String token, String workflowStepExecuteId, String error, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling stepFailed(Async)");
        }

        // verify the required parameter 'workflowStepExecuteId' is set
        if (workflowStepExecuteId == null) {
            throw new ApiException("Missing the required parameter 'workflowStepExecuteId' when calling stepFailed(Async)");
        }

        // verify the required parameter 'error' is set
        if (error == null) {
            throw new ApiException("Missing the required parameter 'error' when calling stepFailed(Async)");
        }

        return stepFailedCall(token, workflowStepExecuteId, error, _callback);

    }


    private ApiResponse<WorkflowsStepFailedResponse> stepFailedWithHttpInfo(String token, String workflowStepExecuteId, String error) throws ApiException {
        okhttp3.Call localVarCall = stepFailedValidateBeforeCall(token, workflowStepExecuteId, error, null);
        Type localVarReturnType = new TypeToken<WorkflowsStepFailedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call stepFailedAsync(String token, String workflowStepExecuteId, String error, final ApiCallback<WorkflowsStepFailedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = stepFailedValidateBeforeCall(token, workflowStepExecuteId, error, _callback);
        Type localVarReturnType = new TypeToken<WorkflowsStepFailedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class StepFailedRequestBuilder {
        private final String token;
        private final String workflowStepExecuteId;
        private final String error;

        private StepFailedRequestBuilder(String token, String workflowStepExecuteId, String error) {
            this.token = token;
            this.workflowStepExecuteId = workflowStepExecuteId;
            this.error = error;
        }

        /**
         * Build call for stepFailed
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return stepFailedCall(token, workflowStepExecuteId, error, _callback);
        }


        /**
         * Execute stepFailed request
         * @return WorkflowsStepFailedResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowsStepFailedResponse execute() throws ApiException {
            ApiResponse<WorkflowsStepFailedResponse> localVarResp = stepFailedWithHttpInfo(token, workflowStepExecuteId, error);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute stepFailed request with HTTP info returned
         * @return ApiResponse&lt;WorkflowsStepFailedResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowsStepFailedResponse> executeWithHttpInfo() throws ApiException {
            return stepFailedWithHttpInfo(token, workflowStepExecuteId, error);
        }

        /**
         * Execute stepFailed request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowsStepFailedResponse> _callback) throws ApiException {
            return stepFailedAsync(token, workflowStepExecuteId, error, _callback);
        }
    }

    /**
     * 
     * Indicate that an app&#39;s step in a workflow failed to execute.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution. (required)
     * @param error A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message. (required)
     * @return StepFailedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.stepFailed"> Documentation</a>
     */
    public StepFailedRequestBuilder stepFailed(String token, String workflowStepExecuteId, String error) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (workflowStepExecuteId == null) throw new IllegalArgumentException("\"workflowStepExecuteId\" is required but got null");
            

        if (error == null) throw new IllegalArgumentException("\"error\" is required but got null");
            

        return new StepFailedRequestBuilder(token, workflowStepExecuteId, error);
    }
    private okhttp3.Call updateStepCall(String token, String workflowStepEditId, String inputs, String outputs, String stepName, String stepImageUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workflows.updateStep";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workflowStepEditId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workflow_step_edit_id", workflowStepEditId));
        }

        if (inputs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inputs", inputs));
        }

        if (outputs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputs", outputs));
        }

        if (stepName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("step_name", stepName));
        }

        if (stepImageUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("step_image_url", stepImageUrl));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateStepValidateBeforeCall(String token, String workflowStepEditId, String inputs, String outputs, String stepName, String stepImageUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling updateStep(Async)");
        }

        // verify the required parameter 'workflowStepEditId' is set
        if (workflowStepEditId == null) {
            throw new ApiException("Missing the required parameter 'workflowStepEditId' when calling updateStep(Async)");
        }

        return updateStepCall(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl, _callback);

    }


    private ApiResponse<WorkflowsUpdateStepResponse> updateStepWithHttpInfo(String token, String workflowStepEditId, String inputs, String outputs, String stepName, String stepImageUrl) throws ApiException {
        okhttp3.Call localVarCall = updateStepValidateBeforeCall(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl, null);
        Type localVarReturnType = new TypeToken<WorkflowsUpdateStepResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateStepAsync(String token, String workflowStepEditId, String inputs, String outputs, String stepName, String stepImageUrl, final ApiCallback<WorkflowsUpdateStepResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateStepValidateBeforeCall(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl, _callback);
        Type localVarReturnType = new TypeToken<WorkflowsUpdateStepResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateStepRequestBuilder {
        private final String token;
        private final String workflowStepEditId;
        private String inputs;
        private String outputs;
        private String stepName;
        private String stepImageUrl;

        private UpdateStepRequestBuilder(String token, String workflowStepEditId) {
            this.token = token;
            this.workflowStepEditId = workflowStepEditId;
        }

        /**
         * Set inputs
         * @param inputs A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](https://slack.dev). (optional)
         * @return UpdateStepRequestBuilder
         */
        public UpdateStepRequestBuilder inputs(String inputs) {
            this.inputs = inputs;
            return this;
        }
        
        /**
         * Set outputs
         * @param outputs An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. (optional)
         * @return UpdateStepRequestBuilder
         */
        public UpdateStepRequestBuilder outputs(String outputs) {
            this.outputs = outputs;
            return this;
        }
        
        /**
         * Set stepName
         * @param stepName An optional field that can be used to override the step name that is shown in the Workflow Builder. (optional)
         * @return UpdateStepRequestBuilder
         */
        public UpdateStepRequestBuilder stepName(String stepName) {
            this.stepName = stepName;
            return this;
        }
        
        /**
         * Set stepImageUrl
         * @param stepImageUrl An optional field that can be used to override app image that is shown in the Workflow Builder. (optional)
         * @return UpdateStepRequestBuilder
         */
        public UpdateStepRequestBuilder stepImageUrl(String stepImageUrl) {
            this.stepImageUrl = stepImageUrl;
            return this;
        }
        
        /**
         * Build call for updateStep
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateStepCall(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl, _callback);
        }


        /**
         * Execute updateStep request
         * @return WorkflowsUpdateStepResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public WorkflowsUpdateStepResponse execute() throws ApiException {
            ApiResponse<WorkflowsUpdateStepResponse> localVarResp = updateStepWithHttpInfo(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateStep request with HTTP info returned
         * @return ApiResponse&lt;WorkflowsUpdateStepResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkflowsUpdateStepResponse> executeWithHttpInfo() throws ApiException {
            return updateStepWithHttpInfo(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl);
        }

        /**
         * Execute updateStep request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkflowsUpdateStepResponse> _callback) throws ApiException {
            return updateStepAsync(token, workflowStepEditId, inputs, outputs, stepName, stepImageUrl, _callback);
        }
    }

    /**
     * 
     * Update the configuration for a workflow extension step.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60; (required)
     * @param workflowStepEditId A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;. (required)
     * @return UpdateStepRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/workflows.updateStep"> Documentation</a>
     */
    public UpdateStepRequestBuilder updateStep(String token, String workflowStepEditId) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        if (workflowStepEditId == null) throw new IllegalArgumentException("\"workflowStepEditId\" is required but got null");
            

        return new UpdateStepRequestBuilder(token, workflowStepEditId);
    }
}
