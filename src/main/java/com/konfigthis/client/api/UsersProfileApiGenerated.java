/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.UsersprofileGetProfileInfoResponse;
import com.konfigthis.client.model.UsersprofileGetProfileInfodefaultResponse;
import com.konfigthis.client.model.UsersprofileSetProfileInfoRequest;
import com.konfigthis.client.model.UsersprofileSetProfileInfoResponse;
import com.konfigthis.client.model.UsersprofileSetProfileInfodefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsersProfileApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersProfileApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsersProfileApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getProfileInfoCall(String token, Boolean includeLabels, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users.profile.get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (includeLabels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_labels", includeLabels));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProfileInfoValidateBeforeCall(String token, Boolean includeLabels, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getProfileInfo(Async)");
        }

        return getProfileInfoCall(token, includeLabels, user, _callback);

    }


    private ApiResponse<UsersprofileGetProfileInfoResponse> getProfileInfoWithHttpInfo(String token, Boolean includeLabels, String user) throws ApiException {
        okhttp3.Call localVarCall = getProfileInfoValidateBeforeCall(token, includeLabels, user, null);
        Type localVarReturnType = new TypeToken<UsersprofileGetProfileInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProfileInfoAsync(String token, Boolean includeLabels, String user, final ApiCallback<UsersprofileGetProfileInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProfileInfoValidateBeforeCall(token, includeLabels, user, _callback);
        Type localVarReturnType = new TypeToken<UsersprofileGetProfileInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProfileInfoRequestBuilder {
        private final String token;
        private Boolean includeLabels;
        private String user;

        private GetProfileInfoRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set includeLabels
         * @param includeLabels Include labels for each ID in custom profile fields (optional)
         * @return GetProfileInfoRequestBuilder
         */
        public GetProfileInfoRequestBuilder includeLabels(Boolean includeLabels) {
            this.includeLabels = includeLabels;
            return this;
        }
        
        /**
         * Set user
         * @param user User to retrieve profile info for (optional)
         * @return GetProfileInfoRequestBuilder
         */
        public GetProfileInfoRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Build call for getProfileInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProfileInfoCall(token, includeLabels, user, _callback);
        }


        /**
         * Execute getProfileInfo request
         * @return UsersprofileGetProfileInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersprofileGetProfileInfoResponse execute() throws ApiException {
            ApiResponse<UsersprofileGetProfileInfoResponse> localVarResp = getProfileInfoWithHttpInfo(token, includeLabels, user);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProfileInfo request with HTTP info returned
         * @return ApiResponse&lt;UsersprofileGetProfileInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersprofileGetProfileInfoResponse> executeWithHttpInfo() throws ApiException {
            return getProfileInfoWithHttpInfo(token, includeLabels, user);
        }

        /**
         * Execute getProfileInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersprofileGetProfileInfoResponse> _callback) throws ApiException {
            return getProfileInfoAsync(token, includeLabels, user, _callback);
        }
    }

    /**
     * 
     * Retrieves a user&#39;s profile information.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60; (required)
     * @return GetProfileInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.get"> Documentation</a>
     */
    public GetProfileInfoRequestBuilder getProfileInfo(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new GetProfileInfoRequestBuilder(token);
    }
    private okhttp3.Call setProfileInfoCall(String token, String name, String profile, String user, String value, UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = usersprofileSetProfileInfoRequest;

        // create path and map variables
        String localVarPath = "/users.profile.set";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (profile != null) {
            localVarFormParams.put("profile", profile);
        }

        if (user != null) {
            localVarFormParams.put("user", user);
        }

        if (value != null) {
            localVarFormParams.put("value", value);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setProfileInfoValidateBeforeCall(String token, String name, String profile, String user, String value, UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling setProfileInfo(Async)");
        }

        return setProfileInfoCall(token, name, profile, user, value, usersprofileSetProfileInfoRequest, _callback);

    }


    private ApiResponse<UsersprofileSetProfileInfoResponse> setProfileInfoWithHttpInfo(String token, String name, String profile, String user, String value, UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = setProfileInfoValidateBeforeCall(token, name, profile, user, value, usersprofileSetProfileInfoRequest, null);
        Type localVarReturnType = new TypeToken<UsersprofileSetProfileInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setProfileInfoAsync(String token, String name, String profile, String user, String value, UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest, final ApiCallback<UsersprofileSetProfileInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setProfileInfoValidateBeforeCall(token, name, profile, user, value, usersprofileSetProfileInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<UsersprofileSetProfileInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SetProfileInfoRequestBuilder {
        private final String token;
        private String name;
        private String profile;
        private String user;
        private String value;

        private SetProfileInfoRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set name
         * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
         * @return SetProfileInfoRequestBuilder
         */
        public SetProfileInfoRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set profile
         * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
         * @return SetProfileInfoRequestBuilder
         */
        public SetProfileInfoRequestBuilder profile(String profile) {
            this.profile = profile;
            return this;
        }
        
        /**
         * Set user
         * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
         * @return SetProfileInfoRequestBuilder
         */
        public SetProfileInfoRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set value
         * @param value Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
         * @return SetProfileInfoRequestBuilder
         */
        public SetProfileInfoRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Build call for setProfileInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest = buildBodyParams();
            return setProfileInfoCall(token, name, profile, user, value, usersprofileSetProfileInfoRequest, _callback);
        }

        private UsersprofileSetProfileInfoRequest buildBodyParams() {
            UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest = new UsersprofileSetProfileInfoRequest();
            usersprofileSetProfileInfoRequest.name(this.name);
            usersprofileSetProfileInfoRequest.profile(this.profile);
            usersprofileSetProfileInfoRequest.user(this.user);
            usersprofileSetProfileInfoRequest.value(this.value);
            return usersprofileSetProfileInfoRequest;
        }

        /**
         * Execute setProfileInfo request
         * @return UsersprofileSetProfileInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public UsersprofileSetProfileInfoResponse execute() throws ApiException {
            UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest = buildBodyParams();
            ApiResponse<UsersprofileSetProfileInfoResponse> localVarResp = setProfileInfoWithHttpInfo(token, name, profile, user, value, usersprofileSetProfileInfoRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute setProfileInfo request with HTTP info returned
         * @return ApiResponse&lt;UsersprofileSetProfileInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UsersprofileSetProfileInfoResponse> executeWithHttpInfo() throws ApiException {
            UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest = buildBodyParams();
            return setProfileInfoWithHttpInfo(token, name, profile, user, value, usersprofileSetProfileInfoRequest);
        }

        /**
         * Execute setProfileInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UsersprofileSetProfileInfoResponse> _callback) throws ApiException {
            UsersprofileSetProfileInfoRequest usersprofileSetProfileInfoRequest = buildBodyParams();
            return setProfileInfoAsync(token, name, profile, user, value, usersprofileSetProfileInfoRequest, _callback);
        }
    }

    /**
     * 
     * Set the profile information for a user.
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60; (required)
     * @return SetProfileInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/users.profile.set"> Documentation</a>
     */
    public SetProfileInfoRequestBuilder setProfileInfo(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new SetProfileInfoRequestBuilder(token);
    }
}
