/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdmininviteRequestsApproveRequestRequest;
import com.konfigthis.client.model.AdmininviteRequestsApproveRequestResponse;
import com.konfigthis.client.model.AdmininviteRequestsApproveRequestdefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsDenyRequestResponse;
import com.konfigthis.client.model.AdmininviteRequestsDenyRequestdefaultResponse;
import com.konfigthis.client.model.AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse;
import com.konfigthis.client.model.AdmininviteRequestsListPendingWorkspaceInviteRequestsdefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AdminInviteRequestsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AdminInviteRequestsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AdminInviteRequestsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call approveRequestCall(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = admininviteRequestsApproveRequestRequest;

        // create path and map variables
        String localVarPath = "/admin.inviteRequests.approve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call approveRequestValidateBeforeCall(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling approveRequest(Async)");
        }

        return approveRequestCall(token, admininviteRequestsApproveRequestRequest, _callback);

    }


    private ApiResponse<AdmininviteRequestsApproveRequestResponse> approveRequestWithHttpInfo(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = approveRequestValidateBeforeCall(token, admininviteRequestsApproveRequestRequest, null);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsApproveRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call approveRequestAsync(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback<AdmininviteRequestsApproveRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = approveRequestValidateBeforeCall(token, admininviteRequestsApproveRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsApproveRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ApproveRequestRequestBuilder {
        private final String inviteRequestId;
        private final String token;
        private String teamId;

        private ApproveRequestRequestBuilder(String inviteRequestId, String token) {
            this.inviteRequestId = inviteRequestId;
            this.token = token;
        }

        /**
         * Set teamId
         * @param teamId ID for the workspace where the invite request was made. (optional)
         * @return ApproveRequestRequestBuilder
         */
        public ApproveRequestRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for approveRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return approveRequestCall(token, admininviteRequestsApproveRequestRequest, _callback);
        }

        private AdmininviteRequestsApproveRequestRequest buildBodyParams() {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = new AdmininviteRequestsApproveRequestRequest();
            admininviteRequestsApproveRequestRequest.inviteRequestId(this.inviteRequestId);
            admininviteRequestsApproveRequestRequest.teamId(this.teamId);
            return admininviteRequestsApproveRequestRequest;
        }

        /**
         * Execute approveRequest request
         * @return AdmininviteRequestsApproveRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdmininviteRequestsApproveRequestResponse execute() throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            ApiResponse<AdmininviteRequestsApproveRequestResponse> localVarResp = approveRequestWithHttpInfo(token, admininviteRequestsApproveRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute approveRequest request with HTTP info returned
         * @return ApiResponse&lt;AdmininviteRequestsApproveRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdmininviteRequestsApproveRequestResponse> executeWithHttpInfo() throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return approveRequestWithHttpInfo(token, admininviteRequestsApproveRequestRequest);
        }

        /**
         * Execute approveRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdmininviteRequestsApproveRequestResponse> _callback) throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return approveRequestAsync(token, admininviteRequestsApproveRequestRequest, _callback);
        }
    }

    /**
     * 
     * Approve a workspace invite request.
     * @param token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @return ApproveRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.inviteRequests.approve"> Documentation</a>
     */
    public ApproveRequestRequestBuilder approveRequest(String inviteRequestId, String token) throws IllegalArgumentException {
        if (inviteRequestId == null) throw new IllegalArgumentException("\"inviteRequestId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ApproveRequestRequestBuilder(inviteRequestId, token);
    }
    private okhttp3.Call denyRequestCall(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = admininviteRequestsApproveRequestRequest;

        // create path and map variables
        String localVarPath = "/admin.inviteRequests.deny";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denyRequestValidateBeforeCall(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling denyRequest(Async)");
        }

        return denyRequestCall(token, admininviteRequestsApproveRequestRequest, _callback);

    }


    private ApiResponse<AdmininviteRequestsDenyRequestResponse> denyRequestWithHttpInfo(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = denyRequestValidateBeforeCall(token, admininviteRequestsApproveRequestRequest, null);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsDenyRequestResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call denyRequestAsync(String token, AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest, final ApiCallback<AdmininviteRequestsDenyRequestResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = denyRequestValidateBeforeCall(token, admininviteRequestsApproveRequestRequest, _callback);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsDenyRequestResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DenyRequestRequestBuilder {
        private final String inviteRequestId;
        private final String token;
        private String teamId;

        private DenyRequestRequestBuilder(String inviteRequestId, String token) {
            this.inviteRequestId = inviteRequestId;
            this.token = token;
        }

        /**
         * Set teamId
         * @param teamId ID for the workspace where the invite request was made. (optional)
         * @return DenyRequestRequestBuilder
         */
        public DenyRequestRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Build call for denyRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return denyRequestCall(token, admininviteRequestsApproveRequestRequest, _callback);
        }

        private AdmininviteRequestsApproveRequestRequest buildBodyParams() {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = new AdmininviteRequestsApproveRequestRequest();
            admininviteRequestsApproveRequestRequest.inviteRequestId(this.inviteRequestId);
            admininviteRequestsApproveRequestRequest.teamId(this.teamId);
            return admininviteRequestsApproveRequestRequest;
        }

        /**
         * Execute denyRequest request
         * @return AdmininviteRequestsDenyRequestResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdmininviteRequestsDenyRequestResponse execute() throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            ApiResponse<AdmininviteRequestsDenyRequestResponse> localVarResp = denyRequestWithHttpInfo(token, admininviteRequestsApproveRequestRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute denyRequest request with HTTP info returned
         * @return ApiResponse&lt;AdmininviteRequestsDenyRequestResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdmininviteRequestsDenyRequestResponse> executeWithHttpInfo() throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return denyRequestWithHttpInfo(token, admininviteRequestsApproveRequestRequest);
        }

        /**
         * Execute denyRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdmininviteRequestsDenyRequestResponse> _callback) throws ApiException {
            AdmininviteRequestsApproveRequestRequest admininviteRequestsApproveRequestRequest = buildBodyParams();
            return denyRequestAsync(token, admininviteRequestsApproveRequestRequest, _callback);
        }
    }

    /**
     * 
     * Deny a workspace invite request.
     * @param token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @return DenyRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.inviteRequests.deny"> Documentation</a>
     */
    public DenyRequestRequestBuilder denyRequest(String inviteRequestId, String token) throws IllegalArgumentException {
        if (inviteRequestId == null) throw new IllegalArgumentException("\"inviteRequestId\" is required but got null");
            

        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new DenyRequestRequestBuilder(inviteRequestId, token);
    }
    private okhttp3.Call listPendingWorkspaceInviteRequestsCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/admin.inviteRequests.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (teamId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_id", teamId));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPendingWorkspaceInviteRequestsValidateBeforeCall(String token, String teamId, String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling listPendingWorkspaceInviteRequests(Async)");
        }

        return listPendingWorkspaceInviteRequestsCall(token, teamId, cursor, limit, _callback);

    }


    private ApiResponse<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> listPendingWorkspaceInviteRequestsWithHttpInfo(String token, String teamId, String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listPendingWorkspaceInviteRequestsValidateBeforeCall(token, teamId, cursor, limit, null);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPendingWorkspaceInviteRequestsAsync(String token, String teamId, String cursor, Integer limit, final ApiCallback<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPendingWorkspaceInviteRequestsValidateBeforeCall(token, teamId, cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPendingWorkspaceInviteRequestsRequestBuilder {
        private final String token;
        private String teamId;
        private String cursor;
        private Integer limit;

        private ListPendingWorkspaceInviteRequestsRequestBuilder(String token) {
            this.token = token;
        }

        /**
         * Set teamId
         * @param teamId ID for the workspace where the invite requests were made. (optional)
         * @return ListPendingWorkspaceInviteRequestsRequestBuilder
         */
        public ListPendingWorkspaceInviteRequestsRequestBuilder teamId(String teamId) {
            this.teamId = teamId;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
         * @return ListPendingWorkspaceInviteRequestsRequestBuilder
         */
        public ListPendingWorkspaceInviteRequestsRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
         * @return ListPendingWorkspaceInviteRequestsRequestBuilder
         */
        public ListPendingWorkspaceInviteRequestsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listPendingWorkspaceInviteRequests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPendingWorkspaceInviteRequestsCall(token, teamId, cursor, limit, _callback);
        }


        /**
         * Execute listPendingWorkspaceInviteRequests request
         * @return AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse execute() throws ApiException {
            ApiResponse<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> localVarResp = listPendingWorkspaceInviteRequestsWithHttpInfo(token, teamId, cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPendingWorkspaceInviteRequests request with HTTP info returned
         * @return ApiResponse&lt;AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> executeWithHttpInfo() throws ApiException {
            return listPendingWorkspaceInviteRequestsWithHttpInfo(token, teamId, cursor, limit);
        }

        /**
         * Execute listPendingWorkspaceInviteRequests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AdmininviteRequestsListPendingWorkspaceInviteRequestsResponse> _callback) throws ApiException {
            return listPendingWorkspaceInviteRequestsAsync(token, teamId, cursor, limit, _callback);
        }
    }

    /**
     * 
     * List all pending workspace invite requests.
     * @param token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @return ListPendingWorkspaceInviteRequestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/admin.inviteRequests.list"> Documentation</a>
     */
    public ListPendingWorkspaceInviteRequestsRequestBuilder listPendingWorkspaceInviteRequests(String token) throws IllegalArgumentException {
        if (token == null) throw new IllegalArgumentException("\"token\" is required but got null");
            

        return new ListPendingWorkspaceInviteRequestsRequestBuilder(token);
    }
}
