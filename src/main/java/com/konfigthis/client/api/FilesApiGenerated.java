/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.FilesDeleteRequest;
import com.konfigthis.client.model.FilesDeleteResponse;
import com.konfigthis.client.model.FilesDeletedefaultResponse;
import com.konfigthis.client.model.FilesInfoResponse;
import com.konfigthis.client.model.FilesInfodefaultResponse;
import com.konfigthis.client.model.FilesListResponse;
import com.konfigthis.client.model.FilesListdefaultResponse;
import com.konfigthis.client.model.FilesRevokePublicUrlRequest;
import com.konfigthis.client.model.FilesRevokePublicUrlResponse;
import com.konfigthis.client.model.FilesRevokePublicUrldefaultResponse;
import com.konfigthis.client.model.FilesSharedPublicUrlRequest;
import com.konfigthis.client.model.FilesSharedPublicUrlResponse;
import com.konfigthis.client.model.FilesSharedPublicUrldefaultResponse;
import com.konfigthis.client.model.FilesUploadRequest;
import com.konfigthis.client.model.FilesUploadResponse;
import com.konfigthis.client.model.FilesUploaddefaultResponse;
import com.konfigthis.client.model.FilescommentsDeleteCommentRequest;
import com.konfigthis.client.model.FilescommentsDeleteCommentResponse;
import com.konfigthis.client.model.FilescommentsDeleteCommentdefaultResponse;
import com.konfigthis.client.model.FilesremoteAddFromRemoteRequest;
import com.konfigthis.client.model.FilesremoteAddFromRemoteResponse;
import com.konfigthis.client.model.FilesremoteAddFromRemotedefaultResponse;
import com.konfigthis.client.model.FilesremoteDeleteFileRequest;
import com.konfigthis.client.model.FilesremoteDeleteFileResponse;
import com.konfigthis.client.model.FilesremoteDeleteFiledefaultResponse;
import com.konfigthis.client.model.FilesremoteGetInfoResponse;
import com.konfigthis.client.model.FilesremoteGetInfodefaultResponse;
import com.konfigthis.client.model.FilesremoteListRemoteFilesResponse;
import com.konfigthis.client.model.FilesremoteListRemoteFilesdefaultResponse;
import com.konfigthis.client.model.FilesremoteShareRemoteFileResponse;
import com.konfigthis.client.model.FilesremoteShareRemoteFiledefaultResponse;
import com.konfigthis.client.model.FilesremoteUpdateRemoteFileRequest;
import com.konfigthis.client.model.FilesremoteUpdateRemoteFileResponse;
import com.konfigthis.client.model.FilesremoteUpdateRemoteFiledefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class FilesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FilesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public FilesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addFromRemoteCall(String title, String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String token, FilesremoteAddFromRemoteRequest filesremoteAddFromRemoteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesremoteAddFromRemoteRequest;

        // create path and map variables
        String localVarPath = "/files.remote.add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (externalId != null) {
            localVarFormParams.put("external_id", externalId);
        }

        if (externalUrl != null) {
            localVarFormParams.put("external_url", externalUrl);
        }

        if (filetype != null) {
            localVarFormParams.put("filetype", filetype);
        }

        if (indexableFileContents != null) {
            localVarFormParams.put("indexable_file_contents", indexableFileContents);
        }

        if (previewImage != null) {
            localVarFormParams.put("preview_image", previewImage);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFromRemoteValidateBeforeCall(String title, String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String token, FilesremoteAddFromRemoteRequest filesremoteAddFromRemoteRequest, final ApiCallback _callback) throws ApiException {
        return addFromRemoteCall(title, externalId, externalUrl, filetype, indexableFileContents, previewImage, token, filesremoteAddFromRemoteRequest, _callback);

    }


    private ApiResponse<FilesremoteAddFromRemoteResponse> addFromRemoteWithHttpInfo(String title, String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String token, FilesremoteAddFromRemoteRequest filesremoteAddFromRemoteRequest) throws ApiException {
        okhttp3.Call localVarCall = addFromRemoteValidateBeforeCall(title, externalId, externalUrl, filetype, indexableFileContents, previewImage, token, filesremoteAddFromRemoteRequest, null);
        Type localVarReturnType = new TypeToken<FilesremoteAddFromRemoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addFromRemoteAsync(String title, String externalId, String externalUrl, String filetype, String indexableFileContents, String previewImage, String token, FilesremoteAddFromRemoteRequest filesremoteAddFromRemoteRequest, final ApiCallback<FilesremoteAddFromRemoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFromRemoteValidateBeforeCall(title, externalId, externalUrl, filetype, indexableFileContents, previewImage, token, filesremoteAddFromRemoteRequest, _callback);
        Type localVarReturnType = new TypeToken<FilesremoteAddFromRemoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddFromRemoteRequestBuilder {
        private String title;
        private String externalId;
        private String externalUrl;
        private String filetype;
        private String indexableFileContents;
        private String previewImage;
        private String token;

        private AddFromRemoteRequestBuilder() {
        }

        /**
         * Set title
         * @param title Title of the file being shared. (optional)
         * @return AddFromRemoteRequestBuilder
         */
        public AddFromRemoteRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId Creator defined GUID for the file. (optional)
         * @return AddFromRemoteRequestBuilder
         */
        public AddFromRemoteRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set externalUrl
         * @param externalUrl URL of the remote file. (optional)
         * @return AddFromRemoteRequestBuilder
         */
        public AddFromRemoteRequestBuilder externalUrl(String externalUrl) {
            this.externalUrl = externalUrl;
            return this;
        }
        
        /**
         * Set filetype
         * @param filetype type of file (optional)
         * @return AddFromRemoteRequestBuilder
         */
        public AddFromRemoteRequestBuilder filetype(String filetype) {
            this.filetype = filetype;
            return this;
        }
        
        /**
         * Set indexableFileContents
         * @param indexableFileContents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
         * @return AddFromRemoteRequestBuilder
         */
        public AddFromRemoteRequestBuilder indexableFileContents(String indexableFileContents) {
            this.indexableFileContents = indexableFileContents;
            return this;
        }
        
        /**
         * Set previewImage
         * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
         * @return AddFromRemoteRequestBuilder
         */
        public AddFromRemoteRequestBuilder previewImage(String previewImage) {
            this.previewImage = previewImage;
            return this;
        }
        
        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
         * @return AddFromRemoteRequestBuilder
         */
        public AddFromRemoteRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Build call for addFromRemote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesremoteAddFromRemoteRequest filesremoteAddFromRemoteRequest = buildBodyParams();
            return addFromRemoteCall(title, externalId, externalUrl, filetype, indexableFileContents, previewImage, token, filesremoteAddFromRemoteRequest, _callback);
        }

        private FilesremoteAddFromRemoteRequest buildBodyParams() {
            FilesremoteAddFromRemoteRequest filesremoteAddFromRemoteRequest = new FilesremoteAddFromRemoteRequest();
            filesremoteAddFromRemoteRequest.title(this.title);
            filesremoteAddFromRemoteRequest.externalId(this.externalId);
            filesremoteAddFromRemoteRequest.externalUrl(this.externalUrl);
            filesremoteAddFromRemoteRequest.filetype(this.filetype);
            filesremoteAddFromRemoteRequest.indexableFileContents(this.indexableFileContents);
            filesremoteAddFromRemoteRequest.previewImage(this.previewImage);
            filesremoteAddFromRemoteRequest.token(this.token);
            return filesremoteAddFromRemoteRequest;
        }

        /**
         * Execute addFromRemote request
         * @return FilesremoteAddFromRemoteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesremoteAddFromRemoteResponse execute() throws ApiException {
            FilesremoteAddFromRemoteRequest filesremoteAddFromRemoteRequest = buildBodyParams();
            ApiResponse<FilesremoteAddFromRemoteResponse> localVarResp = addFromRemoteWithHttpInfo(title, externalId, externalUrl, filetype, indexableFileContents, previewImage, token, filesremoteAddFromRemoteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addFromRemote request with HTTP info returned
         * @return ApiResponse&lt;FilesremoteAddFromRemoteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesremoteAddFromRemoteResponse> executeWithHttpInfo() throws ApiException {
            FilesremoteAddFromRemoteRequest filesremoteAddFromRemoteRequest = buildBodyParams();
            return addFromRemoteWithHttpInfo(title, externalId, externalUrl, filetype, indexableFileContents, previewImage, token, filesremoteAddFromRemoteRequest);
        }

        /**
         * Execute addFromRemote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesremoteAddFromRemoteResponse> _callback) throws ApiException {
            FilesremoteAddFromRemoteRequest filesremoteAddFromRemoteRequest = buildBodyParams();
            return addFromRemoteAsync(title, externalId, externalUrl, filetype, indexableFileContents, previewImage, token, filesremoteAddFromRemoteRequest, _callback);
        }
    }

    /**
     * 
     * Adds a file from a remote service
     * @return AddFromRemoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.add"> Documentation</a>
     */
    public AddFromRemoteRequestBuilder addFromRemote() throws IllegalArgumentException {
        return new AddFromRemoteRequestBuilder();
    }
    private okhttp3.Call deleteCall(String token, String _file, FilesDeleteRequest filesDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesDeleteRequest;

        // create path and map variables
        String localVarPath = "/files.delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteValidateBeforeCall(String token, String _file, FilesDeleteRequest filesDeleteRequest, final ApiCallback _callback) throws ApiException {
        return deleteCall(token, _file, filesDeleteRequest, _callback);

    }


    private ApiResponse<FilesDeleteResponse> deleteWithHttpInfo(String token, String _file, FilesDeleteRequest filesDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteValidateBeforeCall(token, _file, filesDeleteRequest, null);
        Type localVarReturnType = new TypeToken<FilesDeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAsync(String token, String _file, FilesDeleteRequest filesDeleteRequest, final ApiCallback<FilesDeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteValidateBeforeCall(token, _file, filesDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<FilesDeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteRequestBuilder {
        private String token;
        private String _file;

        private DeleteRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
         * @return DeleteRequestBuilder
         */
        public DeleteRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set _file
         * @param _file ID of file to delete. (optional)
         * @return DeleteRequestBuilder
         */
        public DeleteRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for delete
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesDeleteRequest filesDeleteRequest = buildBodyParams();
            return deleteCall(token, _file, filesDeleteRequest, _callback);
        }

        private FilesDeleteRequest buildBodyParams() {
            FilesDeleteRequest filesDeleteRequest = new FilesDeleteRequest();
            filesDeleteRequest._file(this._file);
            return filesDeleteRequest;
        }

        /**
         * Execute delete request
         * @return FilesDeleteResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesDeleteResponse execute() throws ApiException {
            FilesDeleteRequest filesDeleteRequest = buildBodyParams();
            ApiResponse<FilesDeleteResponse> localVarResp = deleteWithHttpInfo(token, _file, filesDeleteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute delete request with HTTP info returned
         * @return ApiResponse&lt;FilesDeleteResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesDeleteResponse> executeWithHttpInfo() throws ApiException {
            FilesDeleteRequest filesDeleteRequest = buildBodyParams();
            return deleteWithHttpInfo(token, _file, filesDeleteRequest);
        }

        /**
         * Execute delete request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesDeleteResponse> _callback) throws ApiException {
            FilesDeleteRequest filesDeleteRequest = buildBodyParams();
            return deleteAsync(token, _file, filesDeleteRequest, _callback);
        }
    }

    /**
     * 
     * Deletes a file.
     * @return DeleteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.delete"> Documentation</a>
     */
    public DeleteRequestBuilder delete() throws IllegalArgumentException {
        return new DeleteRequestBuilder();
    }
    private okhttp3.Call deleteCommentCall(String token, String _file, String id, FilescommentsDeleteCommentRequest filescommentsDeleteCommentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filescommentsDeleteCommentRequest;

        // create path and map variables
        String localVarPath = "/files.comments.delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (id != null) {
            localVarFormParams.put("id", id);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCommentValidateBeforeCall(String token, String _file, String id, FilescommentsDeleteCommentRequest filescommentsDeleteCommentRequest, final ApiCallback _callback) throws ApiException {
        return deleteCommentCall(token, _file, id, filescommentsDeleteCommentRequest, _callback);

    }


    private ApiResponse<FilescommentsDeleteCommentResponse> deleteCommentWithHttpInfo(String token, String _file, String id, FilescommentsDeleteCommentRequest filescommentsDeleteCommentRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(token, _file, id, filescommentsDeleteCommentRequest, null);
        Type localVarReturnType = new TypeToken<FilescommentsDeleteCommentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCommentAsync(String token, String _file, String id, FilescommentsDeleteCommentRequest filescommentsDeleteCommentRequest, final ApiCallback<FilescommentsDeleteCommentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCommentValidateBeforeCall(token, _file, id, filescommentsDeleteCommentRequest, _callback);
        Type localVarReturnType = new TypeToken<FilescommentsDeleteCommentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteCommentRequestBuilder {
        private String token;
        private String _file;
        private String id;

        private DeleteCommentRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
         * @return DeleteCommentRequestBuilder
         */
        public DeleteCommentRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set _file
         * @param _file File to delete a comment from. (optional)
         * @return DeleteCommentRequestBuilder
         */
        public DeleteCommentRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set id
         * @param id The comment to delete. (optional)
         * @return DeleteCommentRequestBuilder
         */
        public DeleteCommentRequestBuilder id(String id) {
            this.id = id;
            return this;
        }
        
        /**
         * Build call for deleteComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response is very simple </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilescommentsDeleteCommentRequest filescommentsDeleteCommentRequest = buildBodyParams();
            return deleteCommentCall(token, _file, id, filescommentsDeleteCommentRequest, _callback);
        }

        private FilescommentsDeleteCommentRequest buildBodyParams() {
            FilescommentsDeleteCommentRequest filescommentsDeleteCommentRequest = new FilescommentsDeleteCommentRequest();
            filescommentsDeleteCommentRequest._file(this._file);
            filescommentsDeleteCommentRequest.id(this.id);
            return filescommentsDeleteCommentRequest;
        }

        /**
         * Execute deleteComment request
         * @return FilescommentsDeleteCommentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response is very simple </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public FilescommentsDeleteCommentResponse execute() throws ApiException {
            FilescommentsDeleteCommentRequest filescommentsDeleteCommentRequest = buildBodyParams();
            ApiResponse<FilescommentsDeleteCommentResponse> localVarResp = deleteCommentWithHttpInfo(token, _file, id, filescommentsDeleteCommentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteComment request with HTTP info returned
         * @return ApiResponse&lt;FilescommentsDeleteCommentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response is very simple </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilescommentsDeleteCommentResponse> executeWithHttpInfo() throws ApiException {
            FilescommentsDeleteCommentRequest filescommentsDeleteCommentRequest = buildBodyParams();
            return deleteCommentWithHttpInfo(token, _file, id, filescommentsDeleteCommentRequest);
        }

        /**
         * Execute deleteComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Standard success response is very simple </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilescommentsDeleteCommentResponse> _callback) throws ApiException {
            FilescommentsDeleteCommentRequest filescommentsDeleteCommentRequest = buildBodyParams();
            return deleteCommentAsync(token, _file, id, filescommentsDeleteCommentRequest, _callback);
        }
    }

    /**
     * 
     * Deletes an existing comment on a file.
     * @return DeleteCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Standard success response is very simple </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Standard failure response when used with an invalid token </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.comments.delete"> Documentation</a>
     */
    public DeleteCommentRequestBuilder deleteComment() throws IllegalArgumentException {
        return new DeleteCommentRequestBuilder();
    }
    private okhttp3.Call deleteFileCall(String externalId, String _file, String token, FilesremoteDeleteFileRequest filesremoteDeleteFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesremoteDeleteFileRequest;

        // create path and map variables
        String localVarPath = "/files.remote.remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (externalId != null) {
            localVarFormParams.put("external_id", externalId);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFileValidateBeforeCall(String externalId, String _file, String token, FilesremoteDeleteFileRequest filesremoteDeleteFileRequest, final ApiCallback _callback) throws ApiException {
        return deleteFileCall(externalId, _file, token, filesremoteDeleteFileRequest, _callback);

    }


    private ApiResponse<FilesremoteDeleteFileResponse> deleteFileWithHttpInfo(String externalId, String _file, String token, FilesremoteDeleteFileRequest filesremoteDeleteFileRequest) throws ApiException {
        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(externalId, _file, token, filesremoteDeleteFileRequest, null);
        Type localVarReturnType = new TypeToken<FilesremoteDeleteFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFileAsync(String externalId, String _file, String token, FilesremoteDeleteFileRequest filesremoteDeleteFileRequest, final ApiCallback<FilesremoteDeleteFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFileValidateBeforeCall(externalId, _file, token, filesremoteDeleteFileRequest, _callback);
        Type localVarReturnType = new TypeToken<FilesremoteDeleteFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteFileRequestBuilder {
        private String externalId;
        private String _file;
        private String token;

        private DeleteFileRequestBuilder() {
        }

        /**
         * Set externalId
         * @param externalId Creator defined GUID for the file. (optional)
         * @return DeleteFileRequestBuilder
         */
        public DeleteFileRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set _file
         * @param _file Specify a file by providing its ID. (optional)
         * @return DeleteFileRequestBuilder
         */
        public DeleteFileRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
         * @return DeleteFileRequestBuilder
         */
        public DeleteFileRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Build call for deleteFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesremoteDeleteFileRequest filesremoteDeleteFileRequest = buildBodyParams();
            return deleteFileCall(externalId, _file, token, filesremoteDeleteFileRequest, _callback);
        }

        private FilesremoteDeleteFileRequest buildBodyParams() {
            FilesremoteDeleteFileRequest filesremoteDeleteFileRequest = new FilesremoteDeleteFileRequest();
            filesremoteDeleteFileRequest.externalId(this.externalId);
            filesremoteDeleteFileRequest._file(this._file);
            filesremoteDeleteFileRequest.token(this.token);
            return filesremoteDeleteFileRequest;
        }

        /**
         * Execute deleteFile request
         * @return FilesremoteDeleteFileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesremoteDeleteFileResponse execute() throws ApiException {
            FilesremoteDeleteFileRequest filesremoteDeleteFileRequest = buildBodyParams();
            ApiResponse<FilesremoteDeleteFileResponse> localVarResp = deleteFileWithHttpInfo(externalId, _file, token, filesremoteDeleteFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteFile request with HTTP info returned
         * @return ApiResponse&lt;FilesremoteDeleteFileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesremoteDeleteFileResponse> executeWithHttpInfo() throws ApiException {
            FilesremoteDeleteFileRequest filesremoteDeleteFileRequest = buildBodyParams();
            return deleteFileWithHttpInfo(externalId, _file, token, filesremoteDeleteFileRequest);
        }

        /**
         * Execute deleteFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesremoteDeleteFileResponse> _callback) throws ApiException {
            FilesremoteDeleteFileRequest filesremoteDeleteFileRequest = buildBodyParams();
            return deleteFileAsync(externalId, _file, token, filesremoteDeleteFileRequest, _callback);
        }
    }

    /**
     * 
     * Remove a remote file.
     * @return DeleteFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.remove"> Documentation</a>
     */
    public DeleteFileRequestBuilder deleteFile() throws IllegalArgumentException {
        return new DeleteFileRequestBuilder();
    }
    private okhttp3.Call getInfoCall(String token, String _file, String externalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInfoValidateBeforeCall(String token, String _file, String externalId, final ApiCallback _callback) throws ApiException {
        return getInfoCall(token, _file, externalId, _callback);

    }


    private ApiResponse<FilesremoteGetInfoResponse> getInfoWithHttpInfo(String token, String _file, String externalId) throws ApiException {
        okhttp3.Call localVarCall = getInfoValidateBeforeCall(token, _file, externalId, null);
        Type localVarReturnType = new TypeToken<FilesremoteGetInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInfoAsync(String token, String _file, String externalId, final ApiCallback<FilesremoteGetInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInfoValidateBeforeCall(token, _file, externalId, _callback);
        Type localVarReturnType = new TypeToken<FilesremoteGetInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInfoRequestBuilder {
        private String token;
        private String _file;
        private String externalId;

        private GetInfoRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set _file
         * @param _file Specify a file by providing its ID. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId Creator defined GUID for the file. (optional)
         * @return GetInfoRequestBuilder
         */
        public GetInfoRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Build call for getInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInfoCall(token, _file, externalId, _callback);
        }


        /**
         * Execute getInfo request
         * @return FilesremoteGetInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesremoteGetInfoResponse execute() throws ApiException {
            ApiResponse<FilesremoteGetInfoResponse> localVarResp = getInfoWithHttpInfo(token, _file, externalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInfo request with HTTP info returned
         * @return ApiResponse&lt;FilesremoteGetInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesremoteGetInfoResponse> executeWithHttpInfo() throws ApiException {
            return getInfoWithHttpInfo(token, _file, externalId);
        }

        /**
         * Execute getInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesremoteGetInfoResponse> _callback) throws ApiException {
            return getInfoAsync(token, _file, externalId, _callback);
        }
    }

    /**
     * 
     * Retrieve information about a remote file added to Slack
     * @return GetInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.info"> Documentation</a>
     */
    public GetInfoRequestBuilder getInfo() throws IllegalArgumentException {
        return new GetInfoRequestBuilder();
    }
    private okhttp3.Call infoCall(String token, String _file, String count, String page, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infoValidateBeforeCall(String token, String _file, String count, String page, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return infoCall(token, _file, count, page, limit, cursor, _callback);

    }


    private ApiResponse<FilesInfoResponse> infoWithHttpInfo(String token, String _file, String count, String page, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = infoValidateBeforeCall(token, _file, count, page, limit, cursor, null);
        Type localVarReturnType = new TypeToken<FilesInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call infoAsync(String token, String _file, String count, String page, Integer limit, String cursor, final ApiCallback<FilesInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = infoValidateBeforeCall(token, _file, count, page, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<FilesInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class InfoRequestBuilder {
        private String token;
        private String _file;
        private String count;
        private String page;
        private Integer limit;
        private String cursor;

        private InfoRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;files:read&#x60; (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set _file
         * @param _file Specify a file by providing its ID. (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set count
         * @param count  (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder count(String count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Parameter for pagination. File comments are paginated for a single file. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection of comments. See [pagination](https://slack.dev) for more details. (optional)
         * @return InfoRequestBuilder
         */
        public InfoRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for info
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return infoCall(token, _file, count, page, limit, cursor, _callback);
        }


        /**
         * Execute info request
         * @return FilesInfoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesInfoResponse execute() throws ApiException {
            ApiResponse<FilesInfoResponse> localVarResp = infoWithHttpInfo(token, _file, count, page, limit, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute info request with HTTP info returned
         * @return ApiResponse&lt;FilesInfoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesInfoResponse> executeWithHttpInfo() throws ApiException {
            return infoWithHttpInfo(token, _file, count, page, limit, cursor);
        }

        /**
         * Execute info request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesInfoResponse> _callback) throws ApiException {
            return infoAsync(token, _file, count, page, limit, cursor, _callback);
        }
    }

    /**
     * 
     * Gets information about a file.
     * @return InfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.info"> Documentation</a>
     */
    public InfoRequestBuilder info() throws IllegalArgumentException {
        return new InfoRequestBuilder();
    }
    private okhttp3.Call listCall(String token, String user, String channel, Double tsFrom, Double tsTo, String types, String count, String page, Boolean showFilesHiddenByLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (tsFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ts_from", tsFrom));
        }

        if (tsTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ts_to", tsTo));
        }

        if (types != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("types", types));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (showFilesHiddenByLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("show_files_hidden_by_limit", showFilesHiddenByLimit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String token, String user, String channel, Double tsFrom, Double tsTo, String types, String count, String page, Boolean showFilesHiddenByLimit, final ApiCallback _callback) throws ApiException {
        return listCall(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit, _callback);

    }


    private ApiResponse<FilesListResponse> listWithHttpInfo(String token, String user, String channel, Double tsFrom, Double tsTo, String types, String count, String page, Boolean showFilesHiddenByLimit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit, null);
        Type localVarReturnType = new TypeToken<FilesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String token, String user, String channel, Double tsFrom, Double tsTo, String types, String count, String page, Boolean showFilesHiddenByLimit, final ApiCallback<FilesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit, _callback);
        Type localVarReturnType = new TypeToken<FilesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String token;
        private String user;
        private String channel;
        private Double tsFrom;
        private Double tsTo;
        private String types;
        private String count;
        private String page;
        private Boolean showFilesHiddenByLimit;

        private ListRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;files:read&#x60; (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set user
         * @param user Filter files created by a single user. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder user(String user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set channel
         * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder channel(String channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set tsFrom
         * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder tsFrom(Double tsFrom) {
            this.tsFrom = tsFrom;
            return this;
        }
        
        /**
         * Set tsTo
         * @param tsTo Filter files created before this timestamp (inclusive). (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder tsTo(Double tsTo) {
            this.tsTo = tsTo;
            return this;
        }
        
        /**
         * Set types
         * @param types Filter files by type ([see below](https://slack.dev)). You can pass multiple values in the types argument, like &#x60;types&#x3D;spaces,snippets&#x60;.The default value is &#x60;all&#x60;, which does not filter the list. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder types(String types) {
            this.types = types;
            return this;
        }
        
        /**
         * Set count
         * @param count  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder count(String count) {
            this.count = count;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder page(String page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set showFilesHiddenByLimit
         * @param showFilesHiddenByLimit Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder showFilesHiddenByLimit(Boolean showFilesHiddenByLimit) {
            this.showFilesHiddenByLimit = showFilesHiddenByLimit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit, _callback);
        }


        /**
         * Execute list request
         * @return FilesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesListResponse execute() throws ApiException {
            ApiResponse<FilesListResponse> localVarResp = listWithHttpInfo(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;FilesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesListResponse> _callback) throws ApiException {
            return listAsync(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit, _callback);
        }
    }

    /**
     * 
     * List for a team, in a channel, or from a user with applied filters.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.list"> Documentation</a>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listRemoteFilesCall(String token, String channel, Double tsFrom, Double tsTo, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (tsFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ts_from", tsFrom));
        }

        if (tsTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ts_to", tsTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRemoteFilesValidateBeforeCall(String token, String channel, Double tsFrom, Double tsTo, Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return listRemoteFilesCall(token, channel, tsFrom, tsTo, limit, cursor, _callback);

    }


    private ApiResponse<FilesremoteListRemoteFilesResponse> listRemoteFilesWithHttpInfo(String token, String channel, Double tsFrom, Double tsTo, Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listRemoteFilesValidateBeforeCall(token, channel, tsFrom, tsTo, limit, cursor, null);
        Type localVarReturnType = new TypeToken<FilesremoteListRemoteFilesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRemoteFilesAsync(String token, String channel, Double tsFrom, Double tsTo, Integer limit, String cursor, final ApiCallback<FilesremoteListRemoteFilesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRemoteFilesValidateBeforeCall(token, channel, tsFrom, tsTo, limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<FilesremoteListRemoteFilesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRemoteFilesRequestBuilder {
        private String token;
        private String channel;
        private Double tsFrom;
        private Double tsTo;
        private Integer limit;
        private String cursor;

        private ListRemoteFilesRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
         * @return ListRemoteFilesRequestBuilder
         */
        public ListRemoteFilesRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set channel
         * @param channel Filter files appearing in a specific channel, indicated by its ID. (optional)
         * @return ListRemoteFilesRequestBuilder
         */
        public ListRemoteFilesRequestBuilder channel(String channel) {
            this.channel = channel;
            return this;
        }
        
        /**
         * Set tsFrom
         * @param tsFrom Filter files created after this timestamp (inclusive). (optional)
         * @return ListRemoteFilesRequestBuilder
         */
        public ListRemoteFilesRequestBuilder tsFrom(Double tsFrom) {
            this.tsFrom = tsFrom;
            return this;
        }
        
        /**
         * Set tsTo
         * @param tsTo Filter files created before this timestamp (inclusive). (optional)
         * @return ListRemoteFilesRequestBuilder
         */
        public ListRemoteFilesRequestBuilder tsTo(Double tsTo) {
            this.tsTo = tsTo;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of items to return. (optional)
         * @return ListRemoteFilesRequestBuilder
         */
        public ListRemoteFilesRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set cursor
         * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](https://slack.dev) for more detail. (optional)
         * @return ListRemoteFilesRequestBuilder
         */
        public ListRemoteFilesRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Build call for listRemoteFiles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRemoteFilesCall(token, channel, tsFrom, tsTo, limit, cursor, _callback);
        }


        /**
         * Execute listRemoteFiles request
         * @return FilesremoteListRemoteFilesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesremoteListRemoteFilesResponse execute() throws ApiException {
            ApiResponse<FilesremoteListRemoteFilesResponse> localVarResp = listRemoteFilesWithHttpInfo(token, channel, tsFrom, tsTo, limit, cursor);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRemoteFiles request with HTTP info returned
         * @return ApiResponse&lt;FilesremoteListRemoteFilesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesremoteListRemoteFilesResponse> executeWithHttpInfo() throws ApiException {
            return listRemoteFilesWithHttpInfo(token, channel, tsFrom, tsTo, limit, cursor);
        }

        /**
         * Execute listRemoteFiles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesremoteListRemoteFilesResponse> _callback) throws ApiException {
            return listRemoteFilesAsync(token, channel, tsFrom, tsTo, limit, cursor, _callback);
        }
    }

    /**
     * 
     * Retrieve information about a remote file added to Slack
     * @return ListRemoteFilesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.list"> Documentation</a>
     */
    public ListRemoteFilesRequestBuilder listRemoteFiles() throws IllegalArgumentException {
        return new ListRemoteFilesRequestBuilder();
    }
    private okhttp3.Call revokePublicURLCall(String token, String _file, FilesRevokePublicUrlRequest filesRevokePublicUrlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesRevokePublicUrlRequest;

        // create path and map variables
        String localVarPath = "/files.revokePublicURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokePublicURLValidateBeforeCall(String token, String _file, FilesRevokePublicUrlRequest filesRevokePublicUrlRequest, final ApiCallback _callback) throws ApiException {
        return revokePublicURLCall(token, _file, filesRevokePublicUrlRequest, _callback);

    }


    private ApiResponse<FilesRevokePublicUrlResponse> revokePublicURLWithHttpInfo(String token, String _file, FilesRevokePublicUrlRequest filesRevokePublicUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = revokePublicURLValidateBeforeCall(token, _file, filesRevokePublicUrlRequest, null);
        Type localVarReturnType = new TypeToken<FilesRevokePublicUrlResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call revokePublicURLAsync(String token, String _file, FilesRevokePublicUrlRequest filesRevokePublicUrlRequest, final ApiCallback<FilesRevokePublicUrlResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokePublicURLValidateBeforeCall(token, _file, filesRevokePublicUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<FilesRevokePublicUrlResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RevokePublicURLRequestBuilder {
        private String token;
        private String _file;

        private RevokePublicURLRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
         * @return RevokePublicURLRequestBuilder
         */
        public RevokePublicURLRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set _file
         * @param _file File to revoke (optional)
         * @return RevokePublicURLRequestBuilder
         */
        public RevokePublicURLRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for revokePublicURL
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesRevokePublicUrlRequest filesRevokePublicUrlRequest = buildBodyParams();
            return revokePublicURLCall(token, _file, filesRevokePublicUrlRequest, _callback);
        }

        private FilesRevokePublicUrlRequest buildBodyParams() {
            FilesRevokePublicUrlRequest filesRevokePublicUrlRequest = new FilesRevokePublicUrlRequest();
            filesRevokePublicUrlRequest._file(this._file);
            return filesRevokePublicUrlRequest;
        }

        /**
         * Execute revokePublicURL request
         * @return FilesRevokePublicUrlResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesRevokePublicUrlResponse execute() throws ApiException {
            FilesRevokePublicUrlRequest filesRevokePublicUrlRequest = buildBodyParams();
            ApiResponse<FilesRevokePublicUrlResponse> localVarResp = revokePublicURLWithHttpInfo(token, _file, filesRevokePublicUrlRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute revokePublicURL request with HTTP info returned
         * @return ApiResponse&lt;FilesRevokePublicUrlResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesRevokePublicUrlResponse> executeWithHttpInfo() throws ApiException {
            FilesRevokePublicUrlRequest filesRevokePublicUrlRequest = buildBodyParams();
            return revokePublicURLWithHttpInfo(token, _file, filesRevokePublicUrlRequest);
        }

        /**
         * Execute revokePublicURL request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesRevokePublicUrlResponse> _callback) throws ApiException {
            FilesRevokePublicUrlRequest filesRevokePublicUrlRequest = buildBodyParams();
            return revokePublicURLAsync(token, _file, filesRevokePublicUrlRequest, _callback);
        }
    }

    /**
     * 
     * Revokes public/external sharing access for a file
     * @return RevokePublicURLRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.revokePublicURL"> Documentation</a>
     */
    public RevokePublicURLRequestBuilder revokePublicURL() throws IllegalArgumentException {
        return new RevokePublicURLRequestBuilder();
    }
    private okhttp3.Call shareRemoteFileCall(String token, String _file, String externalId, String channels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/files.remote.share";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (_file != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("file", _file));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (channels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channels", channels));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareRemoteFileValidateBeforeCall(String token, String _file, String externalId, String channels, final ApiCallback _callback) throws ApiException {
        return shareRemoteFileCall(token, _file, externalId, channels, _callback);

    }


    private ApiResponse<FilesremoteShareRemoteFileResponse> shareRemoteFileWithHttpInfo(String token, String _file, String externalId, String channels) throws ApiException {
        okhttp3.Call localVarCall = shareRemoteFileValidateBeforeCall(token, _file, externalId, channels, null);
        Type localVarReturnType = new TypeToken<FilesremoteShareRemoteFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call shareRemoteFileAsync(String token, String _file, String externalId, String channels, final ApiCallback<FilesremoteShareRemoteFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareRemoteFileValidateBeforeCall(token, _file, externalId, channels, _callback);
        Type localVarReturnType = new TypeToken<FilesremoteShareRemoteFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShareRemoteFileRequestBuilder {
        private String token;
        private String _file;
        private String externalId;
        private String channels;

        private ShareRemoteFileRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
         * @return ShareRemoteFileRequestBuilder
         */
        public ShareRemoteFileRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set _file
         * @param _file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
         * @return ShareRemoteFileRequestBuilder
         */
        public ShareRemoteFileRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
         * @return ShareRemoteFileRequestBuilder
         */
        public ShareRemoteFileRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set channels
         * @param channels Comma-separated list of channel IDs where the file will be shared. (optional)
         * @return ShareRemoteFileRequestBuilder
         */
        public ShareRemoteFileRequestBuilder channels(String channels) {
            this.channels = channels;
            return this;
        }
        
        /**
         * Build call for shareRemoteFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return shareRemoteFileCall(token, _file, externalId, channels, _callback);
        }


        /**
         * Execute shareRemoteFile request
         * @return FilesremoteShareRemoteFileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesremoteShareRemoteFileResponse execute() throws ApiException {
            ApiResponse<FilesremoteShareRemoteFileResponse> localVarResp = shareRemoteFileWithHttpInfo(token, _file, externalId, channels);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute shareRemoteFile request with HTTP info returned
         * @return ApiResponse&lt;FilesremoteShareRemoteFileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesremoteShareRemoteFileResponse> executeWithHttpInfo() throws ApiException {
            return shareRemoteFileWithHttpInfo(token, _file, externalId, channels);
        }

        /**
         * Execute shareRemoteFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesremoteShareRemoteFileResponse> _callback) throws ApiException {
            return shareRemoteFileAsync(token, _file, externalId, channels, _callback);
        }
    }

    /**
     * 
     * Share a remote file into a channel.
     * @return ShareRemoteFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.share"> Documentation</a>
     */
    public ShareRemoteFileRequestBuilder shareRemoteFile() throws IllegalArgumentException {
        return new ShareRemoteFileRequestBuilder();
    }
    private okhttp3.Call sharedPublicURLCall(String token, String _file, FilesSharedPublicUrlRequest filesSharedPublicUrlRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesSharedPublicUrlRequest;

        // create path and map variables
        String localVarPath = "/files.sharedPublicURL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (token != null) {
            localVarHeaderParams.put("token", localVarApiClient.parameterToString(token));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharedPublicURLValidateBeforeCall(String token, String _file, FilesSharedPublicUrlRequest filesSharedPublicUrlRequest, final ApiCallback _callback) throws ApiException {
        return sharedPublicURLCall(token, _file, filesSharedPublicUrlRequest, _callback);

    }


    private ApiResponse<FilesSharedPublicUrlResponse> sharedPublicURLWithHttpInfo(String token, String _file, FilesSharedPublicUrlRequest filesSharedPublicUrlRequest) throws ApiException {
        okhttp3.Call localVarCall = sharedPublicURLValidateBeforeCall(token, _file, filesSharedPublicUrlRequest, null);
        Type localVarReturnType = new TypeToken<FilesSharedPublicUrlResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sharedPublicURLAsync(String token, String _file, FilesSharedPublicUrlRequest filesSharedPublicUrlRequest, final ApiCallback<FilesSharedPublicUrlResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharedPublicURLValidateBeforeCall(token, _file, filesSharedPublicUrlRequest, _callback);
        Type localVarReturnType = new TypeToken<FilesSharedPublicUrlResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SharedPublicURLRequestBuilder {
        private String token;
        private String _file;

        private SharedPublicURLRequestBuilder() {
        }

        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
         * @return SharedPublicURLRequestBuilder
         */
        public SharedPublicURLRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Set _file
         * @param _file File to share (optional)
         * @return SharedPublicURLRequestBuilder
         */
        public SharedPublicURLRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Build call for sharedPublicURL
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesSharedPublicUrlRequest filesSharedPublicUrlRequest = buildBodyParams();
            return sharedPublicURLCall(token, _file, filesSharedPublicUrlRequest, _callback);
        }

        private FilesSharedPublicUrlRequest buildBodyParams() {
            FilesSharedPublicUrlRequest filesSharedPublicUrlRequest = new FilesSharedPublicUrlRequest();
            filesSharedPublicUrlRequest._file(this._file);
            return filesSharedPublicUrlRequest;
        }

        /**
         * Execute sharedPublicURL request
         * @return FilesSharedPublicUrlResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesSharedPublicUrlResponse execute() throws ApiException {
            FilesSharedPublicUrlRequest filesSharedPublicUrlRequest = buildBodyParams();
            ApiResponse<FilesSharedPublicUrlResponse> localVarResp = sharedPublicURLWithHttpInfo(token, _file, filesSharedPublicUrlRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute sharedPublicURL request with HTTP info returned
         * @return ApiResponse&lt;FilesSharedPublicUrlResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesSharedPublicUrlResponse> executeWithHttpInfo() throws ApiException {
            FilesSharedPublicUrlRequest filesSharedPublicUrlRequest = buildBodyParams();
            return sharedPublicURLWithHttpInfo(token, _file, filesSharedPublicUrlRequest);
        }

        /**
         * Execute sharedPublicURL request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesSharedPublicUrlResponse> _callback) throws ApiException {
            FilesSharedPublicUrlRequest filesSharedPublicUrlRequest = buildBodyParams();
            return sharedPublicURLAsync(token, _file, filesSharedPublicUrlRequest, _callback);
        }
    }

    /**
     * 
     * Enables a file for public/external sharing.
     * @return SharedPublicURLRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.sharedPublicURL"> Documentation</a>
     */
    public SharedPublicURLRequestBuilder sharedPublicURL() throws IllegalArgumentException {
        return new SharedPublicURLRequestBuilder();
    }
    private okhttp3.Call updateRemoteFileCall(String title, String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String token, FilesremoteUpdateRemoteFileRequest filesremoteUpdateRemoteFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesremoteUpdateRemoteFileRequest;

        // create path and map variables
        String localVarPath = "/files.remote.update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (externalId != null) {
            localVarFormParams.put("external_id", externalId);
        }

        if (externalUrl != null) {
            localVarFormParams.put("external_url", externalUrl);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (filetype != null) {
            localVarFormParams.put("filetype", filetype);
        }

        if (indexableFileContents != null) {
            localVarFormParams.put("indexable_file_contents", indexableFileContents);
        }

        if (previewImage != null) {
            localVarFormParams.put("preview_image", previewImage);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRemoteFileValidateBeforeCall(String title, String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String token, FilesremoteUpdateRemoteFileRequest filesremoteUpdateRemoteFileRequest, final ApiCallback _callback) throws ApiException {
        return updateRemoteFileCall(title, externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, token, filesremoteUpdateRemoteFileRequest, _callback);

    }


    private ApiResponse<FilesremoteUpdateRemoteFileResponse> updateRemoteFileWithHttpInfo(String title, String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String token, FilesremoteUpdateRemoteFileRequest filesremoteUpdateRemoteFileRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRemoteFileValidateBeforeCall(title, externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, token, filesremoteUpdateRemoteFileRequest, null);
        Type localVarReturnType = new TypeToken<FilesremoteUpdateRemoteFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRemoteFileAsync(String title, String externalId, String externalUrl, String _file, String filetype, String indexableFileContents, String previewImage, String token, FilesremoteUpdateRemoteFileRequest filesremoteUpdateRemoteFileRequest, final ApiCallback<FilesremoteUpdateRemoteFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRemoteFileValidateBeforeCall(title, externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, token, filesremoteUpdateRemoteFileRequest, _callback);
        Type localVarReturnType = new TypeToken<FilesremoteUpdateRemoteFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRemoteFileRequestBuilder {
        private String title;
        private String externalId;
        private String externalUrl;
        private String _file;
        private String filetype;
        private String indexableFileContents;
        private String previewImage;
        private String token;

        private UpdateRemoteFileRequestBuilder() {
        }

        /**
         * Set title
         * @param title Title of the file being shared. (optional)
         * @return UpdateRemoteFileRequestBuilder
         */
        public UpdateRemoteFileRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId Creator defined GUID for the file. (optional)
         * @return UpdateRemoteFileRequestBuilder
         */
        public UpdateRemoteFileRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set externalUrl
         * @param externalUrl URL of the remote file. (optional)
         * @return UpdateRemoteFileRequestBuilder
         */
        public UpdateRemoteFileRequestBuilder externalUrl(String externalUrl) {
            this.externalUrl = externalUrl;
            return this;
        }
        
        /**
         * Set _file
         * @param _file Specify a file by providing its ID. (optional)
         * @return UpdateRemoteFileRequestBuilder
         */
        public UpdateRemoteFileRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set filetype
         * @param filetype type of file (optional)
         * @return UpdateRemoteFileRequestBuilder
         */
        public UpdateRemoteFileRequestBuilder filetype(String filetype) {
            this.filetype = filetype;
            return this;
        }
        
        /**
         * Set indexableFileContents
         * @param indexableFileContents File containing contents that can be used to improve searchability for the remote file. (optional)
         * @return UpdateRemoteFileRequestBuilder
         */
        public UpdateRemoteFileRequestBuilder indexableFileContents(String indexableFileContents) {
            this.indexableFileContents = indexableFileContents;
            return this;
        }
        
        /**
         * Set previewImage
         * @param previewImage Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
         * @return UpdateRemoteFileRequestBuilder
         */
        public UpdateRemoteFileRequestBuilder previewImage(String previewImage) {
            this.previewImage = previewImage;
            return this;
        }
        
        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
         * @return UpdateRemoteFileRequestBuilder
         */
        public UpdateRemoteFileRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Build call for updateRemoteFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesremoteUpdateRemoteFileRequest filesremoteUpdateRemoteFileRequest = buildBodyParams();
            return updateRemoteFileCall(title, externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, token, filesremoteUpdateRemoteFileRequest, _callback);
        }

        private FilesremoteUpdateRemoteFileRequest buildBodyParams() {
            FilesremoteUpdateRemoteFileRequest filesremoteUpdateRemoteFileRequest = new FilesremoteUpdateRemoteFileRequest();
            filesremoteUpdateRemoteFileRequest.title(this.title);
            filesremoteUpdateRemoteFileRequest.externalId(this.externalId);
            filesremoteUpdateRemoteFileRequest.externalUrl(this.externalUrl);
            filesremoteUpdateRemoteFileRequest._file(this._file);
            filesremoteUpdateRemoteFileRequest.filetype(this.filetype);
            filesremoteUpdateRemoteFileRequest.indexableFileContents(this.indexableFileContents);
            filesremoteUpdateRemoteFileRequest.previewImage(this.previewImage);
            filesremoteUpdateRemoteFileRequest.token(this.token);
            return filesremoteUpdateRemoteFileRequest;
        }

        /**
         * Execute updateRemoteFile request
         * @return FilesremoteUpdateRemoteFileResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesremoteUpdateRemoteFileResponse execute() throws ApiException {
            FilesremoteUpdateRemoteFileRequest filesremoteUpdateRemoteFileRequest = buildBodyParams();
            ApiResponse<FilesremoteUpdateRemoteFileResponse> localVarResp = updateRemoteFileWithHttpInfo(title, externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, token, filesremoteUpdateRemoteFileRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRemoteFile request with HTTP info returned
         * @return ApiResponse&lt;FilesremoteUpdateRemoteFileResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesremoteUpdateRemoteFileResponse> executeWithHttpInfo() throws ApiException {
            FilesremoteUpdateRemoteFileRequest filesremoteUpdateRemoteFileRequest = buildBodyParams();
            return updateRemoteFileWithHttpInfo(title, externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, token, filesremoteUpdateRemoteFileRequest);
        }

        /**
         * Execute updateRemoteFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesremoteUpdateRemoteFileResponse> _callback) throws ApiException {
            FilesremoteUpdateRemoteFileRequest filesremoteUpdateRemoteFileRequest = buildBodyParams();
            return updateRemoteFileAsync(title, externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, token, filesremoteUpdateRemoteFileRequest, _callback);
        }
    }

    /**
     * 
     * Updates an existing remote file.
     * @return UpdateRemoteFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Typical success response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.remote.update"> Documentation</a>
     */
    public UpdateRemoteFileRequestBuilder updateRemoteFile() throws IllegalArgumentException {
        return new UpdateRemoteFileRequestBuilder();
    }
    private okhttp3.Call uploadCall(String title, String channels, String content, String _file, String filename, String filetype, String initialComment, Double threadTs, String token, FilesUploadRequest filesUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = filesUploadRequest;

        // create path and map variables
        String localVarPath = "/files.upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarFormParams.put("title", title);
        }

        if (channels != null) {
            localVarFormParams.put("channels", channels);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (filename != null) {
            localVarFormParams.put("filename", filename);
        }

        if (filetype != null) {
            localVarFormParams.put("filetype", filetype);
        }

        if (initialComment != null) {
            localVarFormParams.put("initial_comment", initialComment);
        }

        if (threadTs != null) {
            localVarFormParams.put("thread_ts", threadTs);
        }

        if (token != null) {
            localVarFormParams.put("token", token);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "slackAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadValidateBeforeCall(String title, String channels, String content, String _file, String filename, String filetype, String initialComment, Double threadTs, String token, FilesUploadRequest filesUploadRequest, final ApiCallback _callback) throws ApiException {
        return uploadCall(title, channels, content, _file, filename, filetype, initialComment, threadTs, token, filesUploadRequest, _callback);

    }


    private ApiResponse<FilesUploadResponse> uploadWithHttpInfo(String title, String channels, String content, String _file, String filename, String filetype, String initialComment, Double threadTs, String token, FilesUploadRequest filesUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadValidateBeforeCall(title, channels, content, _file, filename, filetype, initialComment, threadTs, token, filesUploadRequest, null);
        Type localVarReturnType = new TypeToken<FilesUploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadAsync(String title, String channels, String content, String _file, String filename, String filetype, String initialComment, Double threadTs, String token, FilesUploadRequest filesUploadRequest, final ApiCallback<FilesUploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadValidateBeforeCall(title, channels, content, _file, filename, filetype, initialComment, threadTs, token, filesUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<FilesUploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UploadRequestBuilder {
        private String title;
        private String channels;
        private String content;
        private String _file;
        private String filename;
        private String filetype;
        private String initialComment;
        private Double threadTs;
        private String token;

        private UploadRequestBuilder() {
        }

        /**
         * Set title
         * @param title Title of file. (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set channels
         * @param channels Comma-separated list of channel names or IDs where the file will be shared. (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder channels(String channels) {
            this.channels = channels;
            return this;
        }
        
        /**
         * Set content
         * @param content File contents via a POST variable. If omitting this parameter, you must provide a &#x60;file&#x60;. (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set _file
         * @param _file File contents via &#x60;multipart/form-data&#x60;. If omitting this parameter, you must submit &#x60;content&#x60;. (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder _file(String _file) {
            this._file = _file;
            return this;
        }
        
        /**
         * Set filename
         * @param filename Filename of file. (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder filename(String filename) {
            this.filename = filename;
            return this;
        }
        
        /**
         * Set filetype
         * @param filetype A [file type](https://slack.dev) identifier. (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder filetype(String filetype) {
            this.filetype = filetype;
            return this;
        }
        
        /**
         * Set initialComment
         * @param initialComment The message text introducing the file in specified &#x60;channels&#x60;. (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder initialComment(String initialComment) {
            this.initialComment = initialComment;
            return this;
        }
        
        /**
         * Set threadTs
         * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to upload this file as a reply. Never use a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder threadTs(Double threadTs) {
            this.threadTs = threadTs;
            return this;
        }
        
        /**
         * Set token
         * @param token Authentication token. Requires scope: &#x60;files:write:user&#x60; (optional)
         * @return UploadRequestBuilder
         */
        public UploadRequestBuilder token(String token) {
            this.token = token;
            return this;
        }
        
        /**
         * Build call for upload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response after uploading a file to a channel with an initial message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            FilesUploadRequest filesUploadRequest = buildBodyParams();
            return uploadCall(title, channels, content, _file, filename, filetype, initialComment, threadTs, token, filesUploadRequest, _callback);
        }

        private FilesUploadRequest buildBodyParams() {
            FilesUploadRequest filesUploadRequest = new FilesUploadRequest();
            filesUploadRequest.title(this.title);
            filesUploadRequest.channels(this.channels);
            filesUploadRequest.content(this.content);
            filesUploadRequest._file(this._file);
            filesUploadRequest.filename(this.filename);
            filesUploadRequest.filetype(this.filetype);
            filesUploadRequest.initialComment(this.initialComment);
            filesUploadRequest.threadTs(this.threadTs);
            filesUploadRequest.token(this.token);
            return filesUploadRequest;
        }

        /**
         * Execute upload request
         * @return FilesUploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response after uploading a file to a channel with an initial message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public FilesUploadResponse execute() throws ApiException {
            FilesUploadRequest filesUploadRequest = buildBodyParams();
            ApiResponse<FilesUploadResponse> localVarResp = uploadWithHttpInfo(title, channels, content, _file, filename, filetype, initialComment, threadTs, token, filesUploadRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute upload request with HTTP info returned
         * @return ApiResponse&lt;FilesUploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response after uploading a file to a channel with an initial message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FilesUploadResponse> executeWithHttpInfo() throws ApiException {
            FilesUploadRequest filesUploadRequest = buildBodyParams();
            return uploadWithHttpInfo(title, channels, content, _file, filename, filetype, initialComment, threadTs, token, filesUploadRequest);
        }

        /**
         * Execute upload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success response after uploading a file to a channel with an initial message </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FilesUploadResponse> _callback) throws ApiException {
            FilesUploadRequest filesUploadRequest = buildBodyParams();
            return uploadAsync(title, channels, content, _file, filename, filetype, initialComment, threadTs, token, filesUploadRequest, _callback);
        }
    }

    /**
     * 
     * Uploads or creates a file.
     * @return UploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success response after uploading a file to a channel with an initial message </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Typical error response </td><td>  -  </td></tr>
     </table>
     * API method documentation
     * @see <a href="https://api.slack.com/methods/files.upload"> Documentation</a>
     */
    public UploadRequestBuilder upload() throws IllegalArgumentException {
        return new UploadRequestBuilder();
    }
}
