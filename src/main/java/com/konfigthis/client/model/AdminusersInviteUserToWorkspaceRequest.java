/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AdminusersInviteUserToWorkspaceRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AdminusersInviteUserToWorkspaceRequest {
  public static final String SERIALIZED_NAME_CHANNEL_IDS = "channel_ids";
  @SerializedName(SERIALIZED_NAME_CHANNEL_IDS)
  private String channelIds;

  public static final String SERIALIZED_NAME_CUSTOM_MESSAGE = "custom_message";
  @SerializedName(SERIALIZED_NAME_CUSTOM_MESSAGE)
  private String customMessage;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_GUEST_EXPIRATION_TS = "guest_expiration_ts";
  @SerializedName(SERIALIZED_NAME_GUEST_EXPIRATION_TS)
  private String guestExpirationTs;

  public static final String SERIALIZED_NAME_IS_RESTRICTED = "is_restricted";
  @SerializedName(SERIALIZED_NAME_IS_RESTRICTED)
  private Boolean isRestricted;

  public static final String SERIALIZED_NAME_IS_ULTRA_RESTRICTED = "is_ultra_restricted";
  @SerializedName(SERIALIZED_NAME_IS_ULTRA_RESTRICTED)
  private Boolean isUltraRestricted;

  public static final String SERIALIZED_NAME_REAL_NAME = "real_name";
  @SerializedName(SERIALIZED_NAME_REAL_NAME)
  private String realName;

  public static final String SERIALIZED_NAME_RESEND = "resend";
  @SerializedName(SERIALIZED_NAME_RESEND)
  private Boolean resend;

  public static final String SERIALIZED_NAME_TEAM_ID = "team_id";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public AdminusersInviteUserToWorkspaceRequest() {
  }

  public AdminusersInviteUserToWorkspaceRequest channelIds(String channelIds) {
    
    
    
    
    this.channelIds = channelIds;
    return this;
  }

   /**
   * A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
   * @return channelIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A comma-separated list of `channel_id`s for this user to join. At least one channel is required.")

  public String getChannelIds() {
    return channelIds;
  }


  public void setChannelIds(String channelIds) {
    
    
    
    this.channelIds = channelIds;
  }


  public AdminusersInviteUserToWorkspaceRequest customMessage(String customMessage) {
    
    
    
    
    this.customMessage = customMessage;
    return this;
  }

   /**
   * An optional message to send to the user in the invite email.
   * @return customMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional message to send to the user in the invite email.")

  public String getCustomMessage() {
    return customMessage;
  }


  public void setCustomMessage(String customMessage) {
    
    
    
    this.customMessage = customMessage;
  }


  public AdminusersInviteUserToWorkspaceRequest email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * The email address of the person to invite.
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The email address of the person to invite.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public AdminusersInviteUserToWorkspaceRequest guestExpirationTs(String guestExpirationTs) {
    
    
    
    
    this.guestExpirationTs = guestExpirationTs;
    return this;
  }

   /**
   * Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
   * @return guestExpirationTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.")

  public String getGuestExpirationTs() {
    return guestExpirationTs;
  }


  public void setGuestExpirationTs(String guestExpirationTs) {
    
    
    
    this.guestExpirationTs = guestExpirationTs;
  }


  public AdminusersInviteUserToWorkspaceRequest isRestricted(Boolean isRestricted) {
    
    
    
    
    this.isRestricted = isRestricted;
    return this;
  }

   /**
   * Is this user a multi-channel guest user? (default: false)
   * @return isRestricted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is this user a multi-channel guest user? (default: false)")

  public Boolean getIsRestricted() {
    return isRestricted;
  }


  public void setIsRestricted(Boolean isRestricted) {
    
    
    
    this.isRestricted = isRestricted;
  }


  public AdminusersInviteUserToWorkspaceRequest isUltraRestricted(Boolean isUltraRestricted) {
    
    
    
    
    this.isUltraRestricted = isUltraRestricted;
    return this;
  }

   /**
   * Is this user a single channel guest user? (default: false)
   * @return isUltraRestricted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is this user a single channel guest user? (default: false)")

  public Boolean getIsUltraRestricted() {
    return isUltraRestricted;
  }


  public void setIsUltraRestricted(Boolean isUltraRestricted) {
    
    
    
    this.isUltraRestricted = isUltraRestricted;
  }


  public AdminusersInviteUserToWorkspaceRequest realName(String realName) {
    
    
    
    
    this.realName = realName;
    return this;
  }

   /**
   * Full name of the user.
   * @return realName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Full name of the user.")

  public String getRealName() {
    return realName;
  }


  public void setRealName(String realName) {
    
    
    
    this.realName = realName;
  }


  public AdminusersInviteUserToWorkspaceRequest resend(Boolean resend) {
    
    
    
    
    this.resend = resend;
    return this;
  }

   /**
   * Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
   * @return resend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Allow this invite to be resent in the future if a user has not signed up yet. (default: false)")

  public Boolean getResend() {
    return resend;
  }


  public void setResend(Boolean resend) {
    
    
    
    this.resend = resend;
  }


  public AdminusersInviteUserToWorkspaceRequest teamId(String teamId) {
    
    
    
    
    this.teamId = teamId;
    return this;
  }

   /**
   * The ID (&#x60;T1234&#x60;) of the workspace.
   * @return teamId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID (`T1234`) of the workspace.")

  public String getTeamId() {
    return teamId;
  }


  public void setTeamId(String teamId) {
    
    
    
    this.teamId = teamId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AdminusersInviteUserToWorkspaceRequest instance itself
   */
  public AdminusersInviteUserToWorkspaceRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminusersInviteUserToWorkspaceRequest adminusersInviteUserToWorkspaceRequest = (AdminusersInviteUserToWorkspaceRequest) o;
    return Objects.equals(this.channelIds, adminusersInviteUserToWorkspaceRequest.channelIds) &&
        Objects.equals(this.customMessage, adminusersInviteUserToWorkspaceRequest.customMessage) &&
        Objects.equals(this.email, adminusersInviteUserToWorkspaceRequest.email) &&
        Objects.equals(this.guestExpirationTs, adminusersInviteUserToWorkspaceRequest.guestExpirationTs) &&
        Objects.equals(this.isRestricted, adminusersInviteUserToWorkspaceRequest.isRestricted) &&
        Objects.equals(this.isUltraRestricted, adminusersInviteUserToWorkspaceRequest.isUltraRestricted) &&
        Objects.equals(this.realName, adminusersInviteUserToWorkspaceRequest.realName) &&
        Objects.equals(this.resend, adminusersInviteUserToWorkspaceRequest.resend) &&
        Objects.equals(this.teamId, adminusersInviteUserToWorkspaceRequest.teamId)&&
        Objects.equals(this.additionalProperties, adminusersInviteUserToWorkspaceRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelIds, customMessage, email, guestExpirationTs, isRestricted, isUltraRestricted, realName, resend, teamId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminusersInviteUserToWorkspaceRequest {\n");
    sb.append("    channelIds: ").append(toIndentedString(channelIds)).append("\n");
    sb.append("    customMessage: ").append(toIndentedString(customMessage)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    guestExpirationTs: ").append(toIndentedString(guestExpirationTs)).append("\n");
    sb.append("    isRestricted: ").append(toIndentedString(isRestricted)).append("\n");
    sb.append("    isUltraRestricted: ").append(toIndentedString(isUltraRestricted)).append("\n");
    sb.append("    realName: ").append(toIndentedString(realName)).append("\n");
    sb.append("    resend: ").append(toIndentedString(resend)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel_ids");
    openapiFields.add("custom_message");
    openapiFields.add("email");
    openapiFields.add("guest_expiration_ts");
    openapiFields.add("is_restricted");
    openapiFields.add("is_ultra_restricted");
    openapiFields.add("real_name");
    openapiFields.add("resend");
    openapiFields.add("team_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channel_ids");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("team_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AdminusersInviteUserToWorkspaceRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AdminusersInviteUserToWorkspaceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminusersInviteUserToWorkspaceRequest is not found in the empty JSON string", AdminusersInviteUserToWorkspaceRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AdminusersInviteUserToWorkspaceRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("channel_ids").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_ids` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_ids").toString()));
      }
      if ((jsonObj.get("custom_message") != null && !jsonObj.get("custom_message").isJsonNull()) && !jsonObj.get("custom_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_message").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("guest_expiration_ts") != null && !jsonObj.get("guest_expiration_ts").isJsonNull()) && !jsonObj.get("guest_expiration_ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guest_expiration_ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guest_expiration_ts").toString()));
      }
      if ((jsonObj.get("real_name") != null && !jsonObj.get("real_name").isJsonNull()) && !jsonObj.get("real_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `real_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("real_name").toString()));
      }
      if (!jsonObj.get("team_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminusersInviteUserToWorkspaceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminusersInviteUserToWorkspaceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminusersInviteUserToWorkspaceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminusersInviteUserToWorkspaceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminusersInviteUserToWorkspaceRequest>() {
           @Override
           public void write(JsonWriter out, AdminusersInviteUserToWorkspaceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminusersInviteUserToWorkspaceRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AdminusersInviteUserToWorkspaceRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AdminusersInviteUserToWorkspaceRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AdminusersInviteUserToWorkspaceRequest
  * @throws IOException if the JSON string is invalid with respect to AdminusersInviteUserToWorkspaceRequest
  */
  public static AdminusersInviteUserToWorkspaceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminusersInviteUserToWorkspaceRequest.class);
  }

 /**
  * Convert an instance of AdminusersInviteUserToWorkspaceRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

