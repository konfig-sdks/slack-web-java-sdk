/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ChatPostEphemeralRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ChatPostEphemeralRequest {
  public static final String SERIALIZED_NAME_AS_USER = "as_user";
  @SerializedName(SERIALIZED_NAME_AS_USER)
  private Boolean asUser;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private String attachments;

  public static final String SERIALIZED_NAME_BLOCKS = "blocks";
  @SerializedName(SERIALIZED_NAME_BLOCKS)
  private String blocks;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private String channel;

  public static final String SERIALIZED_NAME_ICON_EMOJI = "icon_emoji";
  @SerializedName(SERIALIZED_NAME_ICON_EMOJI)
  private String iconEmoji;

  public static final String SERIALIZED_NAME_ICON_URL = "icon_url";
  @SerializedName(SERIALIZED_NAME_ICON_URL)
  private String iconUrl;

  public static final String SERIALIZED_NAME_LINK_NAMES = "link_names";
  @SerializedName(SERIALIZED_NAME_LINK_NAMES)
  private Boolean linkNames;

  public static final String SERIALIZED_NAME_PARSE = "parse";
  @SerializedName(SERIALIZED_NAME_PARSE)
  private String parse;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_THREAD_TS = "thread_ts";
  @SerializedName(SERIALIZED_NAME_THREAD_TS)
  private String threadTs;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public ChatPostEphemeralRequest() {
  }

  public ChatPostEphemeralRequest asUser(Boolean asUser) {
    
    
    
    
    this.asUser = asUser;
    return this;
  }

   /**
   * Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.
   * @return asUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.")

  public Boolean getAsUser() {
    return asUser;
  }


  public void setAsUser(Boolean asUser) {
    
    
    
    this.asUser = asUser;
  }


  public ChatPostEphemeralRequest attachments(String attachments) {
    
    
    
    
    this.attachments = attachments;
    return this;
  }

   /**
   * A JSON-based array of structured attachments, presented as a URL-encoded string.
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON-based array of structured attachments, presented as a URL-encoded string.")

  public String getAttachments() {
    return attachments;
  }


  public void setAttachments(String attachments) {
    
    
    
    this.attachments = attachments;
  }


  public ChatPostEphemeralRequest blocks(String blocks) {
    
    
    
    
    this.blocks = blocks;
    return this;
  }

   /**
   * A JSON-based array of structured blocks, presented as a URL-encoded string.
   * @return blocks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A JSON-based array of structured blocks, presented as a URL-encoded string.")

  public String getBlocks() {
    return blocks;
  }


  public void setBlocks(String blocks) {
    
    
    
    this.blocks = blocks;
  }


  public ChatPostEphemeralRequest channel(String channel) {
    
    
    
    
    this.channel = channel;
    return this;
  }

   /**
   * Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
   * @return channel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.")

  public String getChannel() {
    return channel;
  }


  public void setChannel(String channel) {
    
    
    
    this.channel = channel;
  }


  public ChatPostEphemeralRequest iconEmoji(String iconEmoji) {
    
    
    
    
    this.iconEmoji = iconEmoji;
    return this;
  }

   /**
   * Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](https://slack.dev) below.
   * @return iconEmoji
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](https://slack.dev) below.")

  public String getIconEmoji() {
    return iconEmoji;
  }


  public void setIconEmoji(String iconEmoji) {
    
    
    
    this.iconEmoji = iconEmoji;
  }


  public ChatPostEphemeralRequest iconUrl(String iconUrl) {
    
    
    
    
    this.iconUrl = iconUrl;
    return this;
  }

   /**
   * URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](https://slack.dev) below.
   * @return iconUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below.")

  public String getIconUrl() {
    return iconUrl;
  }


  public void setIconUrl(String iconUrl) {
    
    
    
    this.iconUrl = iconUrl;
  }


  public ChatPostEphemeralRequest linkNames(Boolean linkNames) {
    
    
    
    
    this.linkNames = linkNames;
    return this;
  }

   /**
   * Find and link channel names and usernames.
   * @return linkNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Find and link channel names and usernames.")

  public Boolean getLinkNames() {
    return linkNames;
  }


  public void setLinkNames(Boolean linkNames) {
    
    
    
    this.linkNames = linkNames;
  }


  public ChatPostEphemeralRequest parse(String parse) {
    
    
    
    
    this.parse = parse;
    return this;
  }

   /**
   * Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](https://slack.dev).
   * @return parse
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Change how messages are treated. Defaults to `none`. See [below](https://slack.dev).")

  public String getParse() {
    return parse;
  }


  public void setParse(String parse) {
    
    
    
    this.parse = parse;
  }


  public ChatPostEphemeralRequest text(String text) {
    
    
    
    
    this.text = text;
    return this;
  }

   /**
   * How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail.
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How this field works and whether it is required depends on other fields you use in your API call. [See below](https://slack.dev) for more detail.")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    
    
    
    this.text = text;
  }


  public ChatPostEphemeralRequest threadTs(String threadTs) {
    
    
    
    
    this.threadTs = threadTs;
    return this;
  }

   /**
   * Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread.
   * @return threadTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.")

  public String getThreadTs() {
    return threadTs;
  }


  public void setThreadTs(String threadTs) {
    
    
    
    this.threadTs = threadTs;
  }


  public ChatPostEphemeralRequest user(String user) {
    
    
    
    
    this.user = user;
    return this;
  }

   /**
   * &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument.
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    
    
    
    this.user = user;
  }


  public ChatPostEphemeralRequest username(String username) {
    
    
    
    
    this.username = username;
    return this;
  }

   /**
   * Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](https://slack.dev) below.
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](https://slack.dev) below.")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    
    
    
    this.username = username;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ChatPostEphemeralRequest instance itself
   */
  public ChatPostEphemeralRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChatPostEphemeralRequest chatPostEphemeralRequest = (ChatPostEphemeralRequest) o;
    return Objects.equals(this.asUser, chatPostEphemeralRequest.asUser) &&
        Objects.equals(this.attachments, chatPostEphemeralRequest.attachments) &&
        Objects.equals(this.blocks, chatPostEphemeralRequest.blocks) &&
        Objects.equals(this.channel, chatPostEphemeralRequest.channel) &&
        Objects.equals(this.iconEmoji, chatPostEphemeralRequest.iconEmoji) &&
        Objects.equals(this.iconUrl, chatPostEphemeralRequest.iconUrl) &&
        Objects.equals(this.linkNames, chatPostEphemeralRequest.linkNames) &&
        Objects.equals(this.parse, chatPostEphemeralRequest.parse) &&
        Objects.equals(this.text, chatPostEphemeralRequest.text) &&
        Objects.equals(this.threadTs, chatPostEphemeralRequest.threadTs) &&
        Objects.equals(this.user, chatPostEphemeralRequest.user) &&
        Objects.equals(this.username, chatPostEphemeralRequest.username)&&
        Objects.equals(this.additionalProperties, chatPostEphemeralRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asUser, attachments, blocks, channel, iconEmoji, iconUrl, linkNames, parse, text, threadTs, user, username, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChatPostEphemeralRequest {\n");
    sb.append("    asUser: ").append(toIndentedString(asUser)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    blocks: ").append(toIndentedString(blocks)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    iconEmoji: ").append(toIndentedString(iconEmoji)).append("\n");
    sb.append("    iconUrl: ").append(toIndentedString(iconUrl)).append("\n");
    sb.append("    linkNames: ").append(toIndentedString(linkNames)).append("\n");
    sb.append("    parse: ").append(toIndentedString(parse)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    threadTs: ").append(toIndentedString(threadTs)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("as_user");
    openapiFields.add("attachments");
    openapiFields.add("blocks");
    openapiFields.add("channel");
    openapiFields.add("icon_emoji");
    openapiFields.add("icon_url");
    openapiFields.add("link_names");
    openapiFields.add("parse");
    openapiFields.add("text");
    openapiFields.add("thread_ts");
    openapiFields.add("user");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChatPostEphemeralRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ChatPostEphemeralRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChatPostEphemeralRequest is not found in the empty JSON string", ChatPostEphemeralRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChatPostEphemeralRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) && !jsonObj.get("attachments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      if ((jsonObj.get("blocks") != null && !jsonObj.get("blocks").isJsonNull()) && !jsonObj.get("blocks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blocks").toString()));
      }
      if (!jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      if ((jsonObj.get("icon_emoji") != null && !jsonObj.get("icon_emoji").isJsonNull()) && !jsonObj.get("icon_emoji").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon_emoji` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon_emoji").toString()));
      }
      if ((jsonObj.get("icon_url") != null && !jsonObj.get("icon_url").isJsonNull()) && !jsonObj.get("icon_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon_url").toString()));
      }
      if ((jsonObj.get("parse") != null && !jsonObj.get("parse").isJsonNull()) && !jsonObj.get("parse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parse").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("thread_ts") != null && !jsonObj.get("thread_ts").isJsonNull()) && !jsonObj.get("thread_ts").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thread_ts` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thread_ts").toString()));
      }
      if (!jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChatPostEphemeralRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChatPostEphemeralRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChatPostEphemeralRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChatPostEphemeralRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ChatPostEphemeralRequest>() {
           @Override
           public void write(JsonWriter out, ChatPostEphemeralRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ChatPostEphemeralRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ChatPostEphemeralRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChatPostEphemeralRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChatPostEphemeralRequest
  * @throws IOException if the JSON string is invalid with respect to ChatPostEphemeralRequest
  */
  public static ChatPostEphemeralRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChatPostEphemeralRequest.class);
  }

 /**
  * Convert an instance of ChatPostEphemeralRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

