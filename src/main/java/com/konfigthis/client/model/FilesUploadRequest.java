/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * FilesUploadRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FilesUploadRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private String channels;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private String _file;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_FILETYPE = "filetype";
  @SerializedName(SERIALIZED_NAME_FILETYPE)
  private String filetype;

  public static final String SERIALIZED_NAME_INITIAL_COMMENT = "initial_comment";
  @SerializedName(SERIALIZED_NAME_INITIAL_COMMENT)
  private String initialComment;

  public static final String SERIALIZED_NAME_THREAD_TS = "thread_ts";
  @SerializedName(SERIALIZED_NAME_THREAD_TS)
  private Double threadTs;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public FilesUploadRequest() {
  }

  public FilesUploadRequest title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Title of file.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Title of file.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public FilesUploadRequest channels(String channels) {
    
    
    
    
    this.channels = channels;
    return this;
  }

   /**
   * Comma-separated list of channel names or IDs where the file will be shared.
   * @return channels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Comma-separated list of channel names or IDs where the file will be shared.")

  public String getChannels() {
    return channels;
  }


  public void setChannels(String channels) {
    
    
    
    this.channels = channels;
  }


  public FilesUploadRequest content(String content) {
    
    
    
    
    this.content = content;
    return this;
  }

   /**
   * File contents via a POST variable. If omitting this parameter, you must provide a &#x60;file&#x60;.
   * @return content
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "File contents via a POST variable. If omitting this parameter, you must provide a `file`.")

  public String getContent() {
    return content;
  }


  public void setContent(String content) {
    
    
    
    this.content = content;
  }


  public FilesUploadRequest _file(String _file) {
    
    
    
    
    this._file = _file;
    return this;
  }

   /**
   * File contents via &#x60;multipart/form-data&#x60;. If omitting this parameter, you must submit &#x60;content&#x60;.
   * @return _file
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`.")

  public String getFile() {
    return _file;
  }


  public void setFile(String _file) {
    
    
    
    this._file = _file;
  }


  public FilesUploadRequest filename(String filename) {
    
    
    
    
    this.filename = filename;
    return this;
  }

   /**
   * Filename of file.
   * @return filename
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Filename of file.")

  public String getFilename() {
    return filename;
  }


  public void setFilename(String filename) {
    
    
    
    this.filename = filename;
  }


  public FilesUploadRequest filetype(String filetype) {
    
    
    
    
    this.filetype = filetype;
    return this;
  }

   /**
   * A [file type](https://slack.dev) identifier.
   * @return filetype
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A [file type](https://slack.dev) identifier.")

  public String getFiletype() {
    return filetype;
  }


  public void setFiletype(String filetype) {
    
    
    
    this.filetype = filetype;
  }


  public FilesUploadRequest initialComment(String initialComment) {
    
    
    
    
    this.initialComment = initialComment;
    return this;
  }

   /**
   * The message text introducing the file in specified &#x60;channels&#x60;.
   * @return initialComment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The message text introducing the file in specified `channels`.")

  public String getInitialComment() {
    return initialComment;
  }


  public void setInitialComment(String initialComment) {
    
    
    
    this.initialComment = initialComment;
  }


  public FilesUploadRequest threadTs(Double threadTs) {
    
    
    
    
    this.threadTs = threadTs;
    return this;
  }

  public FilesUploadRequest threadTs(Integer threadTs) {
    
    
    
    
    this.threadTs = threadTs.doubleValue();
    return this;
  }

   /**
   * Provide another message&#39;s &#x60;ts&#x60; value to upload this file as a reply. Never use a reply&#39;s &#x60;ts&#x60; value; use its parent instead.
   * @return threadTs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead.")

  public Double getThreadTs() {
    return threadTs;
  }


  public void setThreadTs(Double threadTs) {
    
    
    
    this.threadTs = threadTs;
  }


  public FilesUploadRequest token(String token) {
    
    
    
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token. Requires scope: &#x60;files:write:user&#x60;
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token. Requires scope: `files:write:user`")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    
    
    
    this.token = token;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FilesUploadRequest instance itself
   */
  public FilesUploadRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilesUploadRequest filesUploadRequest = (FilesUploadRequest) o;
    return Objects.equals(this.title, filesUploadRequest.title) &&
        Objects.equals(this.channels, filesUploadRequest.channels) &&
        Objects.equals(this.content, filesUploadRequest.content) &&
        Objects.equals(this._file, filesUploadRequest._file) &&
        Objects.equals(this.filename, filesUploadRequest.filename) &&
        Objects.equals(this.filetype, filesUploadRequest.filetype) &&
        Objects.equals(this.initialComment, filesUploadRequest.initialComment) &&
        Objects.equals(this.threadTs, filesUploadRequest.threadTs) &&
        Objects.equals(this.token, filesUploadRequest.token)&&
        Objects.equals(this.additionalProperties, filesUploadRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, channels, content, _file, filename, filetype, initialComment, threadTs, token, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilesUploadRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    filetype: ").append(toIndentedString(filetype)).append("\n");
    sb.append("    initialComment: ").append(toIndentedString(initialComment)).append("\n");
    sb.append("    threadTs: ").append(toIndentedString(threadTs)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("channels");
    openapiFields.add("content");
    openapiFields.add("file");
    openapiFields.add("filename");
    openapiFields.add("filetype");
    openapiFields.add("initial_comment");
    openapiFields.add("thread_ts");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FilesUploadRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FilesUploadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilesUploadRequest is not found in the empty JSON string", FilesUploadRequest.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("channels") != null && !jsonObj.get("channels").isJsonNull()) && !jsonObj.get("channels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channels").toString()));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("file") != null && !jsonObj.get("file").isJsonNull()) && !jsonObj.get("file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("filetype") != null && !jsonObj.get("filetype").isJsonNull()) && !jsonObj.get("filetype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filetype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filetype").toString()));
      }
      if ((jsonObj.get("initial_comment") != null && !jsonObj.get("initial_comment").isJsonNull()) && !jsonObj.get("initial_comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initial_comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initial_comment").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilesUploadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilesUploadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilesUploadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilesUploadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FilesUploadRequest>() {
           @Override
           public void write(JsonWriter out, FilesUploadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FilesUploadRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FilesUploadRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FilesUploadRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FilesUploadRequest
  * @throws IOException if the JSON string is invalid with respect to FilesUploadRequest
  */
  public static FilesUploadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilesUploadRequest.class);
  }

 /**
  * Convert an instance of FilesUploadRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

