/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.DefsOkTrue;
import com.konfigthis.client.model.NewPagingStyle;
import com.konfigthis.client.model.ObjsFile;
import com.konfigthis.client.model.ObjsPaging;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Schema for successful response from files.info method
 */
@ApiModel(description = "Schema for successful response from files.info method")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class FilesInfoResponse {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<Object> comments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_HTML = "content_html";
  @SerializedName(SERIALIZED_NAME_CONTENT_HTML)
  private Object contentHtml = null;

  public static final String SERIALIZED_NAME_EDITOR = "editor";
  @SerializedName(SERIALIZED_NAME_EDITOR)
  private String editor;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private ObjsFile _file;

  public static final String SERIALIZED_NAME_OK = "ok";
  @SerializedName(SERIALIZED_NAME_OK)
  private DefsOkTrue ok;

  public static final String SERIALIZED_NAME_PAGING = "paging";
  @SerializedName(SERIALIZED_NAME_PAGING)
  private ObjsPaging paging;

  public static final String SERIALIZED_NAME_RESPONSE_METADATA = "response_metadata";
  @SerializedName(SERIALIZED_NAME_RESPONSE_METADATA)
  private List<NewPagingStyle> responseMetadata = null;

  public FilesInfoResponse() {
  }

  public FilesInfoResponse comments(List<Object> comments) {
    
    
    
    
    this.comments = comments;
    return this;
  }

  public FilesInfoResponse addCommentsItem(Object commentsItem) {
    this.comments.add(commentsItem);
    return this;
  }

   /**
   * Get comments
   * @return comments
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Object> getComments() {
    return comments;
  }


  public void setComments(List<Object> comments) {
    
    
    
    this.comments = comments;
  }


  public FilesInfoResponse contentHtml(Object contentHtml) {
    
    
    
    
    this.contentHtml = contentHtml;
    return this;
  }

   /**
   * Get contentHtml
   * @return contentHtml
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getContentHtml() {
    return contentHtml;
  }


  public void setContentHtml(Object contentHtml) {
    
    
    
    this.contentHtml = contentHtml;
  }


  public FilesInfoResponse editor(String editor) {
    
    
    
    
    this.editor = editor;
    return this;
  }

   /**
   * Get editor
   * @return editor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEditor() {
    return editor;
  }


  public void setEditor(String editor) {
    
    
    
    this.editor = editor;
  }


  public FilesInfoResponse _file(ObjsFile _file) {
    
    
    
    
    this._file = _file;
    return this;
  }

   /**
   * Get _file
   * @return _file
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ObjsFile getFile() {
    return _file;
  }


  public void setFile(ObjsFile _file) {
    
    
    
    this._file = _file;
  }


  public FilesInfoResponse ok(DefsOkTrue ok) {
    
    
    
    
    this.ok = ok;
    return this;
  }

   /**
   * Get ok
   * @return ok
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public DefsOkTrue getOk() {
    return ok;
  }


  public void setOk(DefsOkTrue ok) {
    
    
    
    this.ok = ok;
  }


  public FilesInfoResponse paging(ObjsPaging paging) {
    
    
    
    
    this.paging = paging;
    return this;
  }

   /**
   * Get paging
   * @return paging
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ObjsPaging getPaging() {
    return paging;
  }


  public void setPaging(ObjsPaging paging) {
    
    
    
    this.paging = paging;
  }


  public FilesInfoResponse responseMetadata(List<NewPagingStyle> responseMetadata) {
    
    
    
    
    this.responseMetadata = responseMetadata;
    return this;
  }

  public FilesInfoResponse addResponseMetadataItem(NewPagingStyle responseMetadataItem) {
    if (this.responseMetadata == null) {
      this.responseMetadata = new ArrayList<>();
    }
    this.responseMetadata.add(responseMetadataItem);
    return this;
  }

   /**
   * Get responseMetadata
   * @return responseMetadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NewPagingStyle> getResponseMetadata() {
    return responseMetadata;
  }


  public void setResponseMetadata(List<NewPagingStyle> responseMetadata) {
    
    
    
    this.responseMetadata = responseMetadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the FilesInfoResponse instance itself
   */
  public FilesInfoResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilesInfoResponse filesInfoResponse = (FilesInfoResponse) o;
    return Objects.equals(this.comments, filesInfoResponse.comments) &&
        Objects.equals(this.contentHtml, filesInfoResponse.contentHtml) &&
        Objects.equals(this.editor, filesInfoResponse.editor) &&
        Objects.equals(this._file, filesInfoResponse._file) &&
        Objects.equals(this.ok, filesInfoResponse.ok) &&
        Objects.equals(this.paging, filesInfoResponse.paging) &&
        Objects.equals(this.responseMetadata, filesInfoResponse.responseMetadata)&&
        Objects.equals(this.additionalProperties, filesInfoResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, contentHtml, editor, _file, ok, paging, responseMetadata, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilesInfoResponse {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    contentHtml: ").append(toIndentedString(contentHtml)).append("\n");
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    ok: ").append(toIndentedString(ok)).append("\n");
    sb.append("    paging: ").append(toIndentedString(paging)).append("\n");
    sb.append("    responseMetadata: ").append(toIndentedString(responseMetadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("content_html");
    openapiFields.add("editor");
    openapiFields.add("file");
    openapiFields.add("ok");
    openapiFields.add("paging");
    openapiFields.add("response_metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("comments");
    openapiRequiredFields.add("file");
    openapiRequiredFields.add("ok");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to FilesInfoResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!FilesInfoResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilesInfoResponse is not found in the empty JSON string", FilesInfoResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FilesInfoResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("comments") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("comments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("editor") != null && !jsonObj.get("editor").isJsonNull()) && !jsonObj.get("editor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `editor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("editor").toString()));
      }
      // validate the required field `file`
      ObjsFile.validateJsonObject(jsonObj.getAsJsonObject("file"));
      // validate the optional field `paging`
      if (jsonObj.get("paging") != null && !jsonObj.get("paging").isJsonNull()) {
        ObjsPaging.validateJsonObject(jsonObj.getAsJsonObject("paging"));
      }
      if (jsonObj.get("response_metadata") != null && !jsonObj.get("response_metadata").isJsonNull()) {
        JsonArray jsonArrayresponseMetadata = jsonObj.getAsJsonArray("response_metadata");
        if (jsonArrayresponseMetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("response_metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `response_metadata` to be an array in the JSON string but got `%s`", jsonObj.get("response_metadata").toString()));
          }

          // validate the optional field `response_metadata` (array)
          for (int i = 0; i < jsonArrayresponseMetadata.size(); i++) {
            NewPagingStyle.validateJsonObject(jsonArrayresponseMetadata.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilesInfoResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilesInfoResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilesInfoResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilesInfoResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FilesInfoResponse>() {
           @Override
           public void write(JsonWriter out, FilesInfoResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public FilesInfoResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             FilesInfoResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FilesInfoResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FilesInfoResponse
  * @throws IOException if the JSON string is invalid with respect to FilesInfoResponse
  */
  public static FilesInfoResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilesInfoResponse.class);
  }

 /**
  * Convert an instance of FilesInfoResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

