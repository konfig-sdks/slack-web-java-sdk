/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CallsAddRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CallsAddRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_DATE_START = "date_start";
  @SerializedName(SERIALIZED_NAME_DATE_START)
  private Integer dateStart;

  public static final String SERIALIZED_NAME_DESKTOP_APP_JOIN_URL = "desktop_app_join_url";
  @SerializedName(SERIALIZED_NAME_DESKTOP_APP_JOIN_URL)
  private String desktopAppJoinUrl;

  public static final String SERIALIZED_NAME_EXTERNAL_DISPLAY_ID = "external_display_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DISPLAY_ID)
  private String externalDisplayId;

  public static final String SERIALIZED_NAME_EXTERNAL_UNIQUE_ID = "external_unique_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_UNIQUE_ID)
  private String externalUniqueId;

  public static final String SERIALIZED_NAME_JOIN_URL = "join_url";
  @SerializedName(SERIALIZED_NAME_JOIN_URL)
  private String joinUrl;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private String users;

  public CallsAddRequest() {
  }

  public CallsAddRequest title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * The name of the Call.
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The name of the Call.")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public CallsAddRequest createdBy(String createdBy) {
    
    
    
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required.
   * @return createdBy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required.")

  public String getCreatedBy() {
    return createdBy;
  }


  public void setCreatedBy(String createdBy) {
    
    
    
    this.createdBy = createdBy;
  }


  public CallsAddRequest dateStart(Integer dateStart) {
    
    
    
    
    this.dateStart = dateStart;
    return this;
  }

   /**
   * Call start time in UTC UNIX timestamp format
   * @return dateStart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Call start time in UTC UNIX timestamp format")

  public Integer getDateStart() {
    return dateStart;
  }


  public void setDateStart(Integer dateStart) {
    
    
    
    this.dateStart = dateStart;
  }


  public CallsAddRequest desktopAppJoinUrl(String desktopAppJoinUrl) {
    
    
    
    
    this.desktopAppJoinUrl = desktopAppJoinUrl;
    return this;
  }

   /**
   * When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
   * @return desktopAppJoinUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.")

  public String getDesktopAppJoinUrl() {
    return desktopAppJoinUrl;
  }


  public void setDesktopAppJoinUrl(String desktopAppJoinUrl) {
    
    
    
    this.desktopAppJoinUrl = desktopAppJoinUrl;
  }


  public CallsAddRequest externalDisplayId(String externalDisplayId) {
    
    
    
    
    this.externalDisplayId = externalDisplayId;
    return this;
  }

   /**
   * An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.
   * @return externalDisplayId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.")

  public String getExternalDisplayId() {
    return externalDisplayId;
  }


  public void setExternalDisplayId(String externalDisplayId) {
    
    
    
    this.externalDisplayId = externalDisplayId;
  }


  public CallsAddRequest externalUniqueId(String externalUniqueId) {
    
    
    
    
    this.externalUniqueId = externalUniqueId;
    return this;
  }

   /**
   * An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.
   * @return externalUniqueId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.")

  public String getExternalUniqueId() {
    return externalUniqueId;
  }


  public void setExternalUniqueId(String externalUniqueId) {
    
    
    
    this.externalUniqueId = externalUniqueId;
  }


  public CallsAddRequest joinUrl(String joinUrl) {
    
    
    
    
    this.joinUrl = joinUrl;
    return this;
  }

   /**
   * The URL required for a client to join the Call.
   * @return joinUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The URL required for a client to join the Call.")

  public String getJoinUrl() {
    return joinUrl;
  }


  public void setJoinUrl(String joinUrl) {
    
    
    
    this.joinUrl = joinUrl;
  }


  public CallsAddRequest users(String users) {
    
    
    
    
    this.users = users;
    return this;
  }

   /**
   * The list of users to register as participants in the Call. [Read more on how to specify users here](https://slack.dev).
   * @return users
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The list of users to register as participants in the Call. [Read more on how to specify users here](https://slack.dev).")

  public String getUsers() {
    return users;
  }


  public void setUsers(String users) {
    
    
    
    this.users = users;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CallsAddRequest instance itself
   */
  public CallsAddRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallsAddRequest callsAddRequest = (CallsAddRequest) o;
    return Objects.equals(this.title, callsAddRequest.title) &&
        Objects.equals(this.createdBy, callsAddRequest.createdBy) &&
        Objects.equals(this.dateStart, callsAddRequest.dateStart) &&
        Objects.equals(this.desktopAppJoinUrl, callsAddRequest.desktopAppJoinUrl) &&
        Objects.equals(this.externalDisplayId, callsAddRequest.externalDisplayId) &&
        Objects.equals(this.externalUniqueId, callsAddRequest.externalUniqueId) &&
        Objects.equals(this.joinUrl, callsAddRequest.joinUrl) &&
        Objects.equals(this.users, callsAddRequest.users)&&
        Objects.equals(this.additionalProperties, callsAddRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, createdBy, dateStart, desktopAppJoinUrl, externalDisplayId, externalUniqueId, joinUrl, users, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallsAddRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    dateStart: ").append(toIndentedString(dateStart)).append("\n");
    sb.append("    desktopAppJoinUrl: ").append(toIndentedString(desktopAppJoinUrl)).append("\n");
    sb.append("    externalDisplayId: ").append(toIndentedString(externalDisplayId)).append("\n");
    sb.append("    externalUniqueId: ").append(toIndentedString(externalUniqueId)).append("\n");
    sb.append("    joinUrl: ").append(toIndentedString(joinUrl)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("created_by");
    openapiFields.add("date_start");
    openapiFields.add("desktop_app_join_url");
    openapiFields.add("external_display_id");
    openapiFields.add("external_unique_id");
    openapiFields.add("join_url");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("external_unique_id");
    openapiRequiredFields.add("join_url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CallsAddRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CallsAddRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallsAddRequest is not found in the empty JSON string", CallsAddRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CallsAddRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) && !jsonObj.get("created_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_by").toString()));
      }
      if ((jsonObj.get("desktop_app_join_url") != null && !jsonObj.get("desktop_app_join_url").isJsonNull()) && !jsonObj.get("desktop_app_join_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `desktop_app_join_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("desktop_app_join_url").toString()));
      }
      if ((jsonObj.get("external_display_id") != null && !jsonObj.get("external_display_id").isJsonNull()) && !jsonObj.get("external_display_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_display_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_display_id").toString()));
      }
      if (!jsonObj.get("external_unique_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_unique_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_unique_id").toString()));
      }
      if (!jsonObj.get("join_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `join_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("join_url").toString()));
      }
      if ((jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull()) && !jsonObj.get("users").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `users` to be a primitive type in the JSON string but got `%s`", jsonObj.get("users").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallsAddRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallsAddRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallsAddRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallsAddRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CallsAddRequest>() {
           @Override
           public void write(JsonWriter out, CallsAddRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CallsAddRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CallsAddRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CallsAddRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CallsAddRequest
  * @throws IOException if the JSON string is invalid with respect to CallsAddRequest
  */
  public static CallsAddRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallsAddRequest.class);
  }

 /**
  * Convert an instance of CallsAddRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

