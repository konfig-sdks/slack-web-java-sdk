/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * UsersIdentityResponseInnerUser
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class UsersIdentityResponseInnerUser {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_IMAGE192 = "image_192";
  @SerializedName(SERIALIZED_NAME_IMAGE192)
  private String image192;

  public static final String SERIALIZED_NAME_IMAGE24 = "image_24";
  @SerializedName(SERIALIZED_NAME_IMAGE24)
  private String image24;

  public static final String SERIALIZED_NAME_IMAGE32 = "image_32";
  @SerializedName(SERIALIZED_NAME_IMAGE32)
  private String image32;

  public static final String SERIALIZED_NAME_IMAGE48 = "image_48";
  @SerializedName(SERIALIZED_NAME_IMAGE48)
  private String image48;

  public static final String SERIALIZED_NAME_IMAGE512 = "image_512";
  @SerializedName(SERIALIZED_NAME_IMAGE512)
  private String image512;

  public static final String SERIALIZED_NAME_IMAGE72 = "image_72";
  @SerializedName(SERIALIZED_NAME_IMAGE72)
  private String image72;

  public UsersIdentityResponseInnerUser() {
  }

  public UsersIdentityResponseInnerUser id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public UsersIdentityResponseInnerUser name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public UsersIdentityResponseInnerUser email(String email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    
    this.email = email;
  }


  public UsersIdentityResponseInnerUser image192(String image192) {
    
    
    
    
    this.image192 = image192;
    return this;
  }

   /**
   * Get image192
   * @return image192
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImage192() {
    return image192;
  }


  public void setImage192(String image192) {
    
    
    
    this.image192 = image192;
  }


  public UsersIdentityResponseInnerUser image24(String image24) {
    
    
    
    
    this.image24 = image24;
    return this;
  }

   /**
   * Get image24
   * @return image24
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImage24() {
    return image24;
  }


  public void setImage24(String image24) {
    
    
    
    this.image24 = image24;
  }


  public UsersIdentityResponseInnerUser image32(String image32) {
    
    
    
    
    this.image32 = image32;
    return this;
  }

   /**
   * Get image32
   * @return image32
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImage32() {
    return image32;
  }


  public void setImage32(String image32) {
    
    
    
    this.image32 = image32;
  }


  public UsersIdentityResponseInnerUser image48(String image48) {
    
    
    
    
    this.image48 = image48;
    return this;
  }

   /**
   * Get image48
   * @return image48
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImage48() {
    return image48;
  }


  public void setImage48(String image48) {
    
    
    
    this.image48 = image48;
  }


  public UsersIdentityResponseInnerUser image512(String image512) {
    
    
    
    
    this.image512 = image512;
    return this;
  }

   /**
   * Get image512
   * @return image512
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImage512() {
    return image512;
  }


  public void setImage512(String image512) {
    
    
    
    this.image512 = image512;
  }


  public UsersIdentityResponseInnerUser image72(String image72) {
    
    
    
    
    this.image72 = image72;
    return this;
  }

   /**
   * Get image72
   * @return image72
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImage72() {
    return image72;
  }


  public void setImage72(String image72) {
    
    
    
    this.image72 = image72;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UsersIdentityResponseInnerUser instance itself
   */
  public UsersIdentityResponseInnerUser putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsersIdentityResponseInnerUser usersIdentityResponseInnerUser = (UsersIdentityResponseInnerUser) o;
    return Objects.equals(this.id, usersIdentityResponseInnerUser.id) &&
        Objects.equals(this.name, usersIdentityResponseInnerUser.name) &&
        Objects.equals(this.email, usersIdentityResponseInnerUser.email) &&
        Objects.equals(this.image192, usersIdentityResponseInnerUser.image192) &&
        Objects.equals(this.image24, usersIdentityResponseInnerUser.image24) &&
        Objects.equals(this.image32, usersIdentityResponseInnerUser.image32) &&
        Objects.equals(this.image48, usersIdentityResponseInnerUser.image48) &&
        Objects.equals(this.image512, usersIdentityResponseInnerUser.image512) &&
        Objects.equals(this.image72, usersIdentityResponseInnerUser.image72)&&
        Objects.equals(this.additionalProperties, usersIdentityResponseInnerUser.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, email, image192, image24, image32, image48, image512, image72, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsersIdentityResponseInnerUser {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    image192: ").append(toIndentedString(image192)).append("\n");
    sb.append("    image24: ").append(toIndentedString(image24)).append("\n");
    sb.append("    image32: ").append(toIndentedString(image32)).append("\n");
    sb.append("    image48: ").append(toIndentedString(image48)).append("\n");
    sb.append("    image512: ").append(toIndentedString(image512)).append("\n");
    sb.append("    image72: ").append(toIndentedString(image72)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("email");
    openapiFields.add("image_192");
    openapiFields.add("image_24");
    openapiFields.add("image_32");
    openapiFields.add("image_48");
    openapiFields.add("image_512");
    openapiFields.add("image_72");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UsersIdentityResponseInnerUser
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UsersIdentityResponseInnerUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsersIdentityResponseInnerUser is not found in the empty JSON string", UsersIdentityResponseInnerUser.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsersIdentityResponseInnerUser.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("image_192") != null && !jsonObj.get("image_192").isJsonNull()) && !jsonObj.get("image_192").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_192` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_192").toString()));
      }
      if ((jsonObj.get("image_24") != null && !jsonObj.get("image_24").isJsonNull()) && !jsonObj.get("image_24").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_24` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_24").toString()));
      }
      if ((jsonObj.get("image_32") != null && !jsonObj.get("image_32").isJsonNull()) && !jsonObj.get("image_32").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_32` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_32").toString()));
      }
      if ((jsonObj.get("image_48") != null && !jsonObj.get("image_48").isJsonNull()) && !jsonObj.get("image_48").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_48` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_48").toString()));
      }
      if ((jsonObj.get("image_512") != null && !jsonObj.get("image_512").isJsonNull()) && !jsonObj.get("image_512").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_512` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_512").toString()));
      }
      if ((jsonObj.get("image_72") != null && !jsonObj.get("image_72").isJsonNull()) && !jsonObj.get("image_72").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_72` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_72").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsersIdentityResponseInnerUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsersIdentityResponseInnerUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsersIdentityResponseInnerUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsersIdentityResponseInnerUser.class));

       return (TypeAdapter<T>) new TypeAdapter<UsersIdentityResponseInnerUser>() {
           @Override
           public void write(JsonWriter out, UsersIdentityResponseInnerUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UsersIdentityResponseInnerUser read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             UsersIdentityResponseInnerUser instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UsersIdentityResponseInnerUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UsersIdentityResponseInnerUser
  * @throws IOException if the JSON string is invalid with respect to UsersIdentityResponseInnerUser
  */
  public static UsersIdentityResponseInnerUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsersIdentityResponseInnerUser.class);
  }

 /**
  * Convert an instance of UsersIdentityResponseInnerUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

